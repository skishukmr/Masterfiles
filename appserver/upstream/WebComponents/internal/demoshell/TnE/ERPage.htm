<w:ModalPageWrapper title="Expense Report Editor!" editable="$true" okTitle="Submit" hasForm="$true"
        hasSidebarNotch="$false" isSidebarVisible="$false" showBottomButtons="$false">

<w:HintMessage showTopLine="$true">
    This is really nifty!
</w:HintMessage>
<table width="100%">
    <tr>
        <td valign="top" width="100%">
            <div class="flexContainer">
                <t:DataTable displayGroup="$displayGroup" csvPath="ER.csv" item="$currentItem"
                            multiSelect="$true" showSelectionColumn="$false" submitOnSelectionChange="$true"
                            enableScrolling="$true" showOptionsMenu="$true"
                            title="Expense Items">

                    <t:Column key="Year" label="Date" formatter="$formatters.shortDate"/>

                    <t:Column key="Type" label="Type!" action="$goto.Home"/>

                    <t:Column key="Amount" formatter="$formatters.money" align="right"/>
                    <t:Column key="Project">
                    </t:Column>


                    <t:SelectionButtonArea>
                    </t:SelectionButtonArea>

                    <t:ButtonArea>
                        <w:TextButton action="$deleteSelected">Delete</w:TextButton>\
                        <w:PulldownButton menuId="AddItem">AddNewItem</w:PulldownButton>
                        <w:TextButton action="$bigPanel">Big Panel</w:TextButton>\
                        <w:TextButton action="$longRunningAction" confirmationId="LRAConf">Long Running Action</w:TextButton>\
                    </t:ButtonArea>

                </t:DataTable>

                <w:PopupMenu menuId="AddItem">
                    <w:PopupMenuHeading showSeparator="$false">\
                        Create New Expense\
                    </w:PopupMenuHeading>

                    <w:PopupMenuItem action='${addItem("Hotel")}'>\
                            Hotel\
                    </w:PopupMenuItem>
                    <w:PopupMenuItem action='${addItem("Meal")}'>\
                            Meal\
                    </w:PopupMenuItem>
                </w:PopupMenu>\
            </div>
        </td>

        <a:PhaseInvocation append="$checkSelection"/>
        
        <td  style="padding:0px 8px 0px 8px">\
            <!---
            <div class="brandMd">
                <a:Image filename="cleardot.gif" height="600" width="3"/>\
            </div>
            -->
        </td>

        <td valign="top" width="30%" class="smallFont">
            <div class="flexContainer">
                <w:TabSet class="tabWrapper" contentClass="noPadding tabContentWrapper" index="$tabIndex">
                  <w:Tab label="Expense Items" dropType="Expense" dropAction="$null">
                      <div style="padding:5px">
                          <a:If notEqualNull="$displayGroup.selectedObject">
                              <table>
                                  <tr>
                                      <td width="99%">
                                          <h1><a:String value="$displayGroup.selectedObject.Type"/></h1>
                                      </td>
                                      <td align="right">
                                          <w:TextButton action="$save">Save</w:TextButton>
                                      </td>
                                  </tr>
                                  <tr>\
                                  <td colspan="2">

                                  </td>
                                      <a:IncludeComponent awcomponentName="$viewerForSelectedItem" currentItem="$displayGroup.selectedObject"/>
                                  </tr>
                              </table>

                          <a:Else/>
                              <h1>Add Expense Line</h1>
                              <a:For item="$expenseType" list="$expenseTypes">
                                  <li><a:Hyperlink action="${addItem(expenseType)}">$expenseType</a:Hyperlink>
                              </a:For>
                          </a:If>
                      </div>
                  </w:Tab>
                  <w:Tab label="Charges" dropType="Expense" dropAction="$null">
                      <t:DataTable class="noBox scrollTableWrapper" multiSelect="$true" csvPath="../Table_Samples.awz/SampleSpend.csv"
                              initialSortDirection="descending" initialSortKey="Year"
                              enableScrolling="$true" showOptionsMenu="$false">

                          <t:Column key="Year" label="Date" formatter="$formatters.shortDate"/>
                          <t:Column key="Department"/>
                          <t:Column key="Amount" formatter="$formatters.money" align="right"/>
                          <t:ButtonArea>
                              <w:TextButton action="$null">Add Charge</w:TextButton>
                          </t:ButtonArea>
                      </t:DataTable>
                  </w:Tab>
                  <w:Tab label="TAs" isVisible="$false">
                      <Include name="../Table_Samples.awz/Step9.3-PivotOutline.htm" container="$false"/>
                  </w:Tab>
                </w:TabSet>
                <div style="line-height:1px;height:1px;width:300px"></div>
            </div>
        </td>
    </tr>
</table>
<a:PhaseInvocation append="$rememberLastSelected"/>
<w:Confirmation id="LRAConf" lazyLoadConfirmation="$false" okAction="$longRunningAction">
    <a:Content name="header">\
        Sample Long Running Operation Alert!
    </a:Content>\
    <a:Content name="content">\
        <table>\
            <tr>\
                <td>\
                    Are you sure that you want to do this?  This will take > 30 seconds!
                </td>\
            </tr>\
        </table>\
    </a:Content>\
</w:Confirmation>
</w:ModalPageWrapper>
<groovy>
package ariba.ui.demoshell;
import ariba.ui.aribaweb.core.*;
import ariba.ui.widgets.*;
import ariba.ui.table.*;
import ariba.ui.outline.*;
import ariba.util.core.*;

class Component extends AWXHTMLComponent {
    def tabIndex=0;
    def displayGroup;
    def selectedItem;
    def currentItem = null;
    def expenseTypes = ["Meal", "Hotel", "Airfare", "Car", "Entertainment"];
    def expenseType;
    def lastSelectedObject;

    def viewerForSelectedItem () {
        def type = displayGroup.selectedObject().Type;
        if (type == "Meal" ) return "DetailViewer.htm";
        if (type == "Hotel" ) return "DetailViewer.htm";
        return "SimpleViewer.htm";
    }

    def save() {
        if (!errorManager().checkErrorsAndEnableDisplay())
            displayGroup.setSelectedObject(null);
        return null;
    }

    def addItem (type)
    {
        // Clone selected item, add it to list, and select it
        def newItem = [:];  // new record
        newItem.Type = type;
        newItem.Year = new ariba.util.core.Date();
        def list = displayGroup.allObjects();
        list.add(newItem);
        displayGroup.setObjectArray(list);
        displayGroup.setSelectedObject(newItem);

        return null;  // same page
    }

    def deleteSelected () {
        displayGroup.setObjectArray(ListUtil.minus(displayGroup.allObjects(), displayGroup.selectedObjects()));
        return null;
    }


    def rememberLastSelected () { lastSelectedObject = displayGroup.selectedObject(); }

    def checkSelection () {
        if (displayGroup.selectedObject() != lastSelectedObject) {
            tabIndex = 0;
        }
    }

    def bigPanel () {
        def p = pageWithName("TETestPanel.htm");
        p.setClientPanel(true);
        return p; 
    }

    def longRunningAction () {
        java.lang.Thread.sleep(4000); // pretend that it took us 4 sec before initing status string
        def m = ProgressMonitor.instance();
        m.prepare("<h3>Step 1 of 2: Process items</h3>(Processed %s of %s)", displayGroup.allObjects().size());
        fakeDoProcessItems();

        m.prepare("<h3>Step 2 of 2: Optimizing items</h3>(Processed %s of %s)", displayGroup.allObjects().size());
        fakeDoProcessItems();

        return null;
    }

    // Pretend that this is app code that doesn't know about the UI, but is doing some extensive processing
    // (like inserting items from a large file, or loading a large Sourcing event)
    def fakeDoProcessItems () {
        for (i in 1..displayGroup.allObjects().size()) {
            java.lang.Thread.sleep(1000); // pretend to work for one second
            ProgressMonitor.instance().incrementCurrentCount();
        }
    }

    def chooserState;
    def selectionSource = new MatchSource();
    def selections;
    def selectAction () { return null; }
}

class MatchSource implements ChooserSelectionSource
{
    def NamesList = [
        "ytang_supplier1",
        "gforget_supplier1",
        "Sgorantla_supplier1",
        "Mwhitmore_supplier1",
        "Mtessel_supplier1",
        "Chak_supplier1",
        "Mdao_supplier1",
    ];

    public List match (String pattern, int max) {
        List matches = match(NamesList, pattern);
        return (matches.size() > max) ? matches.subList(0, max) : matches;
    }

    public List match(List selections, String pattern) {
        if (pattern == null)  return selections;
        return selections.findAll { name -> name.startsWith(pattern); }
    }
}
</groovy>
