<w:BasicPageWrapper hasForm="$true" hasSidebarNotch="$false" isSidebarVisible="$false">
<style>
    td.tableBody pre { line-height:95% }
    .scrollClip { overflow:scroll; border: 1px solid #9C9CB8; margin-top: 5px; height:500px; }
</style>
<w:HintMessage>
    You may search and filter by path hierarchy on the left, and see excerpts from matches on the right.
    <a href="http://lucene.apache.org/java/docs/queryparsersyntax.html#Terms" target="new">Query Syntax</a>
</w:HintMessage>
<table width="100%"><tr>
    <td valign="top" width="35%">
        <div class="flexContainer">
            <t:DataTable item="$node" children="$node.nonLeafChildren" displayGroup="$outlineDisplayGroup"
                    multiSelect="$true" showSelectionColumn="$false" submitOnSelectionChange="$true"
                    class="scrollTableWrapper smallFont" enableScrolling="$true" showColumnHeader="$false">
                <t:HeadingArea>
                    <table cellspacing="0" cellpadding="0">
                        <tr><td colspan="2"><b>Search Source</b></td></tr>
                        <tr>
                            <td><a:TextField value="$queryString" action="$searchAction" size="35"/></td>
                            <td><w:TextButton action="$searchAction">Search</w:TextButton></td>
                        </tr>
                        <tr><td colspan="2">\
                            <a:For list="$fileTypeList" item="$fileType">
                                <nobr><a:Label>\
                                    <a:Checkbox action="$fileTypesChanged" value="$fileTypeEnabled"/>
                                    $fileType ($fileTypeCount)
                                </a:Label></nobr>
                            </a:For>
                        </td></tr>
                    </table>
                </t:HeadingArea>
                <t:Column>\
                    <w:OutlineControl indentationPerLevel="12" renderAsTable="$false">\
                        $node.name ($node.leafCount)
                    </w:OutlineControl>\
                </t:Column>
            </t:DataTable>
        </div>
    </td>
    <td valign="top" width="100%" style="padding-left:12px">
        <div class="flexContainer">
            <t:DataTable list="$filteredMatches" item="$doc" displayGroup="$resultDisplayGroup"
                    singleSelect="$true" showSelectionColumn="$false" submitOnSelectionChange="$true"
                    enableScrolling="$true" showOptionsMenu="$true" title="$message" showColumnHeader="$false">
                <a:Content name="optionsMenu">
                    <a:If ifTrue="$showingDetails">
                        <a:Hyperlink action="${showingDetails=false;null}">&lt; Hide Details</a:Hyperlink>
                    <a:Else/>
                        <a:Hyperlink action="${showingDetails=true;null}">Show Details &gt;</a:Hyperlink>
                    </a:If>
                    &nbsp;
                </a:Content>
                <t:Column label="Class" isValueColumn="$true">
                    <b><a:String value='$doc.fileName'/></b> <a:String value='$doc.directory'/>
                </t:Column>
                <t:RowDetail style="padding:0px 4px 0px 4px" isVisible="$showingDetails">\
                    <pre><a:String escapeUnsafeHtml="$true" value='$doc.hitExcerpt'/></pre>\
                </t:RowDetail>
            </t:DataTable>
            <table _ifTrue="$resultDisplayGroup.selectedObject" class="fixedTable" cellpadding="0" cellspacing="0"><tr><td>
                <div class="scrollClip" id="sourceDiv">\
                    <pre><a:String escapeUnsafeHtml="$true" value='$resultDisplayGroup.selectedObject.highlightedContents'/></pre>
                </div>\
            </td></tr></table>
        </div>
    </td>
</tr></table>
</w:BasicPageWrapper>\
<groovy>
package ariba.ui.demoshell;
import ariba.ui.aribaweb.core.*;
import ariba.ui.aribaweb.util.*;
import ariba.ui.widgets.*;
import ariba.ui.table.*;
import ariba.ui.outline.*;
import ariba.util.core.*;
import org.apache.lucene.analysis.standard.StandardAnalyzer
import org.apache.lucene.analysis.TokenStream
import org.apache.lucene.queryParser.QueryParser
import org.apache.lucene.search.*
import org.apache.lucene.search.highlight.*
import org.apache.lucene.store.FSDirectory
import org.apache.lucene.index.IndexReader

class Component extends AWXHTMLComponent {
    static List searchers
    def queryString, doc, message, showingDetails=false
    Node root, node
    def outlineDisplayGroup = new AWTDisplayGroup(), resultDisplayGroup
    def _filteredMatches, _lastSelection;
    def fileTypes = [:], fileType, fileTypeList, _enabledTypes

    void init () {
        if (!searchers) {
            searchers = []; ["ssp", "s4"].each { prod ->
                ["/allSrc/${prod}", "//maytag/home/craigf/Public/searchSource/${prod}", "/home/craigf/Public/searchSource/${prod}"].find {
                        def dir = new File(it, "index.lucene")
                        if (dir.exists()) {searchers.add(new SourceSearcher(dir)); return true} else return false;
                    //  "${AWUtil.getenv("ARIBA_RC_PATH")}/reports"
                }
            }
        }
        // auto-search if we're accessed via http://machine:port/Demo/Ariba/SearchSource.htm?q=someQueryString
        queryString = requestContext().request().formValueForKey("q")
        if (queryString) searchAction();
    }

    def searchAction () {
        fileTypes = [:]
        doQuery(queryString) { doc ->
            def type = doc.type()
            def val = fileTypes[type]
            fileTypes[type] = val ? val+1 : 1
        }
        fileTypeList = new ArrayList(fileTypes.keySet()).sort()
        _enabledTypes = new HashSet()
        return null
    }

    def doQuery (q, collector) {
        // Query with collector, building an outline of all matched paths
        int matchCount = 0
        root = new Node(_name:"All Matches")
        searchers.each { it.search(q) { doc ->
            root.add(doc, doc.path().split(/[\/|\\]/), 0)
            if (collector) collector(doc)
            matchCount++
        }}
        message = "Found ${matchCount} matches for '$q':"

        // collapse single-child parents, then "smart open" -- until we have 25 open
        root.collapse()
        outlineDisplayGroup.setObjectArray([root])
        outlineDisplayGroup.setSelectedObject(root)
        def outline = outlineDisplayGroup.outlineState()
        int level =0, lastCount = -1, openCount = 0
        while (lastCount != openCount && openCount < 30) {
            lastCount = openCount
            root.eachAtDepth(level++) { node ->
                if (!node.isLeaf() && (openCount + node._children.size() < 30)) {
                    outline.setExpansionState(node, true)
                    openCount += node._children.size()
                }
            }
        }
        return  null;
    }

    def filteredMatches () {
        def selection = outlineDisplayGroup.selectedObjects();
        if (selection != _lastSelection) {
            _lastSelection = selection;
            def matchSet = new HashSet();
            selection.each { node -> node.eachNode { if (it._doc) matchSet.add(it._doc) } }
            _filteredMatches = matchSet.size() ? new ArrayList(matchSet).sort { a,b -> return a.path().compareTo(b.path()) } : null
        }
        return _filteredMatches;
    }

    def fileTypeEnabled () { return _enabledTypes.contains(fileType); }
    def setFileTypeEnabled (boolean yn) {  if (yn) _enabledTypes.add(fileType) else _enabledTypes.remove(fileType) }
    def fileTypeCount () { fileTypes[fileType] }

    def fileTypesChanged () {
        String q = queryString
        if (_enabledTypes.size() > 0 && _enabledTypes.size() < fileTypes.size()) {
            def fieldString =""
            _enabledTypes.each { fieldString += it + " " }
            q = "(${q}) AND type:(${fieldString})"
        }
        return doQuery(q, null)
    }
}

class SourceSearcher {
    File indexDir, sourceDir;
    def reader, searcher, analyzer;
    List pathsByDocId, typesByDocId;
    public SourceSearcher (indexDir) {
        println "Warming docId cache from  ${indexDir}"
        reader = IndexReader.open(indexDir.getAbsolutePath())
        pathsByDocId = []; typesByDocId = []
        (0..reader.maxDoc()-1).each {
            pathsByDocId.add(reader.isDeleted(it) ? null : reader.document(it)["fullPath"])
            typesByDocId.add(reader.isDeleted(it) ? null : reader.document(it)["type"])
        }
        println "Read full paths: ${pathsByDocId.size()}"

        sourceDir = new File(new File(indexDir, "sourcePath.txt").getText())
        searcher = new IndexSearcher(FSDirectory.getDirectory(indexDir, false))
        analyzer = new StandardAnalyzer()
    }

    def search (String q, Closure collector) { new SearchState (source:this).search(q, collector) }
}

class SearchState {
    static def highlightFormatter = new SimpleHTMLFormatter('<span class="brandAccent">', '</span>')
    SourceSearcher source
    Highlighter excerptHighlighter, fullHighlighter
    def search (String q, Closure collector) {
        def query = new QueryParser("contents", source.analyzer).parse(q)
        source.searcher.search(query, new CollectorRelay( closure: { docId -> collector(new DocRef(this, docId)) }))
        excerptHighlighter = new Highlighter(highlightFormatter, new QueryScorer(query))
        fullHighlighter = new Highlighter(highlightFormatter, new QueryScorer(query))
        fullHighlighter.setTextFragmenter(new NullFragmenter())
    }
}

class DocRef {
    int docId
    SearchState searchState
    public DocRef (ss, int did) { docId=did; searchState = ss; }
    def index () { searchState.source }
    def path () { index().pathsByDocId[docId] }
    def type () { index().typesByDocId[docId] }
    def sourceFile () { new File(index().sourceDir, path()) }
    def fileName () { new File(path()).getName() }
    def directory () { new File(path()).getParent() }
    def hitExcerpt () {
        File sourceFile = sourceFile()
        TokenStream tokenStream = index().analyzer.tokenStream("contents", sourceFile.newReader())
        // Get 3 best fragments and seperate with a "..."
        return searchState.excerptHighlighter.getBestFragments(tokenStream, sourceFile.text, 3, "...").replaceAll(/\n(\s*\n+)+/, "\n")
    }

    def highlightedContents () {
        File sourceFile = sourceFile()
        TokenStream tokenStream = index().analyzer.tokenStream("contents", sourceFile.newReader())
        // Highlight entire text
        return searchState.fullHighlighter.getBestFragments(tokenStream, sourceFile.text, 1, "...")
    }
}

class CollectorRelay extends HitCollector {
    def closure;
    public void collect(int doc, float score) { closure(doc) }
}

class Node {
    public List _children
    int _count = -1
    public String _name
    public def _doc

    def isLeaf () { _children == null }
    def nonLeafChildren () { return _children?.findAll { !it.isLeaf() } }
    def eachNode (closure) { closure(this); _children?.each { it.eachNode(closure) } }
    def eachAtDepth (int level, closure) { if (level == 0) closure(this); else _children?.each {it.eachAtDepth(level-1, closure) }}

    def leafCount () {
        if (_count == -1)  _count = isLeaf() ? 1 : (_children ?_children.inject (0) { c, i -> c + i.leafCount() } : 0)
        return _count
    }

    def add (doc, pathArray, idx) {
        def name = pathArray[idx]
        def child = _children?.find { it._name == name }
        if (!child) {
            if (!_children) _children = []
            child = new Node(_name:name)
            _children.add(child)
        }

        if (idx == pathArray.length - 1) {
            child._doc = doc
        } else {
            child.add(doc, pathArray, idx+1)
        }
    }

    def collapse () {
        if (_children) {
            _children.each { it.collapse() }
            if (_children.size() == 1 && !_children[0].isLeaf()) {
                def child = _children[0]
                _name += "/" + child._name
                _children = child._children
            }
        }
    }
}
</groovy>
