<style>
.tableRowL1, .tableRowL1 td
{
    background-color: #DDDDDD;
    color:#333366;
    font:bold 11px/15px Verdana, Arial, Helvetica, sans-serif;
}
.tableRowL2, .tableRowL2 td
{
    background-color: #EEEEEE;
    color:#333366;
    font:bold 11px/15px Verdana, Arial, Helvetica, sans-serif;
}
.tableRowL3
{
    background-color: #FFFFFF;
}
.tdClass
{
    border-top: 1px solid #666699;
    font-size:9pt;
    font-weight:plain;
}

.noRowLines td.tableBody {
    border-top:none;
}
</style>

<a:SetValue layoutChangeLatch="$true"/> <!-- this is evil, but it is to simulate Sourcing's current bad behavior -->

<t:DataTable list="$rootList" displayGroup="$displayGroup" children="$displayGroup.currentItem.children" hasChildren="$hasChildren"
        enableScrolling="$true" showOptionsMenu="$true" title="Bid Data!" multiSelect="$showSelection"
        pivotLayout="$layout.c" columnFields="$layout.c" rowFields="$layout.r" columnAttributes="$layout.a"
        overrideAttribute="$overrideColumnName" filteredColumnAttributes="$filteredAttributeColumns"
        forceColumnUpdate="$layoutChangeLatch"
        rowClass="$rowClass" detailRowClass="" showRowAttributes="$true"
        tableConfig="$layout.userConfig">
<!--- shouldCollapseColumnLevel="$collapseSingleColumnLevel" -->
    
    <a:Content name="optionsMenu">
        <t:OptionsMenuButton showConfigureLayout="$false"/>\
    </a:Content>

    <t:HeadingArea>
        <div style="float:left">
            File: <w:PopupControl list="$files" item="$iter" selection="$file" action="$updateFile">$iter.name</w:PopupControl>
        </div>
        <div style="float:left; padding-left:5px">
            Layout: <w:PopupControl list="$layouts" item="$iter" selection="$layout" action="$optionsChanged">$iter.name</w:PopupControl>
        </div>
        <div style="float:left">
            <w:TextButton action="$showFilterPanel">Filter</w:TextButton>
        </div>
        <div style="float:right;padding-right:4px">
            <a:Label><a:Checkbox value="$filteringColumns" action="$optionsChanged"/> Col Filter</a:Label>
        </div>
        <div style="float:right;padding-right:4px">
            <a:Label><a:Checkbox value="$showSelection" action="$optionsChanged"/> Selection</a:Label>
        </div>
    </t:HeadingArea>

    <t:Column key="Item" pivotMoveType="None" minWidthPx="300">
        <w:OutlineControl>\
            <span style="color:000000">$displayGroup.currentItem.Item</span>
            $displayGroup.currentItem.ItemDesc\
        </w:OutlineControl>\
    </t:Column>

    <t:Column key="Description" wantsSpan="$true" uniquingKeyPath="Item" isBlank="$!displayGroup.currentItem.Description"
               renderValueInLabelColumn="$true" style="font-style:italic"/>

    <t:Column key="Price" isBlank="$!isItem" align="right">
        <a:TextField value="$displayGroup.currentItem.Price" formatter="$formatters.money" size="11" style="text-align:right"/>
    </t:Column>
    <t:Column key="Quantity" formatter="$formatters.integer" align="right" isBlank="$!isItem" initiallyVisible="$false"/>
    <t:Column key="ExtendedPrice" label="Extended Price" formatter="$formatters.money" align="right"  isBlank="$!isItem"/>
    <t:Column key="Savings" label="Savings" formatter="$formatters.money" align="right"  isBlank="$!isItem"/>

    <!--- Spanning Description and variable detail attributes for Attachments and Requirements -->

    <t:DynamicDetailAttributes key="Requirements" label="Requirements" list="$requirements" item="$curRequirement"
                                renderingColumnKey="RequirementRenderer" uniquingKeyPath="Region"/>
    <t:Column key="RequirementRenderer" wantsSpan="$true" uniquingKeyPath="Region" isOptional="$false" initiallyVisible="$false">\
        $curRequirement\
    </t:Column>

    <t:DynamicDetailAttributes key="BuyerAttachments" label="Buyer Attachments" list="$buyerAttachments" item="$curAttachment"
                                renderingColumnKey="BuyerAttachmentRenderer" renderValueInLabelColumn="$true"/>
    <t:Column key="BuyerAttachmentRenderer" wantsSpan="$true" uniquingKeyPath="Item" isOptional="$false" initiallyVisible="$false" valign="top">\
        $currentAttachmentDescription <nobr><a:Image filename="$currentAttachmentIcon"/> <a>$currentAttachmentFilename</a></nobr>\
    </t:Column>
    <t:DynamicDetailAttributes key="Attachments" label="Supplier Attachments" list="$attachments" item="$curAttachment"
                                renderingColumnKey="AttachmentRenderer" uniquingKeyPath="Supplier"/>
    <t:Column key="AttachmentRenderer" wantsSpan="$true" uniquingKeyPath="Supplier" isOptional="$false" initiallyVisible="$false">\
        $currentAttachmentDescription <nobr><a:Image filename="$currentAttachmentIcon" style="margin:3px 0px -5px 0px"/> <a>$currentAttachmentFilename</a></nobr>\
    </t:Column>


    <t:Column key="Supplier" sortOrdering="$supplierSortOrdering" isBlank='$!displayGroup.currentItem.Supplier'/>

    <t:Column key="Answer" wantsSpan="$true" isOptional="$false" initiallyVisible="$false"/>
    <t:Column key="Extra" isOptional="$false" initiallyVisible="$false"/>

</t:DataTable>

<groovy>
package ariba.ui.demoshell;
import ariba.ui.aribaweb.core.*;
import ariba.ui.widgets.*;
import ariba.ui.table.*;
import ariba.ui.outline.*;
import ariba.util.core.*;

class Component extends AWXHTMLComponent {
    def displayGroup, layoutChangeLatch, iter;
    def showSelection = false, filteringColumns = false;
    def files=[
        [
          name:"OutlineData-RFP.csv",
          layouts:[
            [name:"By Supplier (P)", c:["Supplier"], r:["Item"], a:["Price"]]
          ]
        ]
    ];
    def file = files[0];
    def layouts () { return file.layouts; }
    def layout=layouts()[0];

    def rootList, fullList;
    void init () {
        updateFile();
    }

    def updateFile () {
        // read CSV and then convert to nested tree by interpreting Level field
        fullList = AWTCSVDataSource.dataSourceForPath(file.name, this).fetchObjects();
        rootList = AWTCSVDataSource.computeOutlineList (fullList, "children", "Level");
        layout=layouts()[0];
        optionsChanged();
        return null;
    }

    def showFilterPanel () {
        def panel = pageWithName("FilterPanel.htm");
        panel.init(fullList, ["Supplier", "Region", "Year"], { fullList = it;
            rootList = AWTCSVDataSource.computeOutlineList (fullList, "children", "Level");
            return pageComponent();
        });
        panel.setClientPanel(true);
        return panel;
    }

    def hasChildren () {
        def children = displayGroup.currentItem().children;
        return children != null && children.size() != 0;
    }

    def overrideColumnName () {
        def item = displayGroup.currentItem();
        return item.Type == "Question" || item.Type == "Section" ?  "Answer" : null;
    }

    def isQuestion () { return displayGroup.currentItem().Type == "Question" }
    def isItem () { return displayGroup.currentItem().Type == "Item" }

    def optionsChanged () {
        layoutChangeLatch = true;
        return null;
    }

    def rowClass () {
        def type = displayGroup.currentItem().Type;
        return (type == "Section") ?  "tableRowL1" : "tableRowL2";
    }

    def CompetitionAttributes = ["Price", "ExtendedPrice"];
    def filteredAttributeColumns () {
        // if we're filtering column attrs (to show only CompetitionAttributes
        // And we're on a column that we should filter (any but for Supplier Best, in this case)..
        if (filteringColumns && displayGroup.currentItem().Supplier != "Best") {
            return AWTDataTable.currentInstance(this).pivotState().columnAttributes().findAll {
                CompetitionAttributes.contains(it.keyPathString())
            }
        }
        // null means use the default set
        return null;
    }

    /* Requirements and Attachments.  These multivalued attributes are encoded semi-colon delimited in the column */
    def requirements () {
        def str = displayGroup.currentItem().Requirements;
        return (!str || str=="") ? null : str.tokenize(";");
    }
    def curRequirement;

    def attachments () {
        def str = displayGroup.currentItem().Attachments;
        return (!str || str=="") ? null : str.tokenize(";");
    }
    def buyerAttachments () {
        def str = displayGroup.currentItem().BuyerAttachments;
        return (!str || str=="") ? null : str.tokenize(";");
    }
    def curAttachment;

    def currentAttachmentDescription ()
    {
        def matcher = curAttachment =~ /(.*)\[(.*)\]\s*/
        return matcher.matches() ? matcher[0][1] : curAttachment;
    }

    def currentAttachmentFilename ()
    {
        def matcher = curAttachment =~ /(.*)\[(.*)\]\s*/
        return matcher.matches() ? matcher[0][2] : curAttachment;
    }

    def _IconsByExtension = [ ppt:"icn_ppt_nb.gif", xls:"icn_xls_nb.gif", doc:"icn_word_nb.gif", pdf:"icn_pdf_nb.gif", zip:"icn_document.gif" ];
    def currentAttachmentIcon ()
    {
        def matcher = curAttachment =~ /(.*)\[(.*\.(.+))\]\s*/
        return matcher.matches() ? _IconsByExtension[matcher[0][3]] : null;
    }

    def collapseSingleColumnLevel () {
        // Don't collapse ColumnAttributes (e.g. "Price").
        // Do collapse Null fields, or singleton "Supplier" field
        def ps = AWTDataTable.currentInstance(this).pivotState();
        // logger().debug("collapseSingleColumnLevel(${ps.collapseCheckColumnKey()}, ${ps.collapseCheckMemberCount()}");
        return ps.collapseCheckColumnKey() != null && (ps.collapseCheckMemberCount() == 0 || ps.collapseCheckColumnKey() == "Supplier");
    }

    // Supplier sort ordering
    def supplierSortOrdering = new SupplierSorter();
}

/*
   Custom SortOrdering for Supplier which always puts Best, Initial, Historical
   before the "real" suppliers.  Also shows that we can override actual field/value
   used for sorting / grouping to be different than the AWTColumn "key" or the property
   displayed -- we use whatever is in getSortValue()
 */
class SupplierSorter extends AWTSortOrdering
{
    def RankBySupplier = ["Best" : 1, "Initial":2, "Historical":3];
    public SupplierSorter () { super(AWTSortOrdering.CompareAscending); }

    int rank (val) {
        if (!val) return 0;
        def rank = RankBySupplier[val];
        return (!rank) ? 10 : rank;
    }

    protected Object getSortValue(Object o) { return o.Supplier; }

    public int compareValues(Object v1, Object v2)
    {
        int res = rank(v1) - rank(v2);
        return handleOrdering((res != 0) ? res : super.compareValues(v1, v2));
    }
}
</groovy>
