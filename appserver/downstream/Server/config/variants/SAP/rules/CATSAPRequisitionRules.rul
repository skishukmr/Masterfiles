/*
    Copyright (c) 1996-2013 Ariba, Inc.
    All rights reserved. Patents pending.

    Rules file.

    Generated on Thu Sep 26 15:19:11 CDT 2013

    Do not edit this file!
*/
{
    Chains = (
        {
            Classname = "ariba.approvable.rules.JavaScriptChainRule";
            Condition = "function supervisorChain_condition (r, ar)\r\n{\r\n\tvar result = false;\r\n\tvar type = ar.getType();\r\n\tvar approver = ar.getApprover();\r\n\tvar puser = null;\r\n\tLog.javascript.debug(\"SUPER_CHAIN **** type: \" + type);\r\n\tif (isType(type,\"Supervisor\") && (approver instanceof User)) {\r\n\t\tvar required = true;\r\n//ar.getReasonKey().indexOf(\"Watcher\")==-1;\r\n\t\tLog.javascript.debug(\"SUPER_CHAIN **** required: \" + required);\r\n\t\tif (required) { // only continue if Supervisor approver was not watcher (i.e., under Super's threshold)\r\n\t\t\tpuser = CommonUser.getPartitionedUser(approver, r.getPartition());\r\n\t\t\tLog.javascript.debug(\"SUPER_CHAIN **** part user||approver: \" + puser);\r\n\t\t\tif (puser == null) {\r\n\t\t\t\tLog.javascript.debug(\"SUPER_CHAIN **** PUSER is NULL, return TRUE\");\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tvar code = puser.getFieldValue(\"SAPExpenseApprovalCode\");\r\n\t\t\tLog.javascript.debug(\"SUPER_CHAIN **** approval code: \" + code);\r\n\t\t\tif (code != null) {\r\n\t\t\t\tvar limit = code.getDottedFieldValue(\"Amount\");\r\n\t\t\t\tif (limit != null) {\r\n\t\t\t\t\tvar total = r.getTotalCost();\r\n\t\t\t\t\tLog.javascript.debug(\"SUPER_CHAIN *** limit/total: \" + limit + \" / \" + total);\t\t\r\n\t\t\t// must add total of any Not-to-Exceed line items\r\n\t\t\t\t\ttotal = ariba.basic.core.Money.add(total, config.java.common.CatCommonUtil.getNotToExceedTotal(r.getLineItems()));\r\n\t\t\t\t\tLog.javascript.debug(\"SUPER_CHAIN *** NEW total (w/NTE Prices): \" + total);\t\r\n\t\t\t\t\tif (limit.compareTo(total) < 0) {\r\n\t\t\t\t\t\tvar supervisor = User2Supervisor(ar.getApprover());\r\n\t\t\t\t\t\tLog.javascript.debug(\"SUPER_CHAIN *** supervisor: \" + supervisor);\r\n\t\t\t\t\t\tvar psupervisor = CommonUser.getPartitionedUser(supervisor, r.getPartition());\r\n\t\t\t\t\t\tvar supcode = psupervisor.getFieldValue(\"SAPExpenseApprovalCode\");\r\n\t\t\t\t\t\tLog.javascript.debug(\"SUPER_CHAIN *** Supervisor Exp Code: \" + supcode);\t\r\n\t\t\t\t\t\tvar icode = supcode.getUniqueName().substring(1);\r\n\t\t\t\t\t\tif (java.lang.Integer.parseInt(icode) < 12) \r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar cupid = supervisor.getFieldValue(\"UniqueName\");\r\n\t\t\t\t\t\t\tLog.javascript.debug(\"SUPER_CHAIN *** Supervisor's CUPID: \" + cupid);\r\n\t\t\t\t\t\t\tif (getExcludeApprover(cupid) == true)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tresult = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tresult = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn isCompanyApprovalRule(r, \"SupervisorChain\") && result;\r\n}\t\t\t\t\r\nsupervisorChain_condition;\r\n\r\nvar Rules_SAPExcludeApproverTable = MakeCSVTable(\"data/CATExcludeApprovers.csv\", ListUtil.list(\" \"));\r\n\r\nfunction getExcludeApprover (cupid)\r\n{\r\n                var value  = false;\r\n                Log.javascript.debug(\"getExcludeApprover **** Entered: \" + cupid);\r\n        var row = Rules_SAPExcludeApproverTable(cupid);\r\n        Log.javascript.debug(\"ExcludeApprover **** row: \" + row);\r\n        if (!StringUtil.nullOrEmptyOrBlankString(row.get(0))) {\r\n                value = true;\r\n        }\r\n        Log.javascript.debug(\"ExcludeApprover **** return Value? \" + value);\r\n        return value;\r\n}";
            Enabled = true;
            Name = "SupervisorChain (CAT)";
            Permission = RuleEditor;
            Result = "function supervisorChain_action (r, ar)\r\n{\r\n\tvar approver = Role_DataMaintainer;\r\n\tvar reason = \"DataMaintainer_Supervisor\";\r\n\tvar required = true;\r\n\tvar partuser = CommonUser.getPartitionedUser(ar.getApprover(), r.getPartition());\r\n\tLog.javascript.debug(\"SUPER_CHAIN **** partuser = null? \" + (partuser == null));\r\n\tif (partuser != null) {\r\n\t\tvar supervisor = User2Supervisor(ar.getApprover());\r\n\t\tif (supervisor instanceof User) {\r\n\t\t\tLog.javascript.debug(\"SUPER_CHAIN ***** supervisor: \" + supervisor);\r\n\t\t\tapprover = supervisor;\r\n\t\t\treason = \"Chain_Supervisor\";\r\n\t\t}\r\n\t}\r\n\tvar sapsource = r.getDottedFieldValue(\"CompanyCode.SAPSource\");\r\n\t\tLog.javascript.debug(\"capital condition : CompanyCode : \"+ sapsource );\r\n\t\tvar acccat = r.getDottedFieldValue(\"CompanyCode.CAPAccCatgry\");\r\n\t\tLog.javascript.debug(\"capital condition : acccat : \"+ acccat );\r\n\t\tvar flag = false;\r\n\t\tvar lic = r.getLineItems();\r\n\t\tLog.javascript.debug(\"getAggrigatedCategoryAmt : lic :\" + lic);\r\n\t\tvar noOfLineItems = lic.size();\r\n\t\tfor(var i=0;i<noOfLineItems;i++)\r\n\t\t{\r\n\t\tvar line = lic.get(i);\r\n\t\tvar accCat = line .getDottedFieldValue(\"AccountCategory.UniqueName\");\r\n\t\tLog.javascript.debug(\"capital condition : accCat : \" + accCat);\r\n\t\r\n\t\tif (accCat != null && accCat.equalsIgnoreCase(acccat))\r\n\t\t{\r\n\t\r\n\t\t\trequired = false;\r\n\t\t\tLog.javascript.debug(\"SUPERVISOR **** required : \" + required);\r\n\t\t\treason = \"Supervisor_Watcher\";\r\n\t\t\tLog.javascript.debug(\"SUPERVISOR **** reason : \" + reason);\r\n\t\t}\r\n\t}\r\n\treturn ApprovalRequest.create(r, approver, required, \"cat.rulereasons\", reason);\r\n}\r\nsupervisorChain_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptChainRule";
            Condition = "function supervisorChain_condition (r, ar)\r\n{\r\n\tvar result = false;\r\n\tvar type = ar.getType();\r\n\tvar approver = ar.getApprover();\r\n\tvar puser = null;\r\n\tLog.javascript.debug(\"SUPER_CHAIN **** type: \" + type);\r\n\tif (isType(type,\"Supervisor\") && (approver instanceof User)) {\r\n\t\tvar required = true;\r\n//ar.getReasonKey().indexOf(\"Watcher\")==-1;\r\n\t\tLog.javascript.debug(\"SUPER_CHAIN **** required: \" + required);\r\n\t\tif (required) { // only continue if Supervisor approver was not watcher (i.e., under Super's threshold)\r\n\t\t\tpuser = CommonUser.getPartitionedUser(approver, r.getPartition());\r\n\t\t\tLog.javascript.debug(\"SUPER_CHAIN **** part user||approver: \" + puser);\r\n\t\t\tif (puser == null) {\r\n\t\t\t\tLog.javascript.debug(\"SUPER_CHAIN **** PUSER is NULL, return TRUE\");\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tvar code = puser.getFieldValue(\"SAPExpenseApprovalCode\");\r\n\t\t\tLog.javascript.debug(\"SUPER_CHAIN **** approval code: \" + code);\r\n\t\t\tif (code != null) {\r\n\t\t\t\tvar limit = code.getDottedFieldValue(\"Amount\");\r\n\t\t\t\tif (limit != null) {\r\n\t\t\t\t\tvar total = r.getTotalCost();\r\n\t\t\t\t\tLog.javascript.debug(\"SUPER_CHAIN *** limit/total: \" + limit + \" / \" + total);\t\t\r\n\t\t\t// must add total of any Not-to-Exceed line items\r\n\t\t\t\t\ttotal = ariba.basic.core.Money.add(total, config.java.common.CatCommonUtil.getNotToExceedTotal(r.getLineItems()));\r\n\t\t\t\t\tLog.javascript.debug(\"SUPER_CHAIN *** NEW total (w/NTE Prices): \" + total);\t\r\n\t\t\t\t\tif (limit.compareTo(total) < 0) {\r\n\t\t\t\t\t\tvar supervisor = User2Supervisor(ar.getApprover());\r\n\t\t\t\t\t\tvar psupervisor = CommonUser.getPartitionedUser(supervisor, r.getPartition());\r\n\t\t\t\t\t\tvar supcode = psupervisor.getFieldValue(\"SAPExpenseApprovalCode\");\r\n\t\t\t\t\t\tLog.javascript.debug(\"SUPER_CHAIN *** Supervisor Exp Code: \" + supcode);\t\r\n\t\t\t\t\t\t//var icode = supcode.getUniqueName().substring(1);\r\n\t\t\t\t\t\t//if (java.lang.Integer.parseInt(icode) < 12) \r\n\t\t\t\t\t\t//{\r\n\t\t\t\t\t\t\t//var cupid = supervisor.getFieldValue(\"UniqueName\");\r\n\t\t\t\t\t\t\t//Log.javascript.debug(\"SUPER_CHAIN *** Supervisor's CUPID: \" + cupid);\r\n\t\t\t\t\t\t\t//if (getExcludeApprover(cupid) == true)\r\n\t\t\t\t\t\t\t//{\r\n\t\t\t\t\t\t\t//\tresult = false;\r\n\t\t\t\t\t\t\t//}\r\n\t\t\t\t\t\t\t//else\r\n\t\t\t\t\t\t\t//{\r\n\t\t\t\t\t\t\t\tresult = true;\r\n\t\t\t\t\t\t\t//}\r\n\t\t\t\t\t\t//}\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn result;\r\n}\t\t\t\t\r\nsupervisorChain_condition;\r\n";
            Enabled = false;
            Name = "Copy of SupervisorChain (CAT)";
            Permission = RuleEditor;
            Result = "function supervisorChain_action (r, ar)\r\n{\r\n\tvar approver = Role_DataMaintainer;\r\n\tvar reason = \"DataMaintainer_Supervisor\";\r\n\tvar required = true;\r\n\tvar partuser = CommonUser.getPartitionedUser(ar.getApprover(), r.getPartition());\r\n\tLog.javascript.debug(\"SUPER_CHAIN **** partuser = null? \" + (partuser == null));\r\n\tif (partuser != null) {\r\n\t\tvar supervisor = User2Supervisor(ar.getApprover());\r\n\t\tif (supervisor instanceof User) {\r\n\t\t\tLog.javascript.debug(\"SUPER_CHAIN ***** supervisor: \" + supervisor);\r\n\t\t\tapprover = supervisor;\r\n\t\t\treason = \"Chain_Supervisor\";\r\n\t\t}\r\n\t}\r\n\treturn ApprovalRequest.create(r, approver, required, \"cat.rulereasons\", reason);\r\n}\r\nsupervisorChain_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptChainRule";
            Condition = "function CommApproverChain_condition (r, ar)\r\n{\r\n\t\r\n\tLog.javascript.debug(\"CommApproverChain_condition **** START*** \");\t\r\n\r\n\tvar type = ar.getType();\r\n\tvar puser = null;\r\n\tLog.javascript.debug(\"CommApproverChain_condition **** type: \" + type);\r\n\t\r\n\tif (isType(type,\"CommodityApprover\")) {\r\n\t\r\n\t\tvar required = true;\r\n\t\tLog.javascript.debug(\"SUPER_CHAIN **** required: \" + required);\r\n\r\n\t        // See how this can be parameterised\r\n\t        var IT_PARENT_COMM_CODE = \"43\"; // Computer Equipment , Accessories and Software\r\n\t        \r\n\t\tvar FirstLevelApp = \"sskoo\";\r\n\t\tvar SecondLevelApp = \"1951569507\";\r\n\t\tvar ThirdLevelApp = \"1131052945\";\t\r\n\t\r\n\t\tvar FirstLevelLimit = 2500;\r\n\t\tvar SecondLevelLimit = 15000;\t\r\n\t        \r\n\t\tvar totAmount = getAggrAmtByCommCode(r,IT_PARENT_COMM_CODE);\r\n\t\t\r\n\t\tLog.javascript.debug(\"CommApproverChain_condition : totAmount \" + totAmount);\t\r\n\t\t\r\n\t\tvar approver = ar.getApprover();\r\n\t\r\n\t\tLog.javascript.debug(\"CommApproverChain_action : approver \" + approver);\t\r\n\t\t\r\n\t\tif ((totAmount > FirstLevelLimit) && (FirstLevelApp.equals(approver.getUniqueName()))) \r\n\t\t{\r\n\t\t\tLog.javascript.debug(\"CommApproverChain_condition Greater than 2500 \");\t\t\t\t\t\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\tif ((totAmount > SecondLevelLimit) && (SecondLevelApp.equals(approver.getUniqueName()))) \r\n\t\t{\r\n\t\t\tLog.javascript.debug(\"CommApproverChain_condition Greater than 15000 \");\t\t\t\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\t\t\r\n\t\t\r\n\tLog.javascript.debug(\"CommApproverChain_condition **** END*** \");\t\r\n\t\r\n\treturn false;\r\n}\t\t\t\t\r\nCommApproverChain_condition;\r\n\r\n";
            Enabled = false;
            Name = "CommodityApproverChain (CAT)";
            Permission = RuleEditor;
            Result = "function CommApproverChain_action (r, ar)\r\n{\r\n\r\n\tLog.javascript.debug(\"CommApproverChain_action **** START*** \");\t\r\n\t\r\n\t// See how this can be parameterised\r\n\t// Computer Equipment , Accessories and Software\t\r\n\tvar IT_PARENT_COMM_CODE = \"43\"; \r\n\tvar FirstLevelApp = \"sskoo\";\r\n\tvar SecondLevelApp = \"1951569507\";\r\n\t\r\n\tvar ThirdLevelApp = \"1131052945\";\t\r\n\t\r\n\tvar FirstLevelLimit = 2500;\r\n\t\r\n\tvar SecondLevelLimit = 15000;\t\r\n\t\r\n\tvar totAmount = getAggrAmtByCommCode(r,IT_PARENT_COMM_CODE);\r\n\r\n\tLog.javascript.debug(\"CommApproverChain_action : totAmount \" + totAmount);\t\t\t\t\t\t\t\r\n\t\r\n\tvar reason = \"ITApprover\";\t\r\n\t\r\n\tvar approver = ar.getApprover();\r\n\t\r\n\tLog.javascript.debug(\"CommApproverChain_action : approver \" + approver);\t\r\n\t\r\n\tvar required = true;\r\n\tvar isCriticalAssetDown = r.getFieldValue(\"CriticalAssetDown\");\r\n\tLog.javascript.debug(\"SUPER_CHAIN **** isCriticalAssetDown : \" + isCriticalAssetDown);\r\n\tif(isCriticalAssetDown!=null && isCriticalAssetDown.booleanValue())\r\n\t{\r\n\t  required = false;\r\n\t  Log.javascript.debug(\"SUPER_CHAIN **** required : \" + required);\t\r\n\t}\r\n\t\r\n\tif ((totAmount > FirstLevelLimit) && (FirstLevelApp.equals(approver.getUniqueName()))) \r\n\t{\r\n\t\r\n\t\tLog.javascript.debug(\"CommApproverChain_action Greater than 2500 \");\t\t\t\t\t\r\n\t\t\r\n\t\tapprover = Base.getSession().objectFromName(SecondLevelApp,\"ariba.user.core.User\",Base.getService().getPartition(\"None\"));\r\n\t\r\n\t\tLog.javascript.debug(\"CommodityApprover_action : second level approver :\" + approver);\t\r\n\t\t\r\n\t\treason = \"ITApprover2nd\";\t\r\n\t\t\r\n\t\treturn ApprovalRequest.create(r, approver, required, \"cat.rulereasons\", reason);\t\t\r\n\t\t\r\n\t}\r\n\r\n\tif ((totAmount > SecondLevelLimit) && (SecondLevelApp.equals(approver.getUniqueName()))) \r\n\t{\r\n\t\r\n\t\tLog.javascript.debug(\"CommApproverChain_action Greater than 15000 \");\t\t\t\t\t\r\n\t\t\r\n\t\tapprover = Base.getSession().objectFromName(ThirdLevelApp,\"ariba.user.core.User\",Base.getService().getPartition(\"None\"));\r\n\t\r\n\t\tLog.javascript.debug(\"CommodityApprover_action : third level approver :\" + approver);\t\r\n\t\t\r\n\t\treason = \"ITApprover3rd\";\r\n\t\t\r\n\t\treturn ApprovalRequest.create(r, approver, required, \"cat.rulereasons\", reason);\t\t\r\n\t}\r\n\r\n\r\n\t//return null;\r\n}\r\nCommApproverChain_action;\r\n";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptChainRule";
            Condition = "function CommApproverChain_condition (r, ar)\r\n{\r\n\t\r\n\tLog.javascript.debug(\"CommApproverChain_condition **** START*** \");\t\r\n\r\n\tvar type = ar.getType();\r\n\tvar puser = null;\r\n\tLog.javascript.debug(\"CommApproverChain_condition **** type: \" + type);\r\n\t\r\n\tif (isType(type,\"CommodityApprover\")) {\r\n\t\r\n\t\tvar required = true;\r\n\t\tLog.javascript.debug(\"SUPER_CHAIN **** required: \" + required);\r\n\r\n\t        // See how this can be parameterised\r\n\t        var IT_PARENT_COMM_CODE = \"43\"; // Computer Equipment , Accessories and Software\r\n\t        \r\n\t\tvar FirstLevelApp = \"sskoo\";\r\n\t\tvar SecondLevelApp = \"1951569507\";\r\n\t\tvar ThirdLevelApp = \"1131052945\";\t\r\n\t\r\n\t\tvar FirstLevelLimit = 2500;\r\n\t\tvar SecondLevelLimit = 15000;\t\r\n\t        \r\n\t\tvar totAmount = getAggrAmtByCommCode(r,IT_PARENT_COMM_CODE);\r\n\t\t\r\n\t\tLog.javascript.debug(\"CommApproverChain_condition : totAmount \" + totAmount);\t\r\n\t\t\r\n\t\tvar approver = ar.getApprover();\r\n\t\r\n\t\tLog.javascript.debug(\"CommApproverChain_action : approver \" + approver);\t\r\n\t\t\r\n\t\tif ((totAmount > FirstLevelLimit) && (FirstLevelApp.equals(approver.getUniqueName()))) \r\n\t\t{\r\n\t\t\tLog.javascript.debug(\"CommApproverChain_condition Greater than 2500 \");\t\t\t\t\t\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\tif ((totAmount > SecondLevelLimit) && (SecondLevelApp.equals(approver.getUniqueName()))) \r\n\t\t{\r\n\t\t\tLog.javascript.debug(\"CommApproverChain_condition Greater than 15000 \");\t\t\t\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\t\t\r\n\t\t\r\n\tLog.javascript.debug(\"CommApproverChain_condition **** END*** \");\t\r\n\t\r\n\treturn false;\r\n}\t\t\t\t\r\nCommApproverChain_condition;\r\n\r\n";
            Enabled = false;
            Name = "Copy of CommodityApproverChain (CAT)";
            Permission = RuleEditor;
            Result = "function CommApproverChain_action (r, ar)\r\n{\r\n\r\n\tLog.javascript.debug(\"CommApproverChain_action **** START*** \");\t\r\n\t\r\n\t// See how this can be parameterised\r\n\t// Computer Equipment , Accessories and Software\t\r\n\tvar IT_PARENT_COMM_CODE = \"43\"; \r\n\tvar FirstLevelApp = \"sskoo\";\r\n\tvar SecondLevelApp = \"1951569507\";\r\n\t\r\n\tvar ThirdLevelApp = \"1131052945\";\t\r\n\t\r\n\tvar FirstLevelLimit = 2500;\r\n\t\r\n\tvar SecondLevelLimit = 15000;\t\r\n\t\r\n\tvar totAmount = getAggrAmtByCommCode(r,IT_PARENT_COMM_CODE);\r\n\r\n\tLog.javascript.debug(\"CommApproverChain_action : totAmount \" + totAmount);\t\t\t\t\t\t\t\r\n\t\r\n\tvar reason = \"ITApprover\";\t\r\n\t\r\n\tvar approver = ar.getApprover();\r\n\t\r\n\tLog.javascript.debug(\"CommApproverChain_action : approver \" + approver);\t\r\n\t\r\n\tvar required = true;\r\n\tvar isCriticalAssetDown = r.getFieldValue(\"CriticalAssetDown\");\r\n\tLog.javascript.debug(\"SUPER_CHAIN **** isCriticalAssetDown : \" + isCriticalAssetDown);\r\n\tif(isCriticalAssetDown!=null && isCriticalAssetDown.booleanValue())\r\n\t{\r\n\t  required = false;\r\n\t  Log.javascript.debug(\"SUPER_CHAIN **** required : \" + required);\t\r\n\t}\r\n\t\r\n\tif ((totAmount > FirstLevelLimit) && (FirstLevelApp.equals(approver.getUniqueName()))) \r\n\t{\r\n\t\r\n\t\tLog.javascript.debug(\"CommApproverChain_action Greater than 2500 \");\t\t\t\t\t\r\n\t\t\r\n\t\tapprover = Base.getSession().objectFromName(SecondLevelApp,\"ariba.user.core.User\",Base.getService().getPartition(\"None\"));\r\n\t\r\n\t\tLog.javascript.debug(\"CommodityApprover_action : second level approver :\" + approver);\t\r\n\t\t\r\n\t\treason = \"ITApprover2nd\";\t\r\n\t\t\r\n\t\treturn ApprovalRequest.create(r, approver, required, \"cat.rulereasons\", reason);\t\t\r\n\t\t\r\n\t}\r\n\r\n\tif ((totAmount > SecondLevelLimit) && (SecondLevelApp.equals(approver.getUniqueName()))) \r\n\t{\r\n\t\r\n\t\tLog.javascript.debug(\"CommApproverChain_action Greater than 15000 \");\t\t\t\t\t\r\n\t\t\r\n\t\tapprover = Base.getSession().objectFromName(ThirdLevelApp,\"ariba.user.core.User\",Base.getService().getPartition(\"None\"));\r\n\t\r\n\t\tLog.javascript.debug(\"CommodityApprover_action : third level approver :\" + approver);\t\r\n\t\t\r\n\t\treason = \"ITApprover3rd\";\r\n\t\t\r\n\t\treturn ApprovalRequest.create(r, approver, required, \"cat.rulereasons\", reason);\t\t\r\n\t}\r\n\r\n\r\n\t//return null;\r\n}\r\nCommApproverChain_action;\r\n";
        }
    );
    Classname = ariba.approvable.rules.RuleSet;
    Constraints = (
        {
            Classname = "ariba.approvable.rules.JavaScriptConstraint";
            Condition = "function taxcustomapprover_constraint (left, right)\r\n{\r\n\treturn isType(right.getType(), \"TaxCustomApprover\"); \r\n}\r\ntaxcustomapprover_constraint;";
            Enabled = true;
            Name = "TaxCustomApproverLast (CAT)";
            Permission = RuleEditor;
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptConstraint";
            Condition = "function oioagreement_constraint (left, right)\r\n{\r\nreturn isType(right.getType(), \"OIOAgreement\"); \r\n}\r\noioagreement_constraint;";
            Enabled = true;
            Name = "OIOAgreementBeforeTax (CAT)";
            Permission = RuleEditor;
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptConstraint";
            Condition = "function master_constraint (left, right)\r\n{\r\n\tvar lt = left.getType();\r\n\tvar rt = right.getType();\r\n\t\r\n\tLog.javascript.debug(\"Vij first check is lt=  \"+lt);\r\n\tLog.javascript.debug(\"Vij first check is rt=  \"+rt);\r\n\t\r\n\tif (isType(lt, \"OnBehalfOf\")) {\r\n\t\treturn true;\r\n\t}\t\r\n\tif (isType(rt, \"Hazmat\") && !isType(lt,\"Hazmat\")) {\r\n\t\tLog.javascript.debug(\"Vij Hazmat is rt and lt \"+rt  +lt);\r\n\t\treturn true;\r\n\t}\r\n\tif (isType(rt, \"PavingTransactionTeam(CAT)\") && !isType(lt,\"PavingTransactionTeam(CAT)\")) {\r\n\t\tLog.javascript.debug(\"Vij Paving_Transaction rt and lt\" +rt  +lt);\r\n\t\treturn true;\r\n\t}\r\n\tif (isType(lt, \"CustomShipTo\") && !isType(rt, \"OnBehalfOf\")) {\t\r\n\t\treturn true;\r\n\t}\t\t\r\n\t\r\n\tif (isType(lt, \"BusinessResourceApprover\") && !isType(rt, \"OnBehalfOf\") && !isType(rt, \"NonCatalog\")) {\t\r\n\t\tLog.javascript.debug(\"IT Left of Others\");\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tif (isType(lt, \"NonCatalog\") && isType(rt, \"BusinessResourceApprover\")) {\t\r\n\t\tLog.javascript.debug(\"IT Right of IP\");\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tif (isType(lt, \"NonCatalog\") && isType(rt, \"OtherDepartment\")) {\r\n\t\treturn true;\r\n\t}\t\r\n\tif (isType(lt, \"NonCatalog\") && isType(rt, \"Supervisor\")) {\r\n\t\treturn true;\r\n\t}\t\t\r\n\tif (isType(lt, \"Supervisor\") && isType(rt, \"SupervisorChain\")) {\r\n\t\treturn true;\r\n\t}\r\n\tif (isType(lt,\"SupervisorChain\") && isType(rt,\"SupervisorChain\")) {\r\n\t\treturn (User2Supervisor(left.getApprover()) == right.getApprover()); \r\n\t}\t\r\n\tif (!isType(lt, \"Hazmat\") && isType(rt, \"Category\")) {\r\n\t\treturn !isType(lt,\"Category\");\r\n\t}\t\t\t\r\n\t\r\n\tif (isType(lt, \"Supervisor\") && isType(rt, \"CommodityApprover\")) {\r\n\t\treturn true;\r\n\t}\r\n\tif (isType(lt, \"CommodityApprover\") && isType(rt, \"CommodityApproverChain\")) {\r\n\t\treturn true;\r\n\t}\r\n\tif (isType(lt, \"CommodityApproverChain\") && isType(rt, \"CommodityApproverChain\")) {\r\n\t\t// Second level IT approver\r\n\t\tvar SecondLevelApp = \"1951569507\";\r\n\t\treturn (left.getApprover().getUniqueName().equals(SecondLevelApp)) ;\r\n\t}\r\n\t\r\n\t\r\n\treturn false;\r\n}\r\nmaster_constraint;";
            Enabled = false;
            Name = "AllConstraints (CAT)";
            Permission = RuleEditor;
        },
        {
            ApprovalRequestType = DandFPAccountReviewer;
            Classname = ariba.approvable.rules.FirstConstraint;
            Enabled = false;
            Name = DFPAccountReveiwerFirst;
            Permission = RuleEditor;
        },
        {
            After = "ERFQPurchasingFinal (CAT)";
            Before = "SupplierCustomApprover (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "SupplierCustomApprover (CAT) BEFORE ERFQPurchasingFinal (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "ERFQPurchasingFinal (CAT)";
            Before = "NonCatalog (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "NonCatalog (CAT) BEFORE ERFQPurchasingFinal (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "SupplierCustomApprover (CAT)";
            Before = "NonCatalog (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "NonCatalog (CAT) BEFORE SupplierCustomApprover (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "CustomShipTo (CAT)";
            Before = "eRFQNonPurchPreparer (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = false;
            Name = "eRFQNonPurchPreparer (CAT) BEFORE CustomShipTo (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "eRFQNonPurchPreparer (CAT)";
            Before = "NonCatalog (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "NonCatalog (CAT) BEFORE eRFQNonPurchPreparer (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "CapitalApprover (CAT)";
            Before = "eRFQNonPurchPreparer (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "eRFQNonPurchPreparer (CAT) BEFORE CapitalApprover (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "DesignatedApprover (CAT)";
            Before = "eRFQNonPurchPreparer (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "eRFQNonPurchPreparer (CAT) BEFORE DesignatedApprover (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "Supervisor (CAT)";
            Before = "eRFQNonPurchPreparer (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "eRFQNonPurchPreparer (CAT) BEFORE Supervisor (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "SupervisorChain (CAT)";
            Before = "eRFQNonPurchPreparer (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "eRFQNonPurchPreparer (CAT) BEFORE SupervisorChain (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "BuyerCode (CAT)";
            Before = "eRFQNonPurchPreparer (CAT))";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "eRFQNonPurchPreparer (CAT) BEFORE BuyerCode (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "OnBehalfOf (CAT)";
            Before = "eRFQNonPurchPreparer (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "eRFQNonPurchPreparer (CAT) BEFORE OnBehalfOf (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "SupplierCustomApprover (CAT)";
            Before = "eRFQNonPurchPreparer (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "eRFQNonPurchPreparer (CAT) BEFORE SupplierCustomApprover (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "CSCL Customs Team";
            Before = "OnBehalfOf (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "CSCL Customs Team Constraint AFTER OnBehalfOf (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "NonCatalog (CAT)";
            Before = "CSCL Customs Team";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "CSCL Customs Team Constraint BEFORE NonCatalog (CAT)";
            Permission = RuleEditor;
        },
        {
            ApprovalRequestType = "ERFQPurchasingFinal (CAT)";
            Classname = ariba.approvable.rules.LastConstraint;
            Enabled = true;
            Name = "ERFQPurchasingFinal (CAT)Last";
            Permission = RuleEditor;
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptConstraint";
            Condition = "function prioritize_constraint (left, right)\r\n{\r\n    \r\n    var l = left.getType();\r\n    var r = right.getType();\r\n    Log.javascript.debug(\"prioritize_constraint : left.getType() :\"+left.getType());\r\n    Log.javascript.debug(\"prioritize_constraint : right.getType() :\"+right.getType());\r\n    Log.javascript.debug(\"prioritize_constraint : condition 1 :\"+needsEvaluation(left, right));\r\n    if (needsEvaluation(left, right))\r\n    {\r\n    \tLog.javascript.debug(\"prioritize_constraint : left Type  :\"+left.getType());\r\n        Log.javascript.debug(\"prioritize_constraint : right getType  :\"+right.getType());\r\n        \r\n        Log.javascript.debug(\"prioritize_constraint : *** To check left is part of Company Code Approval rules :\"+isPartOfCompanyApprovalRule(left));\r\n        \r\n        Log.javascript.debug(\"prioritize_constraint : *** To check right is part of Company Code Approval rules:\"+isPartOfCompanyApprovalRule(right));\r\n        \r\n        \r\n        if( isPartOfCompanyApprovalRule (left) )\r\n           var  leftPriority = getPriority_Company(left);\r\n        else\r\n           var  leftPriority = 0; \r\n\r\n        if( isPartOfCompanyApprovalRule (right) )\r\n           var  rightPriority = getPriority_Company(right);\r\n        else\r\n           var  rightPriority = 0; \r\n\r\n        Log.javascript.debug(\"prioritize_constraint : getPriority_Company left :\"+leftPriority);\r\n        Log.javascript.debug(\"prioritize_constraint : getPriority_Company right :\"+rightPriority);\r\n        Log.javascript.debug(\"prioritize_constraint : getPriority_Company right :\"+(leftPriority == rightPriority) && (l == r));\r\n        if (leftPriority < rightPriority)\r\n            return true;\r\n        else\r\n\t    if( (leftPriority == rightPriority) && (l == r) && (l.equals('CategoryManager (CAT)') || l.startsWith('SupervisorChain')))\r\n\t\treturn true;\r\n            else\r\n                return false;\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction  isPartOfCompanyApprovalRule(rl)\r\n{\r\n    var sOnBehalfOf = 'OnBehalfOf';\r\n    var sNonCatalog = 'NonCatalog';\r\n    var sCostCenter = 'OtherDepartment';\r\n    var sSupervisor = 'Supervisor';\r\n    var sSupervisorChain = 'SupervisorChain';\r\n    var sCategoryManager = 'CategoryManager';\r\n    var sCategoryManagerChain = 'CategoryManagerChain';\r\n\tvar hazmat = 'Hazmat';\r\n\tvar blockadmin = 'BlockAdmin';\r\n\tvar purchasemanager = 'PurchaseManager';\r\n\tvar capital = 'Capital';\r\n\tvar expense='Expense Approver';\r\n\tvar sBusinessResourceApprover = 'BusinessResourceApprover';\r\n\r\n\r\n    var type = rl.getType();\r\n    Log.javascript.debug(\"prioritize_constraint : isPartOfCompanyApprovalRule  declartion: Type:\"+type);\r\n\r\n        if ( type.startsWith(sOnBehalfOf) || type.startsWith(hazmat) ||type.startsWith(capital) || type.startsWith(blockadmin) ||type.startsWith(purchasemanager) ||type.startsWith(sNonCatalog) || type.startsWith(sCostCenter) || type.startsWith(sSupervisor) || type.startsWith(sSupervisorChain) || type.startsWith(sCategoryManager) || type.startsWith(sCategoryManagerChain) || type.startsWith(expense) || type.startsWith(sBusinessResourceApprover))  \r\n        {\r\n            Log.javascript.debug (\"prioritize_constraint : isPartOfCompanyApprovalRule : true condition\");\t\t\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n            Log.javascript.debug (\"prioritize_constraint : isPartOfCompanyApprovalRule : false condition\");\r\n            return false;\r\n        }\r\n}\r\n\r\nfunction needsEvaluation(left, right)\r\n{\r\n    \r\n    var l = left.getType();\r\n    var r = right.getType();\r\n    Log.javascript.debug (\"prioritize_constraint : inside needsEvaluation_Company\");\r\n    Log.javascript.debug(\"prioritize_constraint : needsEvaluation_Company : left Type  :\"+l);\r\n    Log.javascript.debug(\"prioritize_constraint : needsEvaluation_Company : right getType  :\"+r);\r\n    Log.javascript.debug(\"prioritize_constraint : needsEvaluation_Company :isPartOfCompanyApprovalRule(left):\"+isPartOfCompanyApprovalRule(left));\r\n    Log.javascript.debug(\"prioritize_constraint : needsEvaluation_Company :isPartOfCompanyApprovalRule(right):\"+isPartOfCompanyApprovalRule(right));\r\n\r\n    if(isPartOfCompanyApprovalRule(left) || isPartOfCompanyApprovalRule(right))\r\n    {\r\n        Log.javascript.debug (\"prioritize_constraint :  Needs Evaluation is true : \"+l+\" - \"+r);\r\n        return true;\r\n    }\r\n    else\r\n    {\r\n        Log.javascript.debug (\"prioritize_constraint :  No Need of  Evaluation  : \"+l+\" - \"+r);\r\n        return false;\r\n    }\r\n    \r\n}\r\n\r\nfunction getPriority_Company(ar)\r\n{\r\n    var sOnBehalfOf = 'OnBehalfOf';\r\n    var sNonCatalog = 'NonCatalog';\r\n    var sCostCenter = 'OtherDepartment';\r\n    var sSupervisor = 'Supervisor';\r\n    var sSupervisorChain = 'SupervisorChain';\r\n    var sCategoryManager = 'CategoryManager';\r\n    var sCategoryManagerChain = 'CategoryManagerChain';\r\n    var hazmat = 'Hazmat';\r\n    var blockadmin = 'BlockAdmin';\r\n    var purchasemanager = 'PurchaseManager';\r\n    var capital = 'Capital';\r\n    var expense='Expense Approver';\r\n\tvar sBusinessResourceApprover = 'BusinessResourceApprover';\r\n\r\n    var apType = ar.getType();\r\n    apType = apType.trim();\r\n    Log.javascript.debug(\"prioritize_constraint : in getPriority_Company method  : Type:\"+apType);\r\n\r\n        if(apType.startsWith(sCostCenter))\r\n        {\r\n        var ap = ar.getApprovable();\r\n        var approvalRules = ap.getDottedFieldValue(\"CompanyCode.ApprovalRules\");\r\n        Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :approvalRules.size():\"+approvalRules.size());\r\n        for (var i=0; i < approvalRules.size(); i++)\r\n        {\r\n            var ruleTypeString = approvalRules.get(i).getFieldValue(\"RuleType\");\r\n            Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :ruleTypeString:|\"+ruleTypeString+\"|\"+apType+\"|:\"+ruleTypeString.equals(apType));\r\n            if (ruleTypeString.equals('CostCenter')){\r\n                Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :\"+apType+\" Priority:\"+approvalRules.get(i).getFieldValue(\"Priority\"));  \r\n                return approvalRules.get(i).getFieldValue(\"Priority\");\r\n            }           \r\n        }\r\n        }\r\n        if(apType.startsWith(capital))\r\n        {\r\n        var ap = ar.getApprovable();\r\n        var approvalRules = ap.getDottedFieldValue(\"CompanyCode.ApprovalRules\");\r\n        Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :approvalRules.size():\"+approvalRules.size());\r\n        for (var i=0; i < approvalRules.size(); i++)\r\n        {\r\n            var ruleTypeString = approvalRules.get(i).getFieldValue(\"RuleType\");\r\n            Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :ruleTypeString:|\"+ruleTypeString+\"|\"+apType+\"|:\"+ruleTypeString.equals(apType));\r\n            if (ruleTypeString.equals(capital)){\r\n                Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :\"+apType+\" Priority:\"+approvalRules.get(i).getFieldValue(\"Priority\"));  \r\n                return approvalRules.get(i).getFieldValue(\"Priority\");\r\n            }           \r\n        }\r\n        }else if(apType.startsWith(sOnBehalfOf))\r\n        {\r\n        var ap = ar.getApprovable();\r\n        var approvalRules = ap.getDottedFieldValue(\"CompanyCode.ApprovalRules\");\r\n        Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :approvalRules.size():\"+approvalRules.size());\r\n        for (var i=0; i < approvalRules.size(); i++)\r\n        {\r\n            var ruleTypeString = approvalRules.get(i).getFieldValue(\"RuleType\");\r\n            Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :ruleTypeString:|\"+ruleTypeString+\"|\"+apType+\"|:\"+ruleTypeString.equals(apType));\r\n            if (ruleTypeString.equals(sOnBehalfOf)){\r\n                Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :\"+apType+\" Priority:\"+approvalRules.get(i).getFieldValue(\"Priority\"));  \r\n                return approvalRules.get(i).getFieldValue(\"Priority\");\r\n            }           \r\n        }        \r\n        }else if(apType.startsWith(sNonCatalog))\r\n        {\r\n        var ap = ar.getApprovable();\r\n        var approvalRules = ap.getDottedFieldValue(\"CompanyCode.ApprovalRules\");\r\n        Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :approvalRules.size():\"+approvalRules.size());\r\n        for (var i=0; i < approvalRules.size(); i++)\r\n        {\r\n            var ruleTypeString = approvalRules.get(i).getFieldValue(\"RuleType\");\r\n            Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :ruleTypeString:|\"+ruleTypeString+\"|\"+apType+\"|:\"+ruleTypeString.equals(apType));\r\n            if (ruleTypeString.equals(sNonCatalog)){\r\n                Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :\"+apType+\" Priority:\"+approvalRules.get(i).getFieldValue(\"Priority\"));  \r\n                return approvalRules.get(i).getFieldValue(\"Priority\");\r\n            }           \r\n        } \r\n        \r\n        }else if(apType.equals('Supervisor (CAT)'))\r\n        {\r\n        var ap = ar.getApprovable();\r\n        var approvalRules = ap.getDottedFieldValue(\"CompanyCode.ApprovalRules\");\r\n        Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :approvalRules.size():\"+approvalRules.size());\r\n        for (var i=0; i < approvalRules.size(); i++)\r\n        {\r\n            var ruleTypeString = approvalRules.get(i).getFieldValue(\"RuleType\");\r\n            Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :ruleTypeString:|\"+ruleTypeString+\"|\"+apType+\"|:\"+ruleTypeString.equals(apType));\r\n            if (ruleTypeString.equals(sSupervisor)){\r\n                Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :\"+apType+\" Priority:\"+approvalRules.get(i).getFieldValue(\"Priority\"));  \r\n                return approvalRules.get(i).getFieldValue(\"Priority\");\r\n            }           \r\n        }        \r\n        }else if(apType.startsWith(sSupervisorChain))\r\n        {\r\n        var ap = ar.getApprovable();\r\n        var approvalRules = ap.getDottedFieldValue(\"CompanyCode.ApprovalRules\");\r\n        Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :approvalRules.size():\"+approvalRules.size());\r\n        for (var i=0; i < approvalRules.size(); i++)\r\n        {\r\n            var ruleTypeString = approvalRules.get(i).getFieldValue(\"RuleType\");\r\n            Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :ruleTypeString:|\"+ruleTypeString+\"|\"+apType+\"|:\"+ruleTypeString.equals(apType));\r\n            if (ruleTypeString.equals(sSupervisorChain)){\r\n                Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :\"+apType+\" Priority:\"+approvalRules.get(i).getFieldValue(\"Priority\"));  \r\n                return approvalRules.get(i).getFieldValue(\"Priority\");\r\n            }           \r\n        }        \r\n        }\r\n         else if(apType.startsWith(purchasemanager))\r\n\t\t\t\t{\r\n\t\t\t\tvar ap = ar.getApprovable();\r\n\t\t\t\tvar approvalRules = ap.getDottedFieldValue(\"CompanyCode.ApprovalRules\");\r\n\t\t\t\tLog.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :approvalRules.size():\"+approvalRules.size());\r\n\t\t\t\tfor (var i=0; i < approvalRules.size(); i++)\r\n\t\t\t\t{\r\n\t\t\t\t    var ruleTypeString = approvalRules.get(i).getFieldValue(\"RuleType\");\r\n\t\t\t\t    Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :ruleTypeString:|\"+ruleTypeString+\"|\"+apType+\"|:\"+ruleTypeString.equals(apType));\r\n\t\t\t\t    if (ruleTypeString.equals(purchasemanager)){\r\n\t\t\t\t\tLog.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :\"+apType+\" Priority:\"+approvalRules.get(i).getFieldValue(\"Priority\"));  \r\n\t\t\t\t\treturn approvalRules.get(i).getFieldValue(\"Priority\");\r\n\t\t\t\t    }           \r\n\t\t        }\r\n        }\r\n        else if(apType.startsWith(hazmat))\r\n\t\t{\r\n\t\tvar ap = ar.getApprovable();\r\n\t\tvar approvalRules = ap.getDottedFieldValue(\"CompanyCode.ApprovalRules\");\r\n\t\tLog.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :approvalRules.size():\"+approvalRules.size());\r\n\t\tfor (var i=0; i < approvalRules.size(); i++)\r\n\t\t{\r\n\t\t    var ruleTypeString = approvalRules.get(i).getFieldValue(\"RuleType\");\r\n\t\t    Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :ruleTypeString:|\"+ruleTypeString+\"|\"+apType+\"|:\"+ruleTypeString.equals(apType));\r\n\t\t    if (ruleTypeString.equals(hazmat)){\r\n\t\t\tLog.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :\"+apType+\" Priority:\"+approvalRules.get(i).getFieldValue(\"Priority\"));  \r\n\t\t\treturn approvalRules.get(i).getFieldValue(\"Priority\");\r\n\t\t    }           \r\n\t        }    \r\n\t        }\r\n\t        else if(apType.startsWith(blockadmin))\r\n\t\t{\r\n\t\tvar ap = ar.getApprovable();\r\n\t\tvar approvalRules = ap.getDottedFieldValue(\"CompanyCode.ApprovalRules\");\r\n\t\tLog.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :approvalRules.size():\"+approvalRules.size());\r\n\t\tfor (var i=0; i < approvalRules.size(); i++)\r\n\t\t{\r\n\t\t    var ruleTypeString = approvalRules.get(i).getFieldValue(\"RuleType\");\r\n\t\t    Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :ruleTypeString:|\"+ruleTypeString+\"|\"+apType+\"|:\"+ruleTypeString.equals(apType));\r\n\t\t    if (ruleTypeString.equals(blockadmin)){\r\n\t\t\tLog.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :\"+apType+\" Priority:\"+approvalRules.get(i).getFieldValue(\"Priority\"));  \r\n\t\t\treturn approvalRules.get(i).getFieldValue(\"Priority\");\r\n\t\t    }           \r\n\t\t        }  \r\n\t\t        }else if(apType.equals('CategoryManager (CAT)'))\r\n        {\r\n        var ap = ar.getApprovable();\r\n        var approvalRules = ap.getDottedFieldValue(\"CompanyCode.ApprovalRules\");\r\n        Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :approvalRules.size():\"+approvalRules.size());\r\n        for (var i=0; i < approvalRules.size(); i++)\r\n        {\r\n            var ruleTypeString = approvalRules.get(i).getFieldValue(\"RuleType\");\r\n            Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :ruleTypeString:|\"+ruleTypeString+\"|\"+apType+\"|:\"+ruleTypeString.equals(apType));\r\n            if (ruleTypeString.equals(sCategoryManager)){\r\n                Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :\"+apType+\" Priority:\"+approvalRules.get(i).getFieldValue(\"Priority\"));  \r\n                return approvalRules.get(i).getFieldValue(\"Priority\");\r\n            }           \r\n        }        \r\n        }else if(apType.startsWith(sCategoryManagerChain))\r\n        {\r\n        var ap = ar.getApprovable();\r\n        var approvalRules = ap.getDottedFieldValue(\"CompanyCode.ApprovalRules\");\r\n        Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :approvalRules.size():\"+approvalRules.size());\r\n        for (var i=0; i < approvalRules.size(); i++)\r\n        {\r\n            var ruleTypeString = approvalRules.get(i).getFieldValue(\"RuleType\");\r\n            Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :ruleTypeString:|\"+ruleTypeString+\"|\"+apType+\"|:\"+ruleTypeString.equals(apType));\r\n            if (ruleTypeString.equals(sCategoryManagerChain)){\r\n                Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :\"+apType+\" Priority:\"+approvalRules.get(i).getFieldValue(\"Priority\"));  \r\n                return approvalRules.get(i).getFieldValue(\"Priority\");\r\n            }           \r\n        }        \r\n        } else if(apType.startsWith(sBusinessResourceApprover))\r\n        {\r\n        var ap = ar.getApprovable();\r\n        var approvalRules = ap.getDottedFieldValue(\"CompanyCode.ApprovalRules\");\r\n        Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :approvalRules.size():\"+approvalRules.size());\r\n        for (var i=0; i < approvalRules.size(); i++)\r\n        {\r\n            var ruleTypeString = approvalRules.get(i).getFieldValue(\"RuleType\");\r\n            Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :ruleTypeString:|\"+ruleTypeString+\"|\"+apType+\"|:\"+ruleTypeString.equals(apType));\r\n            if (ruleTypeString.equals(sBusinessResourceApprover)){\r\n                Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :\"+apType+\" Priority:\"+approvalRules.get(i).getFieldValue(\"Priority\"));  \r\n                return approvalRules.get(i).getFieldValue(\"Priority\");\r\n            }           \r\n        }        \r\n        }\r\n        \r\n        else\r\n        {\r\n        var ap = ar.getApprovable();\r\n        var approvalRules = ap.getDottedFieldValue(\"CompanyCode.ApprovalRules\");\r\n        Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :approvalRules.size():\"+approvalRules.size());\r\n        for (var i=0; i < approvalRules.size(); i++)\r\n        {\r\n            var ruleTypeString = approvalRules.get(i).getFieldValue(\"RuleType\");\r\n            Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :ruleTypeString:|\"+ruleTypeString+\"|\"+apType+\"|:\"+ruleTypeString.equals(apType));\r\n            if (ruleTypeString.equals(apType)){\r\n                Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :\"+apType+\" Priority:\"+approvalRules.get(i).getFieldValue(\"Priority\"));  \r\n                return approvalRules.get(i).getFieldValue(\"Priority\");\r\n            }           \r\n        }        \r\n        }\r\n}\r\n\r\nprioritize_constraint;";
            Enabled = true;
            Name = "Prioritize (CAT)";
            Permission = RuleEditor;
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptConstraint";
            Condition = "function prioritize_constraint (left, right)\r\n{\r\n    \r\n    var l = left.getType();\r\n    var r = right.getType();\r\n    Log.javascript.debug(\"prioritize_constraint : left.getType() :\"+left.getType());\r\n    Log.javascript.debug(\"prioritize_constraint : right.getType() :\"+right.getType());\r\n    Log.javascript.debug(\"prioritize_constraint : condition 1 :\"+needsEvaluation(left, right));\r\n    if (needsEvaluation(left, right))\r\n    {\r\n    \tLog.javascript.debug(\"prioritize_constraint : left Type  :\"+left.getType());\r\n        Log.javascript.debug(\"prioritize_constraint : right getType  :\"+right.getType());\r\n        \r\n        Log.javascript.debug(\"prioritize_constraint : *** To check left is part of Company Code Approval rules :\"+isPartOfCompanyApprovalRule(left));\r\n        \r\n        Log.javascript.debug(\"prioritize_constraint : *** To check right is part of Company Code Approval rules:\"+isPartOfCompanyApprovalRule(right));\r\n        \r\n        \r\n        if( isPartOfCompanyApprovalRule (left) )\r\n           var  leftPriority = getPriority_Company(left);\r\n        else\r\n           var  leftPriority = 0; \r\n\r\n        if( isPartOfCompanyApprovalRule (right) )\r\n           var  rightPriority = getPriority_Company(right);\r\n        else\r\n           var  rightPriority = 0; \r\n\r\n        Log.javascript.debug(\"prioritize_constraint : getPriority_Company left :\"+leftPriority);\r\n        Log.javascript.debug(\"prioritize_constraint : getPriority_Company right :\"+rightPriority);\r\n        Log.javascript.debug(\"prioritize_constraint : getPriority_Company right :\"+(leftPriority == rightPriority) && (l == r));\r\n        if (leftPriority < rightPriority)\r\n            return true;\r\n        else\r\n\t    if( (leftPriority == rightPriority) && (l == r) && (l.equals('CategoryManager (CAT)') || l.startsWith('SupervisorChain')))\r\n\t\treturn true;\r\n            else\r\n                return false;\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction  isPartOfCompanyApprovalRule(rl)\r\n{\r\n    var sOnBehalfOf = 'OnBehalfOf';\r\n    var sNonCatalog = 'NonCatalog';\r\n    var sCostCenter = 'OtherDepartment';\r\n    var sSupervisor = 'Supervisor';\r\n    var sSupervisorChain = 'SupervisorChain';\r\n    var sCategoryManager = 'CategoryManager';\r\n    var sCategoryManagerChain = 'CategoryManagerChain';\r\n\tvar hazmat = 'Hazmat';\r\n\tvar blockadmin = 'BlockAdmin';\r\n\tvar purchasemanager = 'PurchaseManager';\r\n\tvar capital = 'Capital';\r\n\tvar expense='Expense Approver';\r\n\r\n\r\n    var type = rl.getType();\r\n    Log.javascript.debug(\"prioritize_constraint : isPartOfCompanyApprovalRule  declartion: Type:\"+type);\r\n\r\n        if ( type.startsWith(sOnBehalfOf) || type.startsWith(hazmat) ||type.startsWith(capital) || type.startsWith(blockadmin) ||type.startsWith(purchasemanager) ||type.startsWith(sNonCatalog) || type.startsWith(sCostCenter) || type.startsWith(sSupervisor) || type.startsWith(sSupervisorChain) || type.startsWith(sCategoryManager) || type.startsWith(sCategoryManagerChain) || type.startsWith(expense) )  \r\n        {\r\n            Log.javascript.debug (\"prioritize_constraint : isPartOfCompanyApprovalRule : true condition\");\t\t\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n            Log.javascript.debug (\"prioritize_constraint : isPartOfCompanyApprovalRule : false condition\");\r\n            return false;\r\n        }\r\n}\r\n\r\nfunction needsEvaluation(left, right)\r\n{\r\n    \r\n    var l = left.getType();\r\n    var r = right.getType();\r\n    Log.javascript.debug (\"prioritize_constraint : inside needsEvaluation_Company\");\r\n    Log.javascript.debug(\"prioritize_constraint : needsEvaluation_Company : left Type  :\"+l);\r\n    Log.javascript.debug(\"prioritize_constraint : needsEvaluation_Company : right getType  :\"+r);\r\n    Log.javascript.debug(\"prioritize_constraint : needsEvaluation_Company :isPartOfCompanyApprovalRule(left):\"+isPartOfCompanyApprovalRule(left));\r\n    Log.javascript.debug(\"prioritize_constraint : needsEvaluation_Company :isPartOfCompanyApprovalRule(right):\"+isPartOfCompanyApprovalRule(right));\r\n\r\n    if(isPartOfCompanyApprovalRule(left) || isPartOfCompanyApprovalRule(right))\r\n    {\r\n        Log.javascript.debug (\"prioritize_constraint :  Needs Evaluation is true : \"+l+\" - \"+r);\r\n        return true;\r\n    }\r\n    else\r\n    {\r\n        Log.javascript.debug (\"prioritize_constraint :  No Need of  Evaluation  : \"+l+\" - \"+r);\r\n        return false;\r\n    }\r\n    \r\n}\r\n\r\nfunction getPriority_Company(ar)\r\n{\r\n    var sOnBehalfOf = 'OnBehalfOf';\r\n    var sNonCatalog = 'NonCatalog';\r\n    var sCostCenter = 'OtherDepartment';\r\n    var sSupervisor = 'Supervisor';\r\n    var sSupervisorChain = 'SupervisorChain';\r\n    var sCategoryManager = 'CategoryManager';\r\n    var sCategoryManagerChain = 'CategoryManagerChain';\r\n    var hazmat = 'Hazmat';\r\n    var blockadmin = 'BlockAdmin';\r\n    var purchasemanager = 'PurchaseManager';\r\n    var capital = 'Capital';\r\n    var expense='Expense Approver';\r\n\r\n    var apType = ar.getType();\r\n    apType = apType.trim();\r\n    Log.javascript.debug(\"prioritize_constraint : in getPriority_Company method  : Type:\"+apType);\r\n\r\n        if(apType.startsWith(sCostCenter))\r\n        {\r\n        var ap = ar.getApprovable();\r\n        var approvalRules = ap.getDottedFieldValue(\"CompanyCode.ApprovalRules\");\r\n        Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :approvalRules.size():\"+approvalRules.size());\r\n        for (var i=0; i < approvalRules.size(); i++)\r\n        {\r\n            var ruleTypeString = approvalRules.get(i).getFieldValue(\"RuleType\");\r\n            Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :ruleTypeString:|\"+ruleTypeString+\"|\"+apType+\"|:\"+ruleTypeString.equals(apType));\r\n            if (ruleTypeString.equals('CostCenter')){\r\n                Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :\"+apType+\" Priority:\"+approvalRules.get(i).getFieldValue(\"Priority\"));  \r\n                return approvalRules.get(i).getFieldValue(\"Priority\");\r\n            }           \r\n        }\r\n        }\r\n        if(apType.startsWith(capital))\r\n        {\r\n        var ap = ar.getApprovable();\r\n        var approvalRules = ap.getDottedFieldValue(\"CompanyCode.ApprovalRules\");\r\n        Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :approvalRules.size():\"+approvalRules.size());\r\n        for (var i=0; i < approvalRules.size(); i++)\r\n        {\r\n            var ruleTypeString = approvalRules.get(i).getFieldValue(\"RuleType\");\r\n            Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :ruleTypeString:|\"+ruleTypeString+\"|\"+apType+\"|:\"+ruleTypeString.equals(apType));\r\n            if (ruleTypeString.equals(capital)){\r\n                Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :\"+apType+\" Priority:\"+approvalRules.get(i).getFieldValue(\"Priority\"));  \r\n                return approvalRules.get(i).getFieldValue(\"Priority\");\r\n            }           \r\n        }\r\n        }else if(apType.startsWith(sOnBehalfOf))\r\n        {\r\n        var ap = ar.getApprovable();\r\n        var approvalRules = ap.getDottedFieldValue(\"CompanyCode.ApprovalRules\");\r\n        Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :approvalRules.size():\"+approvalRules.size());\r\n        for (var i=0; i < approvalRules.size(); i++)\r\n        {\r\n            var ruleTypeString = approvalRules.get(i).getFieldValue(\"RuleType\");\r\n            Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :ruleTypeString:|\"+ruleTypeString+\"|\"+apType+\"|:\"+ruleTypeString.equals(apType));\r\n            if (ruleTypeString.equals(sOnBehalfOf)){\r\n                Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :\"+apType+\" Priority:\"+approvalRules.get(i).getFieldValue(\"Priority\"));  \r\n                return approvalRules.get(i).getFieldValue(\"Priority\");\r\n            }           \r\n        }        \r\n        }else if(apType.startsWith(sNonCatalog))\r\n        {\r\n        var ap = ar.getApprovable();\r\n        var approvalRules = ap.getDottedFieldValue(\"CompanyCode.ApprovalRules\");\r\n        Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :approvalRules.size():\"+approvalRules.size());\r\n        for (var i=0; i < approvalRules.size(); i++)\r\n        {\r\n            var ruleTypeString = approvalRules.get(i).getFieldValue(\"RuleType\");\r\n            Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :ruleTypeString:|\"+ruleTypeString+\"|\"+apType+\"|:\"+ruleTypeString.equals(apType));\r\n            if (ruleTypeString.equals(sNonCatalog)){\r\n                Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :\"+apType+\" Priority:\"+approvalRules.get(i).getFieldValue(\"Priority\"));  \r\n                return approvalRules.get(i).getFieldValue(\"Priority\");\r\n            }           \r\n        } \r\n        \r\n        }else if(apType.equals('Supervisor (CAT)'))\r\n        {\r\n        var ap = ar.getApprovable();\r\n        var approvalRules = ap.getDottedFieldValue(\"CompanyCode.ApprovalRules\");\r\n        Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :approvalRules.size():\"+approvalRules.size());\r\n        for (var i=0; i < approvalRules.size(); i++)\r\n        {\r\n            var ruleTypeString = approvalRules.get(i).getFieldValue(\"RuleType\");\r\n            Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :ruleTypeString:|\"+ruleTypeString+\"|\"+apType+\"|:\"+ruleTypeString.equals(apType));\r\n            if (ruleTypeString.equals(sSupervisor)){\r\n                Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :\"+apType+\" Priority:\"+approvalRules.get(i).getFieldValue(\"Priority\"));  \r\n                return approvalRules.get(i).getFieldValue(\"Priority\");\r\n            }           \r\n        }        \r\n        }else if(apType.startsWith(sSupervisorChain))\r\n        {\r\n        var ap = ar.getApprovable();\r\n        var approvalRules = ap.getDottedFieldValue(\"CompanyCode.ApprovalRules\");\r\n        Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :approvalRules.size():\"+approvalRules.size());\r\n        for (var i=0; i < approvalRules.size(); i++)\r\n        {\r\n            var ruleTypeString = approvalRules.get(i).getFieldValue(\"RuleType\");\r\n            Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :ruleTypeString:|\"+ruleTypeString+\"|\"+apType+\"|:\"+ruleTypeString.equals(apType));\r\n            if (ruleTypeString.equals(sSupervisorChain)){\r\n                Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :\"+apType+\" Priority:\"+approvalRules.get(i).getFieldValue(\"Priority\"));  \r\n                return approvalRules.get(i).getFieldValue(\"Priority\");\r\n            }           \r\n        }        \r\n        }\r\n         else if(apType.startsWith(purchasemanager))\r\n\t\t\t\t{\r\n\t\t\t\tvar ap = ar.getApprovable();\r\n\t\t\t\tvar approvalRules = ap.getDottedFieldValue(\"CompanyCode.ApprovalRules\");\r\n\t\t\t\tLog.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :approvalRules.size():\"+approvalRules.size());\r\n\t\t\t\tfor (var i=0; i < approvalRules.size(); i++)\r\n\t\t\t\t{\r\n\t\t\t\t    var ruleTypeString = approvalRules.get(i).getFieldValue(\"RuleType\");\r\n\t\t\t\t    Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :ruleTypeString:|\"+ruleTypeString+\"|\"+apType+\"|:\"+ruleTypeString.equals(apType));\r\n\t\t\t\t    if (ruleTypeString.equals(purchasemanager)){\r\n\t\t\t\t\tLog.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :\"+apType+\" Priority:\"+approvalRules.get(i).getFieldValue(\"Priority\"));  \r\n\t\t\t\t\treturn approvalRules.get(i).getFieldValue(\"Priority\");\r\n\t\t\t\t    }           \r\n\t\t        }\r\n        }\r\n        else if(apType.startsWith(hazmat))\r\n\t\t{\r\n\t\tvar ap = ar.getApprovable();\r\n\t\tvar approvalRules = ap.getDottedFieldValue(\"CompanyCode.ApprovalRules\");\r\n\t\tLog.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :approvalRules.size():\"+approvalRules.size());\r\n\t\tfor (var i=0; i < approvalRules.size(); i++)\r\n\t\t{\r\n\t\t    var ruleTypeString = approvalRules.get(i).getFieldValue(\"RuleType\");\r\n\t\t    Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :ruleTypeString:|\"+ruleTypeString+\"|\"+apType+\"|:\"+ruleTypeString.equals(apType));\r\n\t\t    if (ruleTypeString.equals(hazmat)){\r\n\t\t\tLog.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :\"+apType+\" Priority:\"+approvalRules.get(i).getFieldValue(\"Priority\"));  \r\n\t\t\treturn approvalRules.get(i).getFieldValue(\"Priority\");\r\n\t\t    }           \r\n\t        }    \r\n\t        }\r\n\t        else if(apType.startsWith(blockadmin))\r\n\t\t{\r\n\t\tvar ap = ar.getApprovable();\r\n\t\tvar approvalRules = ap.getDottedFieldValue(\"CompanyCode.ApprovalRules\");\r\n\t\tLog.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :approvalRules.size():\"+approvalRules.size());\r\n\t\tfor (var i=0; i < approvalRules.size(); i++)\r\n\t\t{\r\n\t\t    var ruleTypeString = approvalRules.get(i).getFieldValue(\"RuleType\");\r\n\t\t    Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :ruleTypeString:|\"+ruleTypeString+\"|\"+apType+\"|:\"+ruleTypeString.equals(apType));\r\n\t\t    if (ruleTypeString.equals(blockadmin)){\r\n\t\t\tLog.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :\"+apType+\" Priority:\"+approvalRules.get(i).getFieldValue(\"Priority\"));  \r\n\t\t\treturn approvalRules.get(i).getFieldValue(\"Priority\");\r\n\t\t    }           \r\n\t\t        }  \r\n\t\t        }else if(apType.equals('CategoryManager (CAT)'))\r\n        {\r\n        var ap = ar.getApprovable();\r\n        var approvalRules = ap.getDottedFieldValue(\"CompanyCode.ApprovalRules\");\r\n        Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :approvalRules.size():\"+approvalRules.size());\r\n        for (var i=0; i < approvalRules.size(); i++)\r\n        {\r\n            var ruleTypeString = approvalRules.get(i).getFieldValue(\"RuleType\");\r\n            Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :ruleTypeString:|\"+ruleTypeString+\"|\"+apType+\"|:\"+ruleTypeString.equals(apType));\r\n            if (ruleTypeString.equals(sCategoryManager)){\r\n                Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :\"+apType+\" Priority:\"+approvalRules.get(i).getFieldValue(\"Priority\"));  \r\n                return approvalRules.get(i).getFieldValue(\"Priority\");\r\n            }           \r\n        }        \r\n        }else if(apType.startsWith(sCategoryManagerChain))\r\n        {\r\n        var ap = ar.getApprovable();\r\n        var approvalRules = ap.getDottedFieldValue(\"CompanyCode.ApprovalRules\");\r\n        Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :approvalRules.size():\"+approvalRules.size());\r\n        for (var i=0; i < approvalRules.size(); i++)\r\n        {\r\n            var ruleTypeString = approvalRules.get(i).getFieldValue(\"RuleType\");\r\n            Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :ruleTypeString:|\"+ruleTypeString+\"|\"+apType+\"|:\"+ruleTypeString.equals(apType));\r\n            if (ruleTypeString.equals(sCategoryManagerChain)){\r\n                Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :\"+apType+\" Priority:\"+approvalRules.get(i).getFieldValue(\"Priority\"));  \r\n                return approvalRules.get(i).getFieldValue(\"Priority\");\r\n            }           \r\n        }        \r\n        }\r\n        \r\n        else\r\n        {\r\n        var ap = ar.getApprovable();\r\n        var approvalRules = ap.getDottedFieldValue(\"CompanyCode.ApprovalRules\");\r\n        Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :approvalRules.size():\"+approvalRules.size());\r\n        for (var i=0; i < approvalRules.size(); i++)\r\n        {\r\n            var ruleTypeString = approvalRules.get(i).getFieldValue(\"RuleType\");\r\n            Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :ruleTypeString:|\"+ruleTypeString+\"|\"+apType+\"|:\"+ruleTypeString.equals(apType));\r\n            if (ruleTypeString.equals(apType)){\r\n                Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :\"+apType+\" Priority:\"+approvalRules.get(i).getFieldValue(\"Priority\"));  \r\n                return approvalRules.get(i).getFieldValue(\"Priority\");\r\n            }           \r\n        }        \r\n        }\r\n}\r\n\r\nprioritize_constraint;";
            Enabled = false;
            Name = "Copy of Prioritize (CAT)";
            Permission = RuleEditor;
        },
        {
            ApprovalRequestType = "CSCL Customs Team";
            Classname = ariba.approvable.rules.FirstConstraint;
            Enabled = false;
            Name = "CSCL First for CompanyCode FT00";
            Permission = RuleEditor;
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptConstraint";
            Condition = "function prioritize_constraint (left, right)\r\n{\r\n    \r\n    var l = left.getType();\r\n    var r = right.getType();\r\n    Log.javascript.debug(\"prioritize_constraint : left.getType() :\"+left.getType());\r\n    Log.javascript.debug(\"prioritize_constraint : right.getType() :\"+right.getType());\r\n    Log.javascript.debug(\"prioritize_constraint : condition 1 :\"+needsEvaluation(left, right));\r\n    if (needsEvaluation(left, right))\r\n    {\r\n    \tLog.javascript.debug(\"prioritize_constraint : left Type  :\"+left.getType());\r\n        Log.javascript.debug(\"prioritize_constraint : right getType  :\"+right.getType());\r\n        \r\n        Log.javascript.debug(\"prioritize_constraint : *** To check left is part of Company Code Approval rules :\"+isPartOfCompanyApprovalRule(left));\r\n        \r\n        Log.javascript.debug(\"prioritize_constraint : *** To check right is part of Company Code Approval rules:\"+isPartOfCompanyApprovalRule(right));\r\n        \r\n        \r\n        if( isPartOfCompanyApprovalRule (left) )\r\n           var  leftPriority = getPriority_Company(left);\r\n        else\r\n           var  leftPriority = 0; \r\n\r\n        if( isPartOfCompanyApprovalRule (right) )\r\n           var  rightPriority = getPriority_Company(right);\r\n        else\r\n           var  rightPriority = 0; \r\n\r\n        Log.javascript.debug(\"prioritize_constraint : getPriority_Company left :\"+leftPriority);\r\n        Log.javascript.debug(\"prioritize_constraint : getPriority_Company right :\"+rightPriority);\r\n        Log.javascript.debug(\"prioritize_constraint : getPriority_Company right :\"+(leftPriority == rightPriority) && (l == r));\r\n        if (leftPriority < rightPriority)\r\n            return true;\r\n        else\r\n\t    if( (leftPriority == rightPriority) && (l == r) && (l.equals('CategoryManager (CAT)') || l.startsWith('SupervisorChain')))\r\n\t\treturn true;\r\n            else\r\n                return false;\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction  isPartOfCompanyApprovalRule(rl)\r\n{\r\n    var sOnBehalfOf = 'OnBehalfOf';\r\n    var sNonCatalog = 'NonCatalog';\r\n    var sCostCenter = 'OtherDepartment';\r\n    var sSupervisor = 'Supervisor';\r\n    var sSupervisorChain = 'SupervisorChain';\r\n    var sCategoryManager = 'CategoryManager';\r\n    var sCategoryManagerChain = 'CategoryManagerChain';\r\n\tvar hazmat = 'Hazmat';\r\n\tvar blockadmin = 'BlockAdmin';\r\n\tvar purchasemanager = 'PurchaseManager';\r\n\tvar capital = 'Capital';\r\n\tvar expense='Expense Approver';\r\n\tvar sBusinessResourceApprover = 'BusinessResourceApprover';\r\n\r\n\r\n    var type = rl.getType();\r\n    Log.javascript.debug(\"prioritize_constraint : isPartOfCompanyApprovalRule  declartion: Type:\"+type);\r\n\r\n        if ( type.startsWith(sOnBehalfOf) || type.startsWith(hazmat) ||type.startsWith(capital) || type.startsWith(blockadmin) ||type.startsWith(purchasemanager) ||type.startsWith(sNonCatalog) || type.startsWith(sCostCenter) || type.startsWith(sSupervisor) || type.startsWith(sSupervisorChain) || type.startsWith(sCategoryManager) || type.startsWith(sCategoryManagerChain) || type.startsWith(expense) || type.startsWith(sBusinessResourceApprover))  \r\n        {\r\n            Log.javascript.debug (\"prioritize_constraint : isPartOfCompanyApprovalRule : true condition\");\t\t\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n            Log.javascript.debug (\"prioritize_constraint : isPartOfCompanyApprovalRule : false condition\");\r\n            return false;\r\n        }\r\n}\r\n\r\nfunction needsEvaluation(left, right)\r\n{\r\n    \r\n    var l = left.getType();\r\n    var r = right.getType();\r\n    Log.javascript.debug (\"prioritize_constraint : inside needsEvaluation_Company\");\r\n    Log.javascript.debug(\"prioritize_constraint : needsEvaluation_Company : left Type  :\"+l);\r\n    Log.javascript.debug(\"prioritize_constraint : needsEvaluation_Company : right getType  :\"+r);\r\n    Log.javascript.debug(\"prioritize_constraint : needsEvaluation_Company :isPartOfCompanyApprovalRule(left):\"+isPartOfCompanyApprovalRule(left));\r\n    Log.javascript.debug(\"prioritize_constraint : needsEvaluation_Company :isPartOfCompanyApprovalRule(right):\"+isPartOfCompanyApprovalRule(right));\r\n\r\n    if(isPartOfCompanyApprovalRule(left) || isPartOfCompanyApprovalRule(right))\r\n    {\r\n        Log.javascript.debug (\"prioritize_constraint :  Needs Evaluation is true : \"+l+\" - \"+r);\r\n        return true;\r\n    }\r\n    else\r\n    {\r\n        Log.javascript.debug (\"prioritize_constraint :  No Need of  Evaluation  : \"+l+\" - \"+r);\r\n        return false;\r\n    }\r\n    \r\n}\r\n\r\nfunction getPriority_Company(ar)\r\n{\r\n    var sOnBehalfOf = 'OnBehalfOf';\r\n    var sNonCatalog = 'NonCatalog';\r\n    var sCostCenter = 'OtherDepartment';\r\n    var sSupervisor = 'Supervisor';\r\n    var sSupervisorChain = 'SupervisorChain';\r\n    var sCategoryManager = 'CategoryManager';\r\n    var sCategoryManagerChain = 'CategoryManagerChain';\r\n    var hazmat = 'Hazmat';\r\n    var blockadmin = 'BlockAdmin';\r\n    var purchasemanager = 'PurchaseManager';\r\n    var capital = 'Capital';\r\n    var expense='Expense Approver';\r\n\tvar sBusinessResourceApprover = 'BusinessResourceApprover';\r\n\r\n    var apType = ar.getType();\r\n    apType = apType.trim();\r\n    Log.javascript.debug(\"prioritize_constraint : in getPriority_Company method  : Type:\"+apType);\r\n\r\n        if(apType.startsWith(sCostCenter))\r\n        {\r\n        var ap = ar.getApprovable();\r\n        var approvalRules = ap.getDottedFieldValue(\"CompanyCode.ApprovalRules\");\r\n        Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :approvalRules.size():\"+approvalRules.size());\r\n        for (var i=0; i < approvalRules.size(); i++)\r\n        {\r\n            var ruleTypeString = approvalRules.get(i).getFieldValue(\"RuleType\");\r\n            Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :ruleTypeString:|\"+ruleTypeString+\"|\"+apType+\"|:\"+ruleTypeString.equals(apType));\r\n            if (ruleTypeString.equals('CostCenter')){\r\n                Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :\"+apType+\" Priority:\"+approvalRules.get(i).getFieldValue(\"Priority\"));  \r\n                return approvalRules.get(i).getFieldValue(\"Priority\");\r\n            }           \r\n        }\r\n        }\r\n        if(apType.startsWith(capital))\r\n        {\r\n        var ap = ar.getApprovable();\r\n        var approvalRules = ap.getDottedFieldValue(\"CompanyCode.ApprovalRules\");\r\n        Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :approvalRules.size():\"+approvalRules.size());\r\n        for (var i=0; i < approvalRules.size(); i++)\r\n        {\r\n            var ruleTypeString = approvalRules.get(i).getFieldValue(\"RuleType\");\r\n            Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :ruleTypeString:|\"+ruleTypeString+\"|\"+apType+\"|:\"+ruleTypeString.equals(apType));\r\n            if (ruleTypeString.equals(capital)){\r\n                Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :\"+apType+\" Priority:\"+approvalRules.get(i).getFieldValue(\"Priority\"));  \r\n                return approvalRules.get(i).getFieldValue(\"Priority\");\r\n            }           \r\n        }\r\n        }else if(apType.startsWith(sOnBehalfOf))\r\n        {\r\n        var ap = ar.getApprovable();\r\n        var approvalRules = ap.getDottedFieldValue(\"CompanyCode.ApprovalRules\");\r\n        Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :approvalRules.size():\"+approvalRules.size());\r\n        for (var i=0; i < approvalRules.size(); i++)\r\n        {\r\n            var ruleTypeString = approvalRules.get(i).getFieldValue(\"RuleType\");\r\n            Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :ruleTypeString:|\"+ruleTypeString+\"|\"+apType+\"|:\"+ruleTypeString.equals(apType));\r\n            if (ruleTypeString.equals(sOnBehalfOf)){\r\n                Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :\"+apType+\" Priority:\"+approvalRules.get(i).getFieldValue(\"Priority\"));  \r\n                return approvalRules.get(i).getFieldValue(\"Priority\");\r\n            }           \r\n        }        \r\n        }else if(apType.startsWith(sNonCatalog))\r\n        {\r\n        var ap = ar.getApprovable();\r\n        var approvalRules = ap.getDottedFieldValue(\"CompanyCode.ApprovalRules\");\r\n        Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :approvalRules.size():\"+approvalRules.size());\r\n        for (var i=0; i < approvalRules.size(); i++)\r\n        {\r\n            var ruleTypeString = approvalRules.get(i).getFieldValue(\"RuleType\");\r\n            Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :ruleTypeString:|\"+ruleTypeString+\"|\"+apType+\"|:\"+ruleTypeString.equals(apType));\r\n            if (ruleTypeString.equals(sNonCatalog)){\r\n                Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :\"+apType+\" Priority:\"+approvalRules.get(i).getFieldValue(\"Priority\"));  \r\n                return approvalRules.get(i).getFieldValue(\"Priority\");\r\n            }           \r\n        } \r\n        \r\n        }else if(apType.equals('Supervisor (CAT)'))\r\n        {\r\n        var ap = ar.getApprovable();\r\n        var approvalRules = ap.getDottedFieldValue(\"CompanyCode.ApprovalRules\");\r\n        Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :approvalRules.size():\"+approvalRules.size());\r\n        for (var i=0; i < approvalRules.size(); i++)\r\n        {\r\n            var ruleTypeString = approvalRules.get(i).getFieldValue(\"RuleType\");\r\n            Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :ruleTypeString:|\"+ruleTypeString+\"|\"+apType+\"|:\"+ruleTypeString.equals(apType));\r\n            if (ruleTypeString.equals(sSupervisor)){\r\n                Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :\"+apType+\" Priority:\"+approvalRules.get(i).getFieldValue(\"Priority\"));  \r\n                return approvalRules.get(i).getFieldValue(\"Priority\");\r\n            }           \r\n        }        \r\n        }else if(apType.startsWith(sSupervisorChain))\r\n        {\r\n        var ap = ar.getApprovable();\r\n        var approvalRules = ap.getDottedFieldValue(\"CompanyCode.ApprovalRules\");\r\n        Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :approvalRules.size():\"+approvalRules.size());\r\n        for (var i=0; i < approvalRules.size(); i++)\r\n        {\r\n            var ruleTypeString = approvalRules.get(i).getFieldValue(\"RuleType\");\r\n            Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :ruleTypeString:|\"+ruleTypeString+\"|\"+apType+\"|:\"+ruleTypeString.equals(apType));\r\n            if (ruleTypeString.equals(sSupervisorChain)){\r\n                Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :\"+apType+\" Priority:\"+approvalRules.get(i).getFieldValue(\"Priority\"));  \r\n                return approvalRules.get(i).getFieldValue(\"Priority\");\r\n            }           \r\n        }        \r\n        }\r\n         else if(apType.startsWith(purchasemanager))\r\n\t\t\t\t{\r\n\t\t\t\tvar ap = ar.getApprovable();\r\n\t\t\t\tvar approvalRules = ap.getDottedFieldValue(\"CompanyCode.ApprovalRules\");\r\n\t\t\t\tLog.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :approvalRules.size():\"+approvalRules.size());\r\n\t\t\t\tfor (var i=0; i < approvalRules.size(); i++)\r\n\t\t\t\t{\r\n\t\t\t\t    var ruleTypeString = approvalRules.get(i).getFieldValue(\"RuleType\");\r\n\t\t\t\t    Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :ruleTypeString:|\"+ruleTypeString+\"|\"+apType+\"|:\"+ruleTypeString.equals(apType));\r\n\t\t\t\t    if (ruleTypeString.equals(purchasemanager)){\r\n\t\t\t\t\tLog.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :\"+apType+\" Priority:\"+approvalRules.get(i).getFieldValue(\"Priority\"));  \r\n\t\t\t\t\treturn approvalRules.get(i).getFieldValue(\"Priority\");\r\n\t\t\t\t    }           \r\n\t\t        }\r\n        }\r\n        else if(apType.startsWith(hazmat))\r\n\t\t{\r\n\t\tvar ap = ar.getApprovable();\r\n\t\tvar approvalRules = ap.getDottedFieldValue(\"CompanyCode.ApprovalRules\");\r\n\t\tLog.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :approvalRules.size():\"+approvalRules.size());\r\n\t\tfor (var i=0; i < approvalRules.size(); i++)\r\n\t\t{\r\n\t\t    var ruleTypeString = approvalRules.get(i).getFieldValue(\"RuleType\");\r\n\t\t    Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :ruleTypeString:|\"+ruleTypeString+\"|\"+apType+\"|:\"+ruleTypeString.equals(apType));\r\n\t\t    if (ruleTypeString.equals(hazmat)){\r\n\t\t\tLog.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :\"+apType+\" Priority:\"+approvalRules.get(i).getFieldValue(\"Priority\"));  \r\n\t\t\treturn approvalRules.get(i).getFieldValue(\"Priority\");\r\n\t\t    }           \r\n\t        }    \r\n\t        }\r\n\t        else if(apType.startsWith(blockadmin))\r\n\t\t{\r\n\t\tvar ap = ar.getApprovable();\r\n\t\tvar approvalRules = ap.getDottedFieldValue(\"CompanyCode.ApprovalRules\");\r\n\t\tLog.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :approvalRules.size():\"+approvalRules.size());\r\n\t\tfor (var i=0; i < approvalRules.size(); i++)\r\n\t\t{\r\n\t\t    var ruleTypeString = approvalRules.get(i).getFieldValue(\"RuleType\");\r\n\t\t    Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :ruleTypeString:|\"+ruleTypeString+\"|\"+apType+\"|:\"+ruleTypeString.equals(apType));\r\n\t\t    if (ruleTypeString.equals(blockadmin)){\r\n\t\t\tLog.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :\"+apType+\" Priority:\"+approvalRules.get(i).getFieldValue(\"Priority\"));  \r\n\t\t\treturn approvalRules.get(i).getFieldValue(\"Priority\");\r\n\t\t    }           \r\n\t\t        }  \r\n\t\t        }else if(apType.equals('CategoryManager (CAT)'))\r\n        {\r\n        var ap = ar.getApprovable();\r\n        var approvalRules = ap.getDottedFieldValue(\"CompanyCode.ApprovalRules\");\r\n        Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :approvalRules.size():\"+approvalRules.size());\r\n        for (var i=0; i < approvalRules.size(); i++)\r\n        {\r\n            var ruleTypeString = approvalRules.get(i).getFieldValue(\"RuleType\");\r\n            Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :ruleTypeString:|\"+ruleTypeString+\"|\"+apType+\"|:\"+ruleTypeString.equals(apType));\r\n            if (ruleTypeString.equals(sCategoryManager)){\r\n                Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :\"+apType+\" Priority:\"+approvalRules.get(i).getFieldValue(\"Priority\"));  \r\n                return approvalRules.get(i).getFieldValue(\"Priority\");\r\n            }           \r\n        }        \r\n        }else if(apType.startsWith(sCategoryManagerChain))\r\n        {\r\n        var ap = ar.getApprovable();\r\n        var approvalRules = ap.getDottedFieldValue(\"CompanyCode.ApprovalRules\");\r\n        Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :approvalRules.size():\"+approvalRules.size());\r\n        for (var i=0; i < approvalRules.size(); i++)\r\n        {\r\n            var ruleTypeString = approvalRules.get(i).getFieldValue(\"RuleType\");\r\n            Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :ruleTypeString:|\"+ruleTypeString+\"|\"+apType+\"|:\"+ruleTypeString.equals(apType));\r\n            if (ruleTypeString.equals(sCategoryManagerChain)){\r\n                Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :\"+apType+\" Priority:\"+approvalRules.get(i).getFieldValue(\"Priority\"));  \r\n                return approvalRules.get(i).getFieldValue(\"Priority\");\r\n            }           \r\n        }        \r\n        } else if(apType.startsWith(sBusinessResourceApprover))\r\n        {\r\n        var ap = ar.getApprovable();\r\n        var approvalRules = ap.getDottedFieldValue(\"CompanyCode.ApprovalRules\");\r\n        Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :approvalRules.size():\"+approvalRules.size());\r\n        for (var i=0; i < approvalRules.size(); i++)\r\n        {\r\n            var ruleTypeString = approvalRules.get(i).getFieldValue(\"RuleType\");\r\n            Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :ruleTypeString:|\"+ruleTypeString+\"|\"+apType+\"|:\"+ruleTypeString.equals(apType));\r\n            if (ruleTypeString.equals(sBusinessResourceApprover)){\r\n                Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :\"+apType+\" Priority:\"+approvalRules.get(i).getFieldValue(\"Priority\"));  \r\n                return approvalRules.get(i).getFieldValue(\"Priority\");\r\n            }           \r\n        }        \r\n        }\r\n        \r\n        else\r\n        {\r\n        var ap = ar.getApprovable();\r\n        var approvalRules = ap.getDottedFieldValue(\"CompanyCode.ApprovalRules\");\r\n        Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :approvalRules.size():\"+approvalRules.size());\r\n        for (var i=0; i < approvalRules.size(); i++)\r\n        {\r\n            var ruleTypeString = approvalRules.get(i).getFieldValue(\"RuleType\");\r\n            Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :ruleTypeString:|\"+ruleTypeString+\"|\"+apType+\"|:\"+ruleTypeString.equals(apType));\r\n            if (ruleTypeString.equals(apType)){\r\n                Log.javascript.debug (\"prioritize_constraint : getPriority_Company in method  :\"+apType+\" Priority:\"+approvalRules.get(i).getFieldValue(\"Priority\"));  \r\n                return approvalRules.get(i).getFieldValue(\"Priority\");\r\n            }           \r\n        }        \r\n        }\r\n}\r\n\r\nprioritize_constraint;";
            Enabled = false;
            Name = "1Copy of Prioritize (CAT)";
            Permission = RuleEditor;
        }
    );
    Current = true;
    EditRule = "function edit_rule (user, a, fields, changes)\r\n{\r\n\tvar OIOSupLoc = \"C2986X0\";\r\n\tvar TRANSCTR = user.hasPermission(\"CatTransactionCtr\");\r\n\tvar PURCHASING = user.hasPermission(\"CatPurchasing\");\r\n\tvar HAZMAT = user.hasPermission(\"CatHazmat\");\r\n\tvar TAX = user.hasPermission(\"CatTax\");\r\n\tvar OWNER = (user.equals(a.getPreparer()) || user.equals(a.getRequester()));\r\n        var RESOURCE = user.hasPermission(\"CatResourceApprover\");\r\n\tvar RESUBMIT = Approvable.EditRequiresResubmit;\r\n\tvar ALLOW = Approvable.EditAllowedWithoutEffects;\t\r\n\tvar REJECT = Approvable.EditNotAllowed;\r\n\t// Coded for Vertex \r\n\tvar calltovertexflag = a.getDottedFieldValue(\"CompanyCode.CallToVertexEnabled\");\r\n\t\r\n\tLog.customer.debug(\"EDIT Rule - user: \" + user.getUniqueName());\r\n\tLog.customer.debug(\"EDIT Rule - preparer: \" + a.getPreparer().getUniqueName());\r\n\tLog.customer.debug(\"EDIT Rule - requester: \" + a.getRequester().getUniqueName());\r\n\tLog.customer.debug(\"EDIT Rule - calltovertexflag: \" + calltovertexflag);\r\n\r\n\tif (fields.isEmpty() && changes.isEmpty()) {\r\n\t\tLog.customer.debug(\"No change so Edit allowed!\");\r\n\t\treturn ALLOW; \r\n\t}\r\n\t\r\n\tif (!fields.isEmpty()) {\r\n\t\tLog.customer.debug(\"Fields.size(): \" + fields.size());\r\n\t\tvar costChange = false;\r\n\t\t\r\n\t\tfor (var i = 0, s = fields.size(); i < s; i++) {\r\n\t\t\tvar fieldToPrint = fields.get(i);\r\n\t\t\tLog.customer.debug(\"FieldPrint: \" + fieldToPrint);\r\n\t\t}\r\n\t\tfor (var i = 0, s = fields.size(); i < s; i++) {\r\n\t\t\tvar field = fields.get(i);\r\n\t\t\tLog.customer.debug(\"Field: \" + field);\r\n// \t\t\t** Removed since adding new line was not getting caught - i.e., must always compare before/after costs ***\t\t\r\n//\t\t\tif (field.equals(\"Price\") || field.equals(\"NotToExceedPrice\") || field.equals(\"Quantity\")) {\r\n//\t\t\t\tLog.customer.debug(\"costChange = TRUE\");\r\n//\t\t\t\tcostChange = true;\r\n//\t\t\t}\t\r\n                       if (field.equals(\"SupplierLocation\")||field.equals(\"CommonCommodityCode\")||field.equals(\"AccountCategory\")) { //must check if changed to IBM OIO\r\n\t\t       \t\t\t\t\treturn RESUBMIT;\r\n\t\t\t\t}\r\n\t\t\tif (TRANSCTR || PURCHASING) {\r\n\t\t\t\tLog.customer.debug(\"EDIT Rule - TRANSCTR or PURCHASING\");\r\n\t\t\t\tif (field.equals(\"CommonCommodityCode\") || field.equals(\"IsHazmat\") \r\n\t\t\t\t       || field.equals(\"ShipTo\") || field.equals(\"CostCenterApprover\") || field.equals(\"CostCenterText\")\r\n\t\t\t\t       || field.equals(\"CriticalAssetDown\") || field.equals(\"AccountCategory\")|| field.equals(\"ISeRFQ\")) {\r\n\t\t\t\t\treturn RESUBMIT;\r\n\t\t\t\t}\r\n\t\t\t\tif (field.equals(\"SupplierLocation\") && isOIOSupplierChange(changes,OIOSupLoc)) { //must check if changed to IBM OIO\r\n\t\t\t\t\treturn RESUBMIT;\r\n\t\t\t\t}\r\n\t\t\t}\t\t\t\r\n\t\t\telse if (HAZMAT) {\r\n\t\t\t\tLog.customer.debug(\"EDIT Rule - HAZMAT\");\r\n\t\t\t\tif (!field.equals(\"Comments\") && !field.equals(\"MSDSNumber\")  \r\n\t\t\t\t\t&& !field.equals(\"IsHazmat\") && !field.equals(\"HazmatWeight\") \r\n\t\t\t\t\t&& !field.equals(\"IsSubmitting\") && !field.equals(\"Description\")\r\n\t\t\t\t\t&& !field.equals(\"LineItems\")\r\n\t\t\t\t\t&& !field.equals(\"NeedBy\") && !field.equals(\"Text\") && !field.equals(\"LineItemType\")\r\n\t\t\t\t     \t&& !field.equals(\"Attachments\") && !field.equals(\"ExternalComment\")\r\n\t\t\t\t     \t&& !field.equals(\"LineLevelExternalComments\") \r\n\t\t\t\t     \t&& !field.equals(\"HoldTillDate\")) {\r\n\t\t\t\t\t\t//SDey , Ariba Inc : Fix for CurrencyConversionRate changes \r\n\t\t\t\t\t\tif(!costIncreased(changes) && (field.equals(\"CustomPrice\") || field.equals(\"Price\") || field.equals(\"NotToExceedPrice\") ||\r\n\t\t\t\t\t\tfield.equals(\"NTEAmount\") || field.equals(\"Amount\") || field.equals(\"TotalCost\") || field.equals(\"TaxAmount\")||\r\n\t\t\t\t\t\tfield.equals(\"ConversionDate\") || field.equals(\"ApproxAmountInBaseCurrency\") || \r\n\t\t\t\t\t\tfield.equals(\"TaxCode\") || field.equals(\"PreviousSafeApprovalRequests\") ||\r\n\t\t\t\t\t\tfield.equals(\"CategoryTemplateLineItemVector\") || field.equals(\"Type\") ||\r\n\t\t\t\t\t\tfield.equals(\"AmountInReportingCurrency\") || field.equals(\"CostCenterApprover\") )){\r\n\t\t\t\t\t\t\tLog.customer.debug(\"EDIT Rule - HAZMAT : there is no increment of cost however currency conversion rate has changed\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\treturn REJECT;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//SDey , Ariba Inc : Fix for CurrencyConversionRate changes\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}\r\n\t\t\t//currently not used for SAP, but can be used in future.\r\n\t\t\telse if (TAX) {\r\n\t\t\t\tLog.customer.debug(\"EDIT Rule - TAX\");\r\n\t\t\t\tif (!field.equals(\"Comments\") && !field.equals(\"TaxCode\") && !field.equals(\"TaxRate\") \r\n\t\t\t\t     && !field.equals(\"TaxBase\") && !field.equals(\"TaxState\") && !field.equals(\"TaxCodeMessage\") \r\n\t\t\t\t     && !field.equals(\"AssessTaxButton\") && !field.equals(\"TaxCodeOverride\") \r\n\t\t\t\t     && !field.equals(\"TaxAllFieldsOverride\") && !field.equals(\"TaxOverrideFlag\")\r\n\t\t\t\t     && !field.equals(\"TaxApprovalCode\") && !field.equals(\"TaxApprovalMessage\") \r\n\t\t\t\t     && !field.equals(\"AssessTaxMessage\")\r\n\t\t\t\t     && !field.equals(\"DerivedTaxSummary\") && !field.equals(\"IsSubmitting\")\r\n\t\t\t\t     && !field.equals(\"LineItems\") && !field.equals(\"TotalCost\")\r\n\t\t\t\t     && !field.equals(\"NeedBy\") && !field.equals(\"Text\")\r\n\t\t\t\t     && !field.equals(\"ExternalComment\")\r\n\t\t\t\t     && !field.equals(\"LineLevelExternalComments\")) {\r\n\t\t\t\t\treturn REJECT;\r\n\t\t\t\t} \r\n\t\t\t}\t\r\n\t\t\telse if (OWNER) {\r\n\t\t\t\tLog.customer.debug(\"EDIT Rule - OWNER\");\r\n\t\t\t\tif (field.equals(\"CommonCommodityCode\") || field.equals(\"IsHazmat\")\r\n\t\t\t\t       || field.equals(\"ShipTo\") || field.equals(\"LineItemType\") \r\n\t\t\t\t       || field.equals(\"Supplier\") || field.equals(\"CostCenterApprover\")\r\n\t\t\t\t       || field.equals(\"CriticalAssetDown\") || field.equals(\"AccountCategory\") || field.equals(\"CostCenterText\")) {\r\n\t\t\t\t\treturn RESUBMIT;\t\t\t\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}\r\n\t\t\telse if (RESOURCE) {\r\n\t\t\t\tLog.customer.debug(\"EDIT Rule - RESOURCE\");\r\n\t\t\t\tif (!field.equals(\"Comments\") \r\n\t\t\t\t\t\t&& !field.equals(\"CompanyCode\") \r\n\t\t\t\t\t\t&& !field.equals(\"CustomCatalogPurchaseOrg\")\r\n\t\t\t\t\t\t&& !field.equals(\"AccountCategory\")\r\n\t\t\t\t\t\t&& !field.equals(\"CostCenterText\")\r\n\t\t\t\t\t\t&& !field.equals(\"GeneralLedgerText\")\r\n\t\t\t\t\t\t&& !field.equals(\"InternalOrderText\")\r\n\t\t\t\t\t\t&& !field.equals(\"WBSElementText\")\r\n\t\t\t\t\t\t&& !field.equals(\"TradingPartner\") \r\n\t\t\t\t\t\t&& !field.equals(\"LineItemType\") \r\n\t\t\t\t\t\t&& !field.equals(\"ValidateAccounting\") \r\n\t\t\t\t\t\t&& !field.equals(\"ValidateAccountingMessage\") \r\n\t\t\t\t\t\t&& !field.equals(\"CostCenterApprover\") \r\n                                \t\t&& !field.equals(\"Order\") ) {\r\n\t\t\t\t\treturn REJECT;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\t\r\n\t\t\t\r\n             if ((TRANSCTR || PURCHASING) && (calltovertexflag == \"PR\" || calltovertexflag == \"IR\" || calltovertexflag == \"PIB\"))\r\n               {\t\t\t\r\n\t\t\t   Log.customer.debug(\"**Inside new condition**: \");\r\n\t\t\t   if (field.equals(\"TaxCode\")) \r\n\t\t\t\t{\r\n     \t\t      Log.customer.debug(\"**Field changed is taxcode**: \");\r\n\t\t\t\t  return RESUBMIT;\r\n\t\t\t\t } \r\n               }\r\n\t\t\r\n\t\tif (true) {  // must do before & after cost comparison (including Not-To-Exceed amounts)\r\n\t\t\tvar costDelta = getTotalCostChange(changes);\r\n\t\t\tLog.customer.debug(\"**costDelta**: \" + costDelta);\r\n\t\t\tvar nteDelta = getNTECostChange(changes);\r\n\t\t\tLog.customer.debug(\"**nteDelta**: \" + nteDelta);\r\n\t\t\tcostDelta = costDelta.add(nteDelta);\r\n\t\t\tLog.customer.debug(\"**Final costDelta**: \" + costDelta);\r\n//\t\t\tLog.customer.debug(\"**Final costDelta (BD)**: \" + costDelta.getAmount());\r\n\t\t\tif (costDelta.getAmount().compareTo(new java.math.BigDecimal(0)) > 0) {  // means net cost increase\r\n\t\t\t\tLog.customer.debug(\"NET COST INCREASE, MUST RESUBMIT!\");\r\n\t\t\t\treturn RESUBMIT;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (TRANSCTR || PURCHASING || HAZMAT || TAX || OWNER || RESOURCE) {\r\n\t\tLog.customer.debug(\"EDIT Rule - POWER USER & NO KEY FIELDS --> ALLOW EDIT!\")\r\n\t\treturn ALLOW;\r\n\t}\r\n\tLog.customer.debug(\"EDIT Rule - NO SPECIAL USER --> REJECT EDIT!\")\t\r\n\treturn REJECT;\r\n}\r\nedit_rule;\r\n\r\nfunction getTotalCostChange (changeslist) \r\n{\r\n\tvar origCost = makeMoneyBase(0);\r\n\tvar finalCost = makeMoneyBase (0);\r\n\tfor (i = 0, numOfElements = changeslist.size(); i < numOfElements; i++) {\r\n\t\tvar element = changeslist.get(i);\r\n\t\tif (element.fieldName.equals(\"TotalCost\")) {\r\n\t\t\torigCost = element.old;\r\n\t\t\t\tbreak; \r\n\t\t}\r\n\t}\t\t\t\t\t \t\r\n\tfor (i = 1, numOfElements = changeslist.size(); i <= numOfElements; i++) {\r\n\t\tvar element = changeslist.get(numOfElements - i);\r\n\t\tif (element.fieldName == \"TotalCost\") {\r\n\t\t\tfinalCost = element.element;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n//\tLog.customer.debug(\"Original Cost: \" + origCost); \r\n//\tLog.customer.debug(\"Final Cost: \" + finalCost);\r\n\treturn ariba.basic.core.Money.subtract(finalCost,origCost);\r\n}\t\r\n\r\nfunction getNTECostChange (changeslist) \r\n{\t\t\r\n\tvar origNTE = makeMoneyBase(0);\r\n\tvar finalNTE = makeMoneyBase(0);\r\n\tfor (i = 0, numOfElements = changeslist.size(); i < numOfElements; i++) {\r\n\t\tvar element = changeslist.get(i);\r\n//\t\tLog.customer.debug(\"Element: \" + element); \t\t\t\r\n\t\tif (element.fieldName.equals(\"NTEAmount\")) {\r\n\t\t\tif (element.old != null) {\r\n\t\t\t\torigNTE = origNTE.add(element.old);\r\n//\t\t\t\tLog.customer.debug(\"Updated Original NTE: \" + origNTE);\r\n\t\t\t}\r\n\t\t}\t\r\n\t}\r\n\tfor (i = 1, numOfElements = changeslist.size(); i <= numOfElements; i++) {\r\n\t\tvar element = changeslist.get(numOfElements - i);\r\n//\t\tLog.customer.debug(\"Element: \" + element); \t\r\n\t\tif (element.fieldName == \"NTEAmount\") {\r\n\t\t\tfinalNTE = finalNTE.add(element.element);\r\n//\t\t\tLog.customer.debug(\"Updated Final NTE: \" + finalNTE); \r\n\t\t}\r\n\t}\t\t\r\n//\tLog.customer.debug(\"TOTAL Original NTE: \" + origNTE); \r\n//\tLog.customer.debug(\"TOTAL Final NTE: \" + finalNTE);\r\n\treturn ariba.basic.core.Money.subtract(finalNTE,origNTE);\r\n}\r\n\r\nfunction isOIOSupplierChange(changeslist,supplierLoc) \r\n{\t\r\n\tvar isOIO = false;\r\n\tvar oioLoc = Base.getService().objectMatchingUniqueName(\"ariba.common.core.SupplierLocation\",\r\n                                Base.getSession().getPartition(),supplierLoc);\r\n    Log.customer.debug(\"OIO Loc: \" + oioLoc);   \r\n    if (oioLoc != null) {\r\n    \tvar oioLocID = oioLoc.getBaseId();\r\n\t\tLog.customer.debug(\"OIO BaseId: \" + oioLocID);      \t\r\n    \tif (oioLocID != null) {\r\n\t\t\tfor (i = 1, numOfElements = changeslist.size(); i <= numOfElements; i++) {\r\n\t\t\t\tvar element = changeslist.get(numOfElements - i);\r\n\t\t\t\tLog.customer.debug(\"Element: \" + element); \t\t\t\r\n\t\t\t\tif (element.fieldName == \"SupplierLocation\") {\r\n\t\t\t\t\tvar newLocID = element.element;\r\n\t\t\t\t\tLog.customer.debug(\"newLocID: \" + newLocID);\r\n\t\t\t\t\tif (oioLocID==newLocID) {\r\n\t\t\t\t\t\tisOIO = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\t\t\t\r\n\treturn isOIO;\t\t\r\n}\r\n\r\nfunction costIncreased (changeslist) \r\n{\r\n\tvar hasIncrease = false;\r\n\tif (changeslist != null && !changeslist.isEmpty()) {\r\n\t\tvar origCost = makeMoneyBase(0);\r\n\t\tvar finalCost = makeMoneyBase (0);\r\n\t\tfor (i = 0, numOfElements = changeslist.size(); i < numOfElements; i++) {\r\n\t\t\tvar element = changeslist.get(i);\r\n\t\t\tif (element.fieldName.equals(\"TotalCost\")\t) {\r\n\t\t\t\torigCost = element.old;\r\n\t\t\t\t\tbreak; \r\n\t\t\t}\r\n\t\t}\t\t\t\t\t \t\r\n\t\tfor (i = 1, numOfElements = changeslist.size(); i <= numOfElements; i++) {\r\n\t\t\tvar element = changeslist.get(numOfElements - i);\r\n\t\t\tif (element.fieldName == \"TotalCost\") {\r\n\t\t\t\tfinalCost = element.element;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tLog.customer.debug(\"Original Cost: \" + origCost); \r\n\t\tLog.customer.debug(\"Final Cost: \" + finalCost);\r\n\t\tif (finalCost.compareTo(origCost) > 0) {\r\n\t\t\thasIncrease = true;\r\n\t\t}\r\n\t}\r\n\treturn hasIncrease;\r\n}";
    EditRulePermission = RuleEditor;
    EditRuleType = JavaScript;
    Edits = ( );
    Filters = (
        {
            Classname = "ariba.approvable.rules.JavaScriptFilterRule";
            Enabled = false;
            Filter = "function turnOffApprovals (r, ar, filtered)\r\n{\r\n\tvar type = ar.getType();\r\n\tif (!isType(type,\"Hazmat\")) {\r\n\tLog.javascript.debug(\"FILTER ******* WORKING\");\r\n\t\treturn ar; \r\n\t}\r\n\treturn null; \r\n}\r\nturnOffApprovals;";
            Name = "TurnOffApprovals (CAT)";
            Permission = RuleEditor;
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptFilterRule";
            Enabled = false;
            Filter = "function handleEmergency (r, ar, filtered)\r\n{\t\r\n\tif ( ( (String)(r.getTotalCost().getCurrency().getDottedFieldValue(\"UniqueName\")) ).equalsIgnoreCase(\"USD\") )\r\n\t{\r\n\t\tLog.javascript.debug(\"Handle Emergency Filter **** Total In USD: \" + r.getTotalCost());\r\n\t\tLog.javascript.debug(\"Handle Emergency Filter **** UL In GBP: 25,000 USD\");\r\n\r\n\t\tif (isEmergency(r) && !isType(ar.getType(),\"NonCatalog\")  && !isType(ar.getType(),\"Hazmat\")) \r\n\t\t{\r\n\t\t\tif (r.getTotalCost().compareTo(25000) <= 0) \r\n\t\t\t{\r\n\t\t\t\tLog.javascript.debug(\"Handle Emergency Filter **** Total is less than USD UL\");\r\n\t\t\t\tar.setApprovalRequired(false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\telse\r\n\t{\r\n\t\tLog.javascript.debug(\"Handle Emergency Filter **** Non-USD Requisition: \" );\r\n\t\tvar limitBD = new BigDecimal(25000.00);\r\n\t\tvar currency = Currency.getCurrencyFromUniqueName(\"USD\");\r\n\t\t//var limit = new ariba.basic.core.Money(25000, \"USD\");\r\n\t\tvar limit = new ariba.basic.core.Money(limitBD, currency);\t\t\r\n\t\tif (limit != null) \r\n\t\t{\r\n\t\t\tvar total = r.getTotalCost().getApproxAmountInBaseCurrency();\r\n\t\t\tLog.javascript.debug(\"Handle Emergency Filter **** Total In BaseCurrency: \" + total);\r\n\t\t\tresult = limit.getApproxAmountInBaseCurrency();\r\n\t\t\tLog.javascript.debug(\"Handle Emergency Filter **** UL In BaseCurrency: \" + result);\r\n\t\t\tif (isEmergency(r) && !isType(ar.getType(),\"NonCatalog\")  && !isType(ar.getType(),\"Hazmat\")) \t\t\t{\r\n\t\t\t\tif (total.compareTo(result) <= 0) \r\n\t\t\t\t{\r\n\t\t\t\t\tLog.javascript.debug(\"Handle Emergency Filter **** Total is less than UL\");\r\n\t\t\t\t\tar.setApprovalRequired(false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn null;\r\n}\r\nhandleEmergency;";
            Name = "HandleEmergency (CAT)";
            Permission = RuleEditor;
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptFilterRule";
            Enabled = false;
            Filter = "function handleCapitalOrders (r, ar, filtered)\r\n{\r\n    var type = ar.getType();\r\n    Log.javascript.debug(\"handleCapitalOrders: areAllLineItemsCapital?\" + areAllLineItemsCapital(r));\r\n    if (areAllLineItemsCapital(r) && !isType(type,\"NonCatalog\") && !isType(type,\"OIOAgreement\")\r\n        && !isType(type,\"Hazmat\")\r\n                && !isType(type, \"BusinessResourceApprover\") && !isType(type,\"PavingTransactionTeam\")) {\r\n        ar.setApprovalRequired(false);\r\n    }\r\n    return null;\r\n}\r\nhandleCapitalOrders;";
            Name = "HandleCapitalOrders (CAT)";
            Permission = RuleEditor;
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptFilterRule";
            Enabled = false;
            Filter = "function handleRevision (r, ar, filtered)\r\n{\r\n\tvar ver1 = r.getPreviousVersion();\r\n\tLog.javascript.debug(\"FILTER (handleRevision) **** V1: \" + ver1);\r\n\tif  (ver1 != null) {\r\n\t\tvar type = ar.getType();\r\n\t\tvar reason = ar.getReasonKey();\r\n\t\tLog.javascript.debug(\"FILTER (handleRevision) **** ar type: \" + type);\r\n\t\tLog.javascript.debug(\"FILTER (handleRevision) **** ar reasonKey: \" + reason);\t\t\r\n\t\tif (isType(type,\"Supervisor\") || isType(type,\"Category\")) {\r\n\t\t\tvar total = r.getTotalCost();\r\n\t\t\tvar nte_total = config.java.common.CatCommonUtil.getNotToExceedTotal(r.getLineItems());\r\n\t\t\tLog.javascript.debug(\"FILTER (handleRevision) **** total / nte_total: \" + total + nte_total);\r\n\t\t\ttotal = ariba.basic.core.Money.add(total, nte_total);\r\n\t\t\tLog.javascript.debug(\"FILTER (handleRevision) **** total (w/nte): \" + total);\r\n\t\t\tvar totalV1 = ver1.getTotalCost();\r\n\t\t\tLog.javascript.debug(\"FILTER (handleRevision) **** V1 total: \" + totalV1);\r\n\t\t\tnte_total = config.java.common.CatCommonUtil.getNotToExceedTotal(ver1.getLineItems());\r\n\t\t\tLog.javascript.debug(\"FILTER (handleRevision) **** V1 nte_total: \" + nte_total);\r\n\t\t\ttotalV1 = ariba.basic.core.Money.add(totalV1, nte_total);\r\n\t\t\tLog.javascript.debug(\"FILTER (handleRevision) **** V1 total (w/nte): \" + totalV1);\r\n\t\t\t\r\n\t\t\tif (total.compareTo(totalV1) == 1) {   // cost increased so must be reapproved\r\n\t\t\t\tLog.javascript.debug(\"FILTER (handleRevision) **** Cost Increase, Supervisor/Chain remains!\");\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (isType(type,\"Hazmat\")) {\r\n\t\t\t\tvar sameShipping = false;\r\n\t\t\t\tvar shipto = ar.getContext().getShipTo().getUniqueName();\r\n\t\t\t\tLog.javascript.debug(\"FILTER (handleRevision) **** Hazmat shipTo: \" + shipto);\r\n\t\t\t\tvar approvals = config.java.common.CatCommonUtil.getAllApprovalRequests(ver1);\r\n\t\t\t\tvar count = approvals.size();\r\n\t\t\t\tLog.javascript.debug(\"FILTER (handleRevision) **** V1 Approvals (count): \" + count);\r\n\t\t\t\twhile (count > 0) {\r\n\t\t\t\t\tvar arV1 = approvals.get(count-1);\r\n\t\t\t\t\tvar reasonV1 = arV1.getReasonKey();\r\n\t\t\t\t\tLog.javascript.debug(\"FILTER (handleRevision) **** reasonKey (V1): \" + reasonV1);\r\n\t\t\t\t\tif (reasonV1.indexOf(\"HazMat\") > -1) {\r\n\t\t\t\t\t\treasonV1 = arV1.getFieldValue(\"Reason\");\r\n\t\t\t\t\t\tLog.javascript.debug(\"FILTER (handleRevision) **** reason (V1): \" + reasonV1);\r\n//\t\t\t\t\t\tvar shiptoV1 = arV1.getContext().getShipTo();  +++ NOT AVAILABLE FOR USE +++\r\n//\t\t\t\t\t\tLog.javascript.debug(\"FILTER (handleRevision) **** Hazmat shipTo(V1): \" + shiptoV1);\r\n\t\t\t\t\t\tif (reasonV1.indexOf(shipto) > -1) {\r\n\t\t\t\t\t\t\tsameShipping = true;\r\n\t\t\t\t\t\t\tLog.javascript.debug(\"FILTER (handleRevision) **** FOUND Same ShipTo!\");\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcount--;\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\tif (!sameShipping) {  //  hazmat not approved for this shipTo\r\n\t\t\t\t\tLog.javascript.debug(\"FILTER (handleRevision) **** ShipTo Different, Hazmat remains!\");\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (isType(type,\"Tax\")) {\r\n\t\t\t\t\tLog.javascript.debug(\"FILTER (handleRevision) **** TAX, so always remains!\");\t\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (ar.getFieldValue(\"Creator\") != null) {\r\n\t\t\t\t\t\tLog.javascript.debug(\"FILTER (handleRevision) **** User-added approver so remains!\");\t\r\n\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn ar;\r\n\t}\r\n\treturn null;\r\n}\r\nhandleRevision;";
            Name = "HandleRevisions (CAT)";
            Permission = RuleEditor;
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptFilterRule";
            Enabled = false;
            Filter = "/* \r\nRequirement: \r\nRemove duplicate approvers when required status is different.\r\n\r\nDesign:\r\nEvaluate each approval request for a dup (retain the required one as valid).\r\n\r\nChange History:\r\nChange By\t\tChange Date \tDescription\r\n------------------------------------------------------------------------\r\nNagendra\t\tApr-09-02\tCreated \r\n\r\n*/ \r\n\r\nfunction removeDuplicates_filter (r, ar, filtered)\r\n{\r\n\tvar approver = ar.getApprover();\r\n\tvar arRequired = ar.getApprovalRequired();\r\n\tfor (var i=0; i < filtered.size(); i++)\r\n\t{\r\n\t\tvar arf = filtered.get(i);\r\n\t\tarfApprover = arf.getApprover();\r\n\t\tarfRequired = arf.getApprovalRequired();\r\n\t\tif (arfApprover.equals(approver) && !arfRequired && arfRequired != arRequired)\r\n\t\t{\r\n\t\t\tarf.setApprovalRequired(true);\r\n\t\t\treturn ar;\r\n\t\t}\r\n\t\telse if (arfApprover.equals(approver))\r\n\t\t\treturn ar;\r\n\t}\r\n\treturn null;\t\r\n}\r\nremoveDuplicates_filter;";
            Name = "RmoveDuplicates(CAT)";
            Permission = RuleEditor;
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptFilterRule";
            Enabled = true;
            Filter = "function handleERFQ (r, ar, filtered)\r\n{\r\n  var preparer = r.getPreparer();\r\n  var isPurchasing = false;\r\n  Log.javascript.debug(\r\n    \"Handle ERFQ Filter ::: Current User: \" + preparer );\r\n  isPurchasing = preparer .hasPermission(\"CatPurchasing\");\r\n  Log.javascript.debug(\r\n    \"Handle ERFQ Filter ::: isPurchasing: \" + isPurchasing);\r\n\r\n  if (isERFQ(r))\r\n  {\r\n    if (!isType(ar.getType(),\"NonCatalog (CAT)\") && \r\n        !isType(ar.getType(),\"ERFQPurchasingFinal (CAT)\") &&\r\n        !isType(ar.getType(),\"SupplierCustomApprover (CAT)\"))\r\n    {\r\n      Log.javascript.debug(\r\n        \"Handle ERFQ Filter ::: isERFQ: \" + isERFQ(r));\r\n      Log.javascript.debug(\r\n        \"Handle ERFQ Filter ::: Turn off for type: \" + ar.getType());\r\n      ar.setApprovalRequired(false);\r\n      return ar;\r\n    }\r\n    if (isType(ar.getType(),\"NonCatalog (CAT)\") && isPurchasing)\r\n    {\r\n    \t// Removing as the ERFQ is created by Purchasing\r\n    \treturn ar;\r\n    }\r\n  }\r\n  Log.javascript.debug(\r\n    \"Handle ERFQ Filter ::: IsERFQ: \" + isERFQ(r));\r\n  Log.javascript.debug(\r\n    \"Handle ERFQ Filter ::: Leave on for type: \" + ar.getType());\r\n  return null;\r\n}\r\nhandleERFQ;";
            Name = "HandleERFQ (CAT)";
            Permission = RuleEditor;
        }
    );
    LoadDB = true;
    Name = "CAT SAP Requisition Rules";
    Simples = (
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "function baseobject_condition (r)\r\n{ \r\nreturn false;\r\n}\r\nbaseobject_condition;\r\n\r\n\r\n//  DEFINITIONS\r\n\r\nvar Fmt = ariba.util.core.Fmt;\r\nvar Base = ariba.base.core.Base;\r\nvar ListUtil = ariba.util.core.ListUtil;\r\nvar StringUtil = ariba.util.core.StringUtil;\r\nvar CommonUser = ariba.common.core.User;\r\nvar ArrayList = java.util.ArrayList;\r\nvar Iterator = java.util.Iterator;\r\nvar BooleanFormatter = ariba.util.formatter.BooleanFormatter;\r\nvar BigDecimalFormatter = ariba.util.formatter.BigDecimalFormatter;\r\nvar CatUtil = config.java.common.CatCommonUtil;\r\n\r\n\r\n//  VARIABLES \r\n\r\nvar cc_VALUE = null;\r\nvar cc_TYPE = 0;\r\nvar capital = \"E0290\";\r\nvar ShipToList = new ArrayList();\r\nvar Role_DataMaintainer = Role.getRole(\"Data Maintainer\");\r\nvar Role_TransCenterNA = Role.getRole(\"Transaction Center (US)\"); \r\nvar Rules_CommodityApprovalTable = MakeCSVTable(\"data/CATCommodityApproval.csv\", ListUtil.list(\" \",\"0\",\"0\",\" \"));\r\nvar Rules_HazmatUOMTable = MakeCSVTable(\"data/CATHazmatUnitOfMeasure.csv\",ListUtil.list(\" \"));\r\nvar Rules_ApprovalLimitsTable = MakeCSVTable(\"data/CATApprovalLimits.csv\", ListUtil.list(\"\",\"0\"));\r\nvar HazmatApproverFile = \"config/variants/vcsv1/data/CATHazmatApprovers.csv\";\t\r\n\r\n\r\n//  FUNCTIONS \r\n\r\nfunction isEmergency (r)\r\n{\r\n\treturn BooleanFormatter.getBooleanValue(r.getFieldValue(\"EmergencyBuy\"));\r\n}\r\n\r\nfunction isType (type, name) \r\n{\r\n    return type.startsWith(name);\r\n}\r\n\r\nfunction isTypeEnding (type, string)\r\n{\r\n    return type.endsWith(string);\r\n}\r\n\r\nfunction IsAdHoc (li) \r\n{\r\n    return li.getIsAdHoc();\r\n}\r\n\r\nfunction getUserExpenseLimit (approvalcode)\r\n{\r\n\tvar value  = makeMoneyBase(0);\r\n\tvar row = Rules_ApprovalLimitsTable(approvalcode);\r\n\tLog.javascript.debug(\"UserExpenseLimit **** row: \" + row);\r\n\tif (!StringUtil.nullOrEmptyOrBlankString(row)) {\r\n\t\tvalue = makeMoneyBase(parseInt(row.get(1)));\r\n\t}\r\n\treturn value;\r\n}\r\n\r\nfunction isCapital (sa)\r\n{\r\n\tvar isCap = false;\r\n\tvar dept = sa.getFieldValue(\"Department\");\r\n\tif (dept != null && dept.equals(capital)) {\r\n\t\tisCap = true;\r\n\t}\r\n\treturn isCap;\r\n}\r\n\r\nfunction getUserAccounting (user, partition)\r\n{\r\n\tvar acctng = null;\r\n\tvar partuser = CommonUser.getPartitionedUser(user, partition);\r\n\tif (partuser != null) {\r\n\t\tacctng = partuser.getAccounting();\r\n\t}\r\n\treturn acctng;\r\n}\r\n\r\nfunction getCodeOrParentCode (key, column)\r\n{\r\n\t\tvar code = null;\r\n\t\tvar row = Rules_CommodityApprovalTable(key.getUniqueName());\r\n\t\tLog.javascript.debug(\"COMMODITY **** INITIAL row: \" + row);\r\n\t\tif (!StringUtil.nullOrEmptyOrBlankString(row.get(0))) {\r\n\t\t\tLog.javascript.debug(\"COMMODITY **** INITIAL value: \" + row.get(column));\r\n\t\t\tif (column <= 2 && row.get(column) != \"\") {\t\t\r\n\t\t\t\tcode = key.getUniqueName();\r\n\t\t\t}\r\n\t\t\tif (column == 3 && !StringUtil.nullOrEmptyorBlankString(row.get(column)))  {\r\n\t\t\t\tcode = key.getUniqueName();\r\n\t\t\t} \r\n\t\t} \r\n\t\tif (code == null) {\r\n\t\t\tvar parent = getParentCode(key, column);\r\n\t\t\tif (parent != null) {\r\n\t\t\t\tLog.javascript.debug(\"COMMODITY **** USING PARENT CODE\");\r\n\t\t\t\tcode = parent;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn code;\r\n}\t\r\n\r\nfunction getParentCode (key, column)\r\n{\r\n\tvar pcode = null;\r\n\tvar parent = key.getParent();\r\n\twhile (parent != null && parent.getUniqueName().length() >= 4) {\r\n\t\trow = Rules_CommodityApprovalTable(parent.getUniqueName());\r\n\t\tLog.javascript.debug(\"COMMODITY **** row: \" + row);\r\n\t\tif (!StringUtil.nullOrEmptyOrBlankString(row.get(0))) {\r\n\t\t\tif (row.get(column) != \"\") {\t\t\r\n\t\t\t\tpcode = parent.getUniqueName();\r\n\t\t\t\tLog.javascript.debug(\"COMMODITY **** BREAK NOW\");\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tparent = parent.getParent();\r\n\t}\r\n\tLog.javascript.debug(\"COMMODITY **** Returning Parent Code = \" + pcode);\r\n\treturn pcode;\r\n}\r\n\r\nfunction getCategoryThreshold (key, column)\r\n{\r\n\tvar threshold = null;\r\n\tvar row = Rules_CommodityApprovalTable(key);\r\n\tLog.javascript.debug(\"COMMODITY **** row thres: \" + row);\r\n\tif (row.get(column) != \"\") {\r\n\t\tLog.javascript.debug(\"COMMODITY **** row.get(column): \" + row.get(column));\r\n\t\tthreshold = makeMoneyBase(parseInt(row.get(column)));\r\n\t}\r\n\treturn threshold;\t\t\r\n}\r\n\r\nfunction getCategoryApprover (key)\r\n{\r\n\tvar approver = null;\r\n\tvar row = Rules_CommodityApprovalTable(key);\r\n\tif (row.get(3) != \"\") {\r\n\t\tvar unique = row.get(3);\r\n\t\tif (!StringUtil.nullOrEmptyOrBlankString(unique)) {\r\n\t\t\tapprover = Role.getRole(unique);\r\n\t\t}\r\n\t}\r\n\treturn approver;\t\t\r\n}\t\r\n\r\nfunction isHazmatUOM (unique)\r\n{\r\n\tvar suspectUOM = false;\r\n\tvar row = Rules_HazmatUOMTable(unique);\r\n\tLog.javascript.debug(\"HAZMAT **** row: \" + row);\r\n\tLog.javascript.debug(\"HAZMAT **** row nullorEmpty? \" + StringUtil.nullOrEmptyOrBlankString(row.get(0)));\r\n\tif (!StringUtil.nullOrEmptyOrBlankString(row.get(0))) {\r\n\t\tsuspectUOM = true;\r\n\t}\r\n\treturn suspectUOM;\r\n}\r\n\r\nfunction costIncreased (changeslist) \r\n{\r\n\tvar hasIncrease = false;\r\n\tif (changeslist != null && !changeslist.isEmpty()) {\r\n\t\tvar origCost = makeMoneyBase(0);\r\n\t\tvar finalCost = makeMoneyBase (0);\r\n\t\tfor (i = 0, numOfElements = changeslist.size(); i < numOfElements; i++) {\r\n\t\t\tvar element = changeslist.get(i);\r\n\t\t\tif (element.fieldName.equals(\"TotalCost\")\t) {\r\n\t\t\t\torigCost = element.old;\r\n\t\t\t\t\tbreak; \r\n\t\t\t}\r\n\t\t}\t\t\t\t\t \t\r\n\t\tfor (i = 1, numOfElements = changeslist.size(); i <= numOfElements; i++) {\r\n\t\t\tvar element = changeslist.get(numOfElements - i);\r\n\t\t\tif (element.fieldName == \"TotalCost\") {\r\n\t\t\t\tfinalCost = element.element;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tLog.customer.debug(\"Original Cost: \" + origCost); \r\n\t\tLog.customer.debug(\"Final Cost: \" + finalCost);\r\n\t\tif (finalCost.compareTo(origCost) > 0) {\r\n\t\t\thasIncrease = true;\r\n\t\t}\r\n\t}\r\n\treturn hasIncrease;\r\n}\r\n\r\nfunction getHazmatApproversForFacility (key)\r\n{\r\n\tvar shortlist = new ArrayList();\r\n\tvar approvers = CatUtil.makeValueListFromFile(key, HazmatApproverFile);\r\n\tif (approvers != null)\r\n\t\tshortlist = approvers;\r\n\treturn shortlist;\t\t\r\n}\t\r\n\r\nfunction areAllLineItemsCapital (r)\r\n{\r\n    Log.javascript.debug(\"INSIDE areAllLineItemsCapital **** \");\r\n    var capital = true;\r\n    Log.javascript.debug(\"areAllLineItemsCapital: Capital = \" + capital);\r\n    Log.javascript.debug(\"areAllLineItemsCapital: Size = \" + r.getLineItems().size());\r\n    for (i = 0; i < r.getLineItems().size(); i++) {\r\n        var rli = r.getLineItems().get(i);\r\n        Log.javascript.debug(\"areAllLineItemsCapital: RLI = \" + rli);\r\n        var accountType = rli.getFieldValue(\"AccountType\");\r\n        Log.javascript.debug(\"areAllLineItemsCapital: AccType= \" + accountType);\r\n        if (accountType != null && !accountType.equals(\"Capital\")) {\r\n            Log.javascript.debug(\"areAllLineItemsCapital: setting Cap to false\");\r\n            capital = false;\r\n        }\r\n    }\r\n    return capital;\r\n}";
            Enabled = false;
            Name = "BaseObject Functions (CAT)";
            Permission = RuleEditor;
            Result = "function baseobject_action (r)\r\n{  }\r\nbaseobject_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "function onBehalfOf_condition (r) \r\n{\r\n//PO Conversion condition\r\nif(r.getFieldValue(\"POComment\") != null)\r\n{\r\n    return false;\r\n}\r\n    return isCompanyApprovalRule(r, \"OnBehalfOf\") && (r.getRequester() != r.getPreparer());\r\n}\r\nonBehalfOf_condition;";
            Enabled = true;
            Name = "OnBehalfOf (CAT)";
            Permission = RuleEditor;
            Result = "function onBehalfOf_action (r) \r\n{\r\n\treturn ApprovalRequest.create(r, r.getRequester(), false, \t\t\t\t\t\t\t   \"cat.rulereasons\", \"OnBehalfOf\");\r\n}\r\nonBehalfOf_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "function transactionCenter_condition (r) \r\n{\r\n  return true;\r\n}\r\ntransactionCenter_condition;";
            Enabled = false;
            Name = "TransactionCenter (CAT)";
            Permission = RuleEditor;
            Result = "function transactionCenter_action (r) \r\n{\r\n\tvar approver = Role_DataMaintainer;\r\n\tvar reason = \"DataMaintainer_General\"; \r\n\tvar required = true;\r\n\tif (Role_TransCenterNA != null) {\r\n\t\tapprover = Role_TransCenterNA;\r\n\t\treason = \"TransactionCenterReview\";\r\n\t}\r\n\treturn ApprovalRequest.create(r, approver, required, \"cat.rulereasons\", reason);\r\n}\r\ntransactionCenter_action;\r\n";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSplitterRule";
            Condition = "// 22/08/2013  IBM Jayashree B S  Q4 2013 - RSD103 - FDD 4/TDD 1.1 Add CSCL Customs Team into PR Approval Flow \r\n\r\n       \r\nfunction CSCL_Customs_Team_condition (r, LineItems)\r\n{\r\n\tvar isAdHoc = LineItems.getFieldValue(\"IsAdHoc\");\r\n\tLog.javascript.debug(\"CSCL_Customs_Team_condition:isAdHoc:\" + isAdHoc);\r\n\tvar flag = false;\r\n\tif((isCompanyApprovalRule(r, \"CSCLTeam\")) && (isAdHoc == 'true')){\r\n\tLog.javascript.debug(\"CSCL_Customs_Team_condition:isAdHoc: isCompanyApprovalRule\" );\r\n\tflag = true;\r\n\t}\r\n        \r\n\treturn flag;\r\n}\r\nCSCL_Customs_Team_condition;";
            Enabled = true;
            FieldPath = LineItems;
            Name = "CSCL Customs Team";
            Permission = RuleEditor;
            Result = "function CSCL_Customs_Team_action (r, LineItems)\r\n{\r\nvar reason = ResourceString.getString(\"cat.rulereasons\", \"CSCLTeam\");\r\nLog.javascript.debug(\"CSCL_Customs_Team_action: Enters\"+reason);\r\nvar datarole= Role_DataMaintainer;\r\nvar role = CatUtil.getRoleforSplitterRule(r,\"CSCL\",LineItems);\r\nLog.javascript.debug(\"CSCL_Customs_Team_action: role is : \" + role );\r\nvar required = isWatcher(r, \"CSCLTeam\") ;\r\nLog.javascript.debug(\"CSCL_Customs_Team_action: required : \" + required);\r\nif (role!= null)\r\n{\r\nreturn ApprovalRequest.create(r, role, required, \"cat.rulereasons\", reason);\r\n}\r\nelse\r\n{\r\nreturn ApprovalRequest.create(r, datarole, required, \"cat.rulereasons\", reason);\r\n}\r\n}\t\t\r\nCSCL_Customs_Team_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSplitterRule";
            Condition = "var isadhoc;\r\nvar modcat;\r\n\r\nfunction buyerrole_condition (r, LineItems)\r\n{\r\n\r\nif(r.getFieldValue(\"POComment\") != null)\r\n{\r\n    return false;\r\n}\r\n          \r\n\tisadhoc=false;\r\n\tmodcat = false;\r\n\tLog.javascript.debug(\"buyerrole**** isadhoc\" + LineItems.getFieldValue(\"IsAdHoc\"));\r\n\tvar desp = \"Additional Charge\";\r\n\tvar rlid = LineItems.getDottedFieldValue(\"Description.Description\"); \r\n\tLog.javascript.debug(\"Non-Catalog**** IsPartialItem: \" + LineItems.getDottedFieldValue(\"Description.IsPartialItem\"));\r\n  \tLog.javascript.debug(\"Non-Catalog**** Description: \" + rlid);\r\n        if (LineItems.getFieldValue(\"IsAdHoc\") == 'true') {\r\n\t\tLog.javascript.debug(\"Non-Catalog**** Inside Condition1 \");\r\n\t\tisadhoc = true;\r\n\t}\r\n\tif (LineItems.getFieldValue(\"IsAdHoc\") == 'false')\r\n\t{\r\n\t if (LineItems.getDottedFieldValue(\"Description.IsPartialItem\") == 'true')\r\n\t    { \r\n\t    Log.javascript.debug(\"Non-Catalog**** IsPartialItem: \" + LineItems.getDottedFieldValue(\"Description.IsPartialItem\"));\r\n\t      if (!(rlid.toLowerCase() == desp.toLowerCase())) {\r\n\t\tLog.javascript.debug(\"Non-Catalog**** Inside Condition2 \");\r\n\t\tmodcat = true;\r\n\r\n\t      }\r\n\t    }\r\n  \t  }\r\nreturn (isCompanyApprovalRule(r, \"NonCatalog\") && (isadhoc || modcat));\r\n\r\n}\r\nbuyerrole_condition;";
            Enabled = true;
            FieldPath = LineItems;
            Name = "NonCatalog (CAT)";
            Permission = RuleEditor;
            Result = "function buyerrole_action (r, LineItems)\r\n{\r\nLog.javascript.debug(\"buyerroleinside  action\" );\r\n\r\nvar datarole= Role_DataMaintainer;\r\nvar reason =\"DataMaintainer_General\";\r\nvar role = CatUtil.getRoleforSplitterRule(r,\"IP\",LineItems);\r\nif(isERFQ(r))\r\n{\r\n\trole = getFirstLineBuyer(r);\r\n}\r\nLog.javascript.debug(\"buyerrole**** role : \" + role );\r\nvar required = true;\r\nif (role!= null)\r\n{\r\n   if (isadhoc) {\r\n\treason =\"Requisition for non-catalog items requires approval by Indirect Purchasing\";\r\n   }\r\n   if (modcat) {\r\n\treason = \"Modified Catalog\";\r\n   } \r\nLog.javascript.debug(\"buyerrole**** role is active\");\r\nreturn ApprovalRequest.create(r, role, required, \"cat.sap\", reason);\r\n\r\n}\r\nelse\r\n{\r\nreturn ApprovalRequest.create(r, datarole, required, \"cat.sap\", reason);\r\n}\r\n}\t\t\r\nbuyerrole_action;\r\n\r\nfunction getFirstLineBuyer(r)\r\n{\r\n\tif(r.getLineItems()!=null && r.getLineItems().size()>0)\r\n\t{\r\n\t\tvar li = r.getLineItems().get(0);\r\n\t\tvar buyer = li.getDottedFieldValue(\"BuyerCode.UserID\");\r\n\t\treturn buyer;\r\n\t}\r\n\treturn null;\r\n}";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSplitterRule";
            Condition = "function otherDept_condition (r, SplitAccountings)\r\n{\r\n//PO Conversion condition\r\nif(r.getFieldValue(\"POComment\") != null)\r\n{\r\n    return false;\r\n}\r\n\tvar required = true;\r\n\t//var isCriticalAssetDown = r.getFieldValue(\"CriticalAssetDown\");\t\r\n\t//Log.javascript.debug(\"OTHERDEPT **** isCriticalAssetDown : \" + isCriticalAssetDown);\r\n\t//if(isCriticalAssetDown!=null && isCriticalAssetDown.booleanValue())\r\n\t//{\r\n\t//  required = false;\r\n\t // Log.javascript.debug(\"OTHERDEPT **** required : \" + required);\t\r\n\t//}\r\n\t\r\n\tvar sa = SplitAccountings;\t\r\n\tvar ccapprover = sa.getFieldValue(\"CostCenterApprover\");\r\n\tvar cc = sa.getFieldValue(\"CostCenterText\");\r\n\tLog.javascript.debug(\"OTHERDEPT *** CostCenter Approver: \" + ccapprover);\r\n\tLog.javascript.debug(\"OTHERDEPT *** CostCenterText \" + cc);\r\n\t\r\n\treturn (ccapprover != null && cc != null && required && isCompanyApprovalRule(r, \"CostCenter\"))\r\n}\r\notherDept_condition;";
            Enabled = true;
            FieldPath = LineItems.Accountings.SplitAccountings;
            Name = "OtherDepartment (CAT)";
            Permission = RuleEditor;
            Result = "function otherDept_action (r, SplitAccountings)\r\n{\r\n\tvar sa = SplitAccountings;\r\n\tvar reason = Fmt.Sil(\"cat.rulereasons\", \"OtherDepartment\");\t\r\n\tvar ccapprover = sa.getFieldValue(\"CostCenterApprover\");\r\n\tvar approver = ccapprover.getUser();\r\n\treturn ApprovalRequest.create(r, approver, true, \"cat.rulereasons\", \"Designated Approver Must Approve\");\r\n}\t\t\r\notherDept_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "function supervisor_condition (r)\r\n{\r\n//PO Conversion condition\r\nif(r.getFieldValue(\"POComment\") != null)\r\n{\r\n    return false;\r\n}\r\n\treturn isCompanyApprovalRule(r, \"Supervisor\");\r\n}\r\nsupervisor_condition;";
            Enabled = true;
            Name = "Supervisor (CAT)";
            Permission = RuleEditor;
            Result = "function supervisor_action (r)\r\n{\r\n\tvar approver = Role_DataMaintainer;\r\n\tvar reason = \"DataMaintainer_Supervisor\";\r\n\tvar required = true;\r\n\t//var isCriticalAssetDown = r.getFieldValue(\"CriticalAssetDown\");\t\r\n\t//Log.javascript.debug(\"SUPERVISOR **** isCriticalAssetDown : \" + isCriticalAssetDown);\r\n\t\r\n\t\r\n\tLog.javascript.debug(\"SUPERVISOR **** before user: \" );\r\n\tvar supervisor = User2Supervisor(r.getRequester());\r\n\tLog.javascript.debug(\"SUPERVISOR **** before user: \"+supervisor );\r\n\tif (supervisor != null) {\r\n\t\tvar puser = CommonUser.getPartitionedUser(r.getRequester(), r.getPartition());\r\n\t\tLog.javascript.debug(\"SUPERVISOR **** part user: \" + puser);\t\t\r\n\t\tif (puser != null) {\r\n\t\t\tvar code = puser.getFieldValue(\"SAPExpenseApprovalCode\");\r\n\t\t\tLog.javascript.debug(\"SUPERVISOR **** approval code: \" + code);\r\n\t\t\tif (code != null) {\r\n\t\t\t\tvar limit = code.getFieldValue(\"Amount\");\r\n\t\t\t\tLog.javascript.debug(\"SUPERVISOR **** limit: \" + limit);\r\n\t\t\t\tif (limit != null) {\r\n\t\t\t\t\tapprover = supervisor;\r\n\t\t\t\t\tvar total = r.getTotalCost();\r\n\t\t\t\t\tLog.javascript.debug(\"SUPERVISOR **** total: \" + total);\r\n\t\t\t\t\t// must add total of any Not-to-Exceed line items\r\n\t\t\t\t\t//var nte_total = config.java.common.CatCommonUtil.getNotToExceedTotal(r.getLineItems());\r\n\t\t\t\t\t//total = ariba.basic.core.Money.add(total, config.java.common.CatCommonUtil.getNotToExceedTotal(r.getLineItems()));\r\n\t\t\t\t\tLog.javascript.debug(\"SUPERVISOR *** NEW total (w/NTE Prices): \" + total);\t\t\r\n\t\t\t\t\tLog.javascript.debug(\"SUPERVISOR **** limit compareTo total: \" + limit.compareTo(total));\t\r\n\t\t\t\t\tif (limit.compareTo(total) > -1) { \r\n\t\t\t\t\t\trequired = false;\r\n\t\t\t\t\t\treason = \"Supervisor_Watcher\";\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treason = \"Supervisor_Approver\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tvar sapsource = r.getDottedFieldValue(\"CompanyCode.SAPSource\");\r\n\tLog.javascript.debug(\"capital condition : CompanyCode : \"+ sapsource );\r\n\tvar acccat = r.getDottedFieldValue(\"CompanyCode.CAPAccCatgry\");\r\n\tLog.javascript.debug(\"capital condition : acccat : \"+ acccat );\r\n\tvar flag = false;\r\n\tvar lic = r.getLineItems();\r\n\tLog.javascript.debug(\"getAggrigatedCategoryAmt : lic :\" + lic);\r\n\tvar noOfLineItems = lic.size();\r\n\tfor(var i=0;i<noOfLineItems;i++)\r\n\t{\r\n\tvar line = lic.get(i);\r\n\tvar accCat = line .getDottedFieldValue(\"AccountCategory.UniqueName\");\r\n\tLog.javascript.debug(\"capital condition : accCat : \" + accCat);\r\n\r\n\tif (accCat != null && accCat.equalsIgnoreCase(acccat))\r\n\t{\r\n\r\n\t\trequired = false;\r\n\t\tLog.javascript.debug(\"SUPERVISOR **** required : \" + required);\r\n\t\treason = \"Supervisor_Watcher\";\r\n\t\tLog.javascript.debug(\"SUPERVISOR **** reason : \" + reason);\r\n\t}\r\n\t}\r\n\treturn ApprovalRequest.create(r, approver, required, \"cat.rulereasons\", reason);\r\n}\t\t\r\nsupervisor_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSplitterRule";
            Condition = "function customShipTo_condition (r, AdapterSource)\r\n{\r\n\tLog.javascript.debug(\"CustomShipTo **** adaptersoure: \" + AdapterSource);\r\n\tLog.javascript.debug(\"CustomShipTo **** null/blank test: \" + StringUtil.nullOrEmptyOrBlankString(AdapterSource));\r\n\treturn StringUtil.nullOrEmptyOrBlankString(AdapterSource);\r\n}\r\ncustomShipTo_condition;";
            Enabled = false;
            FieldPath = LineItems.ShipTo.AdapterSource;
            Name = "CustomShipTo (CAT)";
            Permission = RuleEditor;
            Result = "function customShipTo_action (r, AdapterSource) \r\n{\r\n\tvar approver = Role_DataMaintainer;\r\n\tvar reason = \"DataMaintainer_Supervisor\";\r\n\tvar required = false;\r\n\tvar supervisor = User2Supervisor(r.getRequester());\r\n\tif (supervisor != null) {\r\n\t\tapprover = supervisor;\r\n\t\treason = \"CustomShipTo\";\r\n\t}\r\n\treturn ApprovalRequest.create(r, approver, required, \"cat.rulereasons\", reason);\r\n}\r\ncustomShipTo_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSplitterRule";
            Condition = "function categoryThreshold_condition (r, LineItems) \r\n{\r\n\tvar BigD = java.math.BigDecimal\r\n\tcc_VALUE = null;\r\n\tcc_TYPE = 0;\r\n\tvar threshold = null;\r\n\tvar ceme = LineItems.getCommodityExportMapEntry();\r\n\tif (ceme != null) {\r\n\t\tvar cc = ceme.getCommodityCode();\r\n \t\tif (cc != null) {\r\n \t\t\tLog.javascript.debug(\"COMMODITY **** Commodity Code: \" + cc.getUniqueName());\r\n \t\t\tvar acc = getCodeOrParentCode(cc, 2);\r\n \t\t\tvar wcc = getCodeOrParentCode(cc, 1);\r\n \t\t\tLog.javascript.debug(\"COMMODITY **** acc / wcc: \" + acc + \" / \" + wcc);\r\n\t\t\tvar total = LineItems.getAmount();\r\n\t\t\tLog.javascript.debug(\"COMMODITY **** total: \" + total);\t\r\n\t\t\tif (LineItems.getDescription().getPrice().getAmount().compareTo(new BigD(0)) == 0) {\r\n\t\t\t\tvar nte_price = LineItems.getDottedFieldValue(\"Description.NotToExceedPrice\");\r\n\t\t\t\tvar reason = LineItems.getDottedFieldValue(\"Description.ReasonCode\");\r\n\t\t\t\tLog.javascript.debug(\"COMMODITY **** reason / nte_price: \" + reason + nte_price);\r\n\t\t\t\tif (nte_price != null && reason.indexOf(\"xceed\") > -1) {\r\n\t\t\t\t\ttotal = nte_price.multiply(LineItems.getQuantity());\r\n\t\t\t\t\tLog.javascript.debug(\"COMMODITY **** updated total (incl. NTE Price): \" + total);\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (acc != null) {\r\n\t\t\t\tthreshold = getCategoryThreshold(acc, 2);\r\n\t\t\t\tLog.javascript.debug(\"COMMODITY **** approver threshold: \" + threshold);\t\r\n\t\t\t\tif (threshold != null && total.compareTo(threshold) >= 0) {\r\n\t\t\t\t\tcc_VALUE = acc;\r\n\t\t\t\t\tcc_TYPE = 2;\r\n\t\t\t\t\treturn true;\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (wcc != null) {\r\n\t\t\t\tthreshold = getCategoryThreshold(wcc, 1);\r\n\t\t\t\tLog.javascript.debug(\"COMMODITY **** watcher threshold: \" + threshold);\t\r\n\t\t\t\tif (threshold != null && total.compareTo(threshold) >= 0) {\r\n\t\t\t\t\tcc_VALUE = wcc;\r\n\t\t\t\t\tcc_TYPE = 1;\r\n\t\t\t\t\treturn true;\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t} \r\n \t\t}\r\n \t}\r\n \treturn false;\r\n}\r\ncategoryThreshold_condition;";
            Enabled = false;
            FieldPath = LineItems;
            Name = "CategoryThreshold (CAT)";
            Permission = RuleEditor;
            Result = "function categoryThreshold_action (r, LineItems) \r\n{\r\n\tvar approver = Role_DataMaintainer;\r\n\tvar reason = \"DataMaintainer_CategoryThreshold\";\r\n\tvar required = true;\r\n// \tvar cc = LineItems.getCommodityExportMapEntry().getCommodityCode();\r\n\tLog.javascript.debug(\"COMMODITY **** cc_VALUE / cc_TYPE: \" + cc_VALUE + \" / \" + cc_TYPE);\t\r\n\tif (cc_VALUE != null) {\r\n\t\tvar role = getCategoryApprover(cc_VALUE); \r\n\t\tif (role != null) {\r\n\t\t\tapprover = role;\r\n\t\t\tif (cc_TYPE == 1) {\r\n\t\t\t\treason = \"CategoryThreshold_Watcher\";\r\n\t\t\t\trequired = false;\r\n\t\t\t} else {\r\n\t\t\t\treason = \"CategoryThreshold_Required\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn ApprovalRequest.create(r, approver, required, \"cat.rulereasons\", reason);\r\n}\r\ncategoryThreshold_action;\r\n";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSplitterRule";
            Condition = "function hazmat_condition (r, LineItems)\r\n{\r\n//PO Conversion condition\r\nif(r.getFieldValue(\"POComment\") != null)\r\n{\r\n    return false;\r\n}\r\n\tvar isHazmat = LineItems.getFieldValue(\"IsHazmat\");\r\n\tLog.javascript.debug(\"HAZMAT **** isHazmat: \" + isHazmat);\r\n\r\n\treturn isCompanyApprovalRule(r, \"Hazmat\") && (isHazmat);\r\n}\r\nhazmat_condition;";
            Enabled = true;
            FieldPath = LineItems;
            Name = "Hazmat (CAT)";
            Permission = RuleEditor;
            Result = "function hazmat_action (r, LineItems)\r\n{\r\nvar datarole= Role_DataMaintainer;\r\nvar reason =\"DataMaintainer_Hazmat\";\r\nvar role = CatUtil.getRoleforSplitterRule(r,\"HM\",LineItems);\r\n\r\nLog.javascript.debug(\"HAZMAT **** role : \" + role );\r\nvar required = true;\r\nvar approverListName = null;\r\nif (role!= null)\r\n{\r\n\r\napproverListName =getApprovalList(role);\r\n}\r\nif(approverListName!=null)\r\n{\r\nLog.javascript.debug(\"approverListName (FINAL) =\" + approverListName);\r\nvar approverList = config.java.common.CatCommonUtil2.getHazmatApproverList(approverListName, r.getPartition());\r\n\t\r\nreason =\"Requisition for hazardous material requires review and approval by the HazMat Coordinator\";\r\nreturn ApprovalRequest.create(r, approverList, required, \"cat.sap\", reason);\r\nLog.javascript.debug(\"HAZMAT **** role is active\");\r\n}\r\n\r\nelse\r\n{\r\nreturn ApprovalRequest.create(r, datarole, required, \"cat.sap\", reason);\r\n}\r\n}\t\t\r\nhazmat_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "/*    IBM Nandini Bheemaiah\t28/08/2013  Q4 2013-RSD119-FDD5.0/TDD1.0    Implement OIO Indicator functionality */\r\n\r\n/* adds IBM OIO Agreement approver when Req is OIO = true and \r\nat least 1 Supplier Loc is IBM OIO */\r\n\r\n\r\nvar oioApprover = ResourceString.getString(\"cat.java.sap\",\"Req_OIOApprover\");//OIO Approver\r\nvar oioSupUniqueName = ResourceString.getString(\"cat.java.sap\",\"Req_OIOSuplrUniqueName\"); //IBM Corp\r\n\r\nfunction oio_condition (r) \r\n{\r\n\t\tvar lines = r.getLineItems();\r\n\t\tvar size = lines.size();\r\n\t\twhile (size > 0) {\r\n\t\t\tvar rli = lines.get(--size);\r\n\t\t\tvar loc = rli.getSupplierLocation();\r\n\t\t\tvar supUniqueName = loc.getSupplier().getUniqueName();\r\n\r\n\t\t\tLog.javascript.debug(\"OIO AGREEMENT - Suplr Loc: \" + loc);\r\n\t\t\tif (loc != null && supUniqueName.equals(oioSupUniqueName)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t} \t\r\n  \t\treturn false;\r\n}\r\noio_condition;";
            Enabled = true;
            Name = "OIOAgreement (CAT)";
            Permission = RuleEditor;
            Result = "function oio_action (r) \r\n{\r\n\tvar approver = Role_DataMaintainer;\r\n\tvar reason = \"DataMaintainer_General\"; \r\n\tvar required = true;\r\n\tvar oio_approver = User.getUser(oioApprover,\"PasswordAdapter1\");\r\n\tLog.javascript.debug(\"OIO AGREEMENT - OIO Approver: \" + oio_approver);\r\n\tif (oio_approver != null) {\r\n\t\tapprover = oio_approver;\r\n\t\treason = \"OIOAgreement\";\r\n\t}\r\n\treturn ApprovalRequest.create(r, approver, required, \"cat.rulereasons\", reason);\r\n}\r\noio_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "function customTaxApprover_condition(approvable)\r\n{\r\n//PO Conversion condition\r\nif(approvable.getFieldValue(\"POComment\") != null)\r\n{\r\n    return false;\r\n}\r\nvar saptaxcode = null;\r\nvar saptaxflag = false;\r\nvar ccode = approvable.getDottedFieldValue(\"CompanyCode.UniqueName\")\r\nLog.javascript.debug(\"Custom Approver companycode\" + ccode);\r\nvar vertexflag = approvable.getDottedFieldValue(\"CompanyCode.CallToVertexEnabled\")\r\nLog.javascript.debug(\"Custom Approver vertexflag value\" + vertexflag);\r\nvar ccodeMattaxvalue = approvable.getDottedFieldValue(\"CompanyCode.DefaultTaxCodeForMaterial.SAPTaxCode\")\r\nLog.javascript.debug(\"Custom Approver Material tax in companycode\" + ccodeMattaxvalue);\r\nvar ccodeServicetaxvalue = approvable.getDottedFieldValue(\"CompanyCode.DefaultTaxCodeForService.SAPTaxCode\")\r\nLog.javascript.debug(\"Custom Approver Serverice tax in companycode\" + ccodeServicetaxvalue);\r\nvar lineItems = approvable.getLineItems();\r\n Log.javascript.debug(\"filterLineItems \"+lineItems.size());\r\n    for (var i = 0, s = lineItems.size(); i < s ; i++)\r\n    {\r\n        var lineItem = lineItems.get(i);\r\n\t\tvar linetaxcode = lineItem.getFieldValue(\"TaxCode\");\r\n\t\tLog.javascript.debug(\"Line Item Taxcode \"+ linetaxcode);\r\n\t\tif(linetaxcode != null)\r\n\t\t{\r\n\t\tvar saptaxcode = lineItem.getDottedFieldValue(\"TaxCode.SAPTaxCode\");\t\r\n\t\tLog.javascript.debug(\"saptaxcode \"+saptaxcode);\r\n\t\tif( saptaxcode.equals(ccodeMattaxvalue) || saptaxcode.equals(ccodeServicetaxvalue) )\r\n\t\t{\r\n\t\tLog.javascript.debug(\"Inside true condition\");\r\n\t\tsaptaxflag = true;\r\n\t\tbreak;\r\n\t\t}\r\n\t}\t\r\n   }\t\t\r\nif(((vertexflag == 'PR' || vertexflag == 'PIB') && saptaxflag))\r\nreturn true;\r\nelse return false;\r\n}\r\ncustomTaxApprover_condition;";
            Enabled = true;
            Name = "TaxCustomApprover (CAT)";
            Permission = RuleEditor;
            Result = "function customTaxApprover_action (r)\r\n{\r\n\tvar name = \"SAP Tax Assessment\";\r\n\tvar reason = \"Tax module will automatically assess taxability of Requisition line items. No action required!\";\r\n\tvar ca = CustomApprover.get(r.getPartition(), name);\r\n\tLog.javascript.debug(\"Custom Approver (lookup): \" + ca);\r\n\tif (ca == null) {\r\n\t\t// construct a new custom approver\r\n\t\tca = new CustomApprover(r.getPartition(), name,\r\n\t\t\t\t\"config.java.customapprover.sap.CatSAPTaxCustomApprover\");\r\n\t\tLog.javascript.debug(\"Custom Approver (new): \" + ca);\r\n\t\t\r\n\t}\r\n\treturn ApprovalRequest.create(r,ca,false,\"ruleReasons\",reason);\r\n}\r\ncustomTaxApprover_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "function itapprover_condition (r)\r\n{\r\n\tvar result = false;\r\n\tvar linecount = r.getLineItemsCount();\r\n\tvar lines = r.getLineItems();\r\n\tLog.javascript.debug(\"ITPCC Condition **** line count: \" + linecount);\r\n\r\n\tvar size = lines.size();\r\n\twhile (size > 0) \r\n\t{\r\n\t\tvar rli = lines.get(size-1);\r\n\t\tvar liPCC = rli.getDottedFieldValue(\"CommodityCode.UniqueName\");\r\n\t\tLog.javascript.debug(\"LI PCC **** : \" + liPCC);\r\n\t\tif (getITPCC(liPCC) == true)\r\n\t\t{\r\n\t\t\tresult = true;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tsize--;\r\n\t}  \t\r\n  \t\r\n  \tif (result)\r\n  \t{\r\n\t\tvar r_fac = r.getDottedFieldValue(\"Requester.PayrollFacility\")\r\n\t\tLog.javascript.debug(\"ITPCC Condition **** Requester's PayrollFacility: \" + r_fac);\r\n\t\tif (r_fac == null)\r\n\t\t{\r\n\t\t\tresult = false;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tvar returnlist = getITApproversForFacility(r_fac);\r\n\t\t\tif (returnlist.isEmpty()) \r\n\t\t\t{\r\n\t\t\t\tLog.javascript.debug(\"ITPCC Condition **** No ITApprover available for Facility \" + r_fac);\r\n\t\t\t\tresult = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n  \t\r\n  \treturn result;\r\n}\r\nitapprover_condition;";
            Enabled = false;
            Name = "AddITApprover (CAT)";
            Permission = RuleEditor;
            Result = "function itapprover_action (r)\r\n{\r\nvar approverListName=null;\r\n\tvar required = true;\r\n\t\r\n\tvar r_fac = r.getDottedFieldValue(\"Requester.PayrollFacility\")\r\n\tLog.javascript.debug(\"ITPCC Action **** Requester's PayrollFacility: \" + r_fac);\r\n\tif (r_fac != null)\r\n\t{\r\n\t\t//var approverList = new ApproverList(r.getPartition());\r\n\t\tvar returnlist = getITApproversForFacility(r_fac);\r\n\t\tif (!returnlist.isEmpty()) \r\n\t\t{\r\n\t\t\tLog.javascript.debug(\"ITPCC **** returnlist.size(): \" + returnlist.size());\r\n\t\t\tvar none = Base.getService().getPartition(\"None\");\r\n\t\t\tfor (i=0;i<returnlist.size();i++) \r\n\t\t\t{\r\n\t\t\t\tLog.javascript.debug(\"approverListName Before Adding: \" + approverListName);\r\n\t\t\t\tif (approverListName==null)\r\n\t\t\t\t\tapproverListName = returnlist.get(i);\r\n\t\t\t\telse\r\n\t\t\t\t\tapproverListName += \"/\" + returnlist.get(i);\r\n\t\t\t\tLog.javascript.debug(\"approverListName After Adding: \" + approverListName);\r\n\t\t\t}\r\n\t\t}\r\n\t\tvar approverList = config.java.common.CatCommonUtil2.getHazmatApproverList(approverListName, r.getPartition());\r\n\t\tLog.javascript.debug(\"The approvallist returns \" + approverList.getApprovers());\r\n\t\tvar rulereason = Fmt.Sil(\"cat.rulereasons\", \"ITPCC\");\t\r\n\t\tvar reason = Fmt.S(rulereason,r_fac);\r\n\t\treturn ApprovalRequest.create(r, approverList, required, \"cat.rulereasons\", reason);\t\t\r\n\t}\r\n\tLog.javascript.debug(\"ITPCC Action **** Completed!!\");\r\nreturn null;\r\n}\t\t\r\nitapprover_action;\r\n";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "function dfpacctreviewer_condition (r)\r\n{\r\n    var contractFileNumber = r.getDottedFieldValue(\"LineItems[0].Accountings.SplitAccountings[0].ContractFileNumber\");\r\n    if(contractFileNumber !=null && !contractFileNumber.trim().equals(\"\")){\r\n    \treturn true;\r\n    }\r\n\treturn false;\r\n}\r\ndfpacctreviewer_condition;\r\n";
            Enabled = false;
            Name = DandFPAccountReviewer;
            Permission = RuleEditor;
            Result = "function dfpacctreviewer_action (r)\r\n{\r\n\tvar approver = Role_DataMaintainer;\r\n\tvar reason = \"DataMaintainer_General\";\r\n\tvar required = true;\r\n\r\n\tif(Role.getRole(\"D&FP Accounting Review Group\") != null) {\r\n\t    var approver = Role.getRole(\"D&FP Accounting Review Group\");\r\n\t\tvar reason = \"DFPAccountReviewReason\";\r\n\t}\r\n    return ApprovalRequest.create(r,\r\n                                  approver,\r\n                                  true,\r\n                                  \"cat.rulereasons\",\r\n                                  reason);\r\n}\r\ndfpacctreviewer_action; ";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "function businessResourceApprover_condition (r)\r\n{\r\n//PO Conversion condition\r\nif(r.getFieldValue(\"POComment\") != null)\r\n{\r\n    return false;\r\n}\r\n    var reqTotal = r.getTotalCost().getApproxAmountInBaseCurrency();\r\n    var requester = r.getRequester(); \r\n    var r_fac = requester.getDottedFieldValue(\"PayrollFacility\");\r\n    var r_dept = requester.getDottedFieldValue(\"Department\");\r\n\r\n\tvar hasApprover = getBusinessResourceApprover(r_fac, r_dept, reqTotal);\r\n\tif (!(StringUtil.nullOrEmptyOrBlankString(hasApprover)) && isCompanyApprovalRule(r, \"BusinessResourceApprover\")) { \r\n    \treturn true;\r\n    } else {\r\n    \treturn false;\r\n    }\r\n}\r\nbusinessResourceApprover_condition;";
            Enabled = true;
            Name = "BusinessResourceApprover (CAT)";
            Permission = RuleEditor;
            Result = "function businessResourceApprover_action (r)\r\n{\r\n    Log.javascript.debug(\" Approvable got = \"+ r);\r\n    var reqTotal = r.getTotalCost().getApproxAmountInBaseCurrency();\r\n    var requester = r.getRequester(); \r\n    var r_fac = requester.getDottedFieldValue(\"PayrollFacility\");\r\n    var r_dept = requester.getDottedFieldValue(\"Department\");\r\n\r\n\tvar approverListName = getBusinessResourceApprover(r_fac, r_dept, reqTotal);\r\n\r\n    var approverList = config.java.common.CatCommonUtil2.getHazmatApproverList(approverListName, r.getPartition());\r\n    Log.javascript.debug(\"The approvallist returns \" + approverList.getApprovers());\r\n\r\n    return ApprovalRequest.create(r,\r\n                                  approverList,\r\n                                  true,\r\n                                  \"cat.rulereasons\",\r\n                                  \"BusinessResourceApprover\");\r\n}\r\nbusinessResourceApprover_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "function pavingTransaction_condition (r) \r\n{\r\nvar facility = r.getDottedFieldValue(\"LineItems[0].Accountings.SplitAccountings[0].Facility.UniqueName\");\r\nLog.javascript.debug(\"Paving- condition facility \" + facility);\r\n\tif(facility == \"R8\") return true;\r\n\telse return false;\r\n}\r\npavingTransaction_condition;";
            Enabled = false;
            Name = "PavingTransactionTeam(CAT)";
            Permission = RuleEditor;
            Result = "function pavingTransaction_action (r) \r\n{\r\nLog.javascript.debug(\"Paving- action starting\");\r\nvar approver = Role_DataMaintainer;\r\nLog.javascript.debug(\"Paving- action approver\"+approver);\r\nvar reason = \"DataMaintainer_General\"; \r\nvar Role_PavingTransaction= Role.getRole(\"Paving Transaction Team\"); \r\nLog.javascript.debug(\"Paving- action pavingtransaction role\"+Role_PavingTransaction);\r\nvar required = true;\r\nif (Role_PavingTransaction!= null) {\r\n\tLog.javascript.debug(\"Paving- action paving transaction role: \"+Role_PavingTransaction);\r\n\tapprover = Role_PavingTransaction;\r\n\treason=\"Paving_Transaction\";\r\n}\r\n\treturn ApprovalRequest.create(r, approver, required, \"cat.rulereasons\", reason);\r\n}\r\npavingTransaction_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "function SupplierCustomApprover_condition(r)\r\n{\r\n//PO Conversion condition\r\nif(r.getFieldValue(\"POComment\") != null)\r\n{\r\n    return false;\r\n}\r\nreturn isERFQ(r);\r\n}\r\nSupplierCustomApprover_condition;";
            Enabled = true;
            Name = "SupplierCustomApprover (CAT)";
            Permission = RuleEditor;
            Result = "function SupplierCustomApprover_action (r)\r\n{\r\n  var name = \"Send Supplier eRFQ\";\r\n  var reason = \"SendSupplierERFQ\";\r\n  var ca = CustomApprover.get(r.getPartition(), name);\r\n  Log.javascript.debug(\"SupplierCustomApprover (CAT) \" + \r\n    \"Custom Approver: \" + ca);\r\n  if (ca == null) {\r\n    // couldn't find existing so create new\r\n    ca = new CustomApprover(\r\n            r.getPartition(), \r\n            name,\r\n            \"config.java.customapprover.sap.CatSAPSendERFQRequests\"             );\r\n    var nameML = \r\n        new ariba.base.core.MultiLingualString(r.getPartition());\r\n    nameML.setPrimaryString(name);\r\n    Log.javascript.debug(\"SupplierCustomApprover (CAT) \" +\r\n      \"nameML: \" + nameML);\r\n    ca.setName(nameML);\r\n    Log.javascript.debug(\"SupplierCustomApprover (CAT) \" +\r\n      \"Custom Approver (new): \" + ca);\r\n  }\r\n  return ApprovalRequest.create(\r\n    r,\r\n    ca,\r\n    false,\r\n    \"cat.ruleReasons\",\r\n    reason);\r\n}\r\nSupplierCustomApprover_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "function supervisor_condition (r)\r\n{\r\n\treturn true;\r\n}\r\nsupervisor_condition;\r\n";
            Enabled = false;
            Name = "Supervisor (CAT) before Critical Asset Down";
            Permission = RuleEditor;
            Result = "function supervisor_action (r)\r\n{\r\n\tvar approver = Role_DataMaintainer;\r\n\tvar reason = \"DataMaintainer_Supervisor\";\r\n\tvar required = true;\r\n\tLog.javascript.debug(\"SUPERVISOR **** before user: \" );\r\n\tvar supervisor = User2Supervisor(r.getRequester());\r\n\tLog.javascript.debug(\"SUPERVISOR **** before user: \"+supervisor );\r\n\tif (supervisor != null) {\r\n\t\tvar puser = CommonUser.getPartitionedUser(r.getRequester(), r.getPartition());\r\n\t\tLog.javascript.debug(\"SUPERVISOR **** part user: \" + puser);\t\t\r\n\t\tif (puser != null) {\r\n\t\t\tvar code = puser.getFieldValue(\"SAPExpenseApprovalCode\");\r\n\t\t\tLog.javascript.debug(\"SUPERVISOR **** approval code: \" + code);\r\n\t\t\tif (code != null) {\r\n\t\t\t\tvar limit = code.getFieldValue(\"Amount\");\r\n\t\t\t\tLog.javascript.debug(\"SUPERVISOR **** limit: \" + limit);\r\n\t\t\t\tif (limit != null) {\r\n\t\t\t\t\tapprover = supervisor;\r\n\t\t\t\t\tvar total = r.getTotalCost();\r\n\t\t\t\t\tLog.javascript.debug(\"SUPERVISOR **** total: \" + total);\r\n\t\t\t\t\t// must add total of any Not-to-Exceed line items\r\n\t\t\t\t\t//var nte_total = config.java.common.CatCommonUtil.getNotToExceedTotal(r.getLineItems());\r\n\t\t\t\t\t//total = ariba.basic.core.Money.add(total, config.java.common.CatCommonUtil.getNotToExceedTotal(r.getLineItems()));\r\n\t\t\t\t\tLog.javascript.debug(\"SUPERVISOR *** NEW total (w/NTE Prices): \" + total);\t\t\r\n\t\t\t\t\tLog.javascript.debug(\"SUPERVISOR **** limit compareTo total: \" + limit.compareTo(total));\t\r\n\t\t\t\t\tif (limit.compareTo(total) > -1) { \r\n\t\t\t\t\t\trequired = false;\r\n\t\t\t\t\t\treason = \"Supervisor_Watcher\";\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treason = \"Supervisor_Approver\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn ApprovalRequest.create(r, approver, required, \"cat.rulereasons\", reason);\r\n}\t\t\r\nsupervisor_action; ";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSplitterRule";
            Condition = "function otherDept_condition (r, SplitAccountings)\r\n{\r\n\tvar sa = SplitAccountings;\t\r\n\tvar ccapprover = sa.getFieldValue(\"CostCenterApprover\");\r\n\tvar cc = sa.getFieldValue(\"CostCenterText\");\r\n\tLog.javascript.debug(\"OTHERDEPT *** CostCenter Approver: \" + ccapprover);\r\n\tLog.javascript.debug(\"OTHERDEPT *** CostCenterText \" + cc);\r\n\t\r\n\treturn (ccapprover != null && cc != null)\r\n}\r\notherDept_condition;";
            Enabled = false;
            FieldPath = LineItems.Accountings.SplitAccountings;
            Name = "OtherDepartment (CAT) before Critical Asset Down";
            Permission = RuleEditor;
            Result = "function otherDept_action (r, SplitAccountings)\r\n{\r\n\tvar sa = SplitAccountings;\r\n\tvar reason = Fmt.Sil(\"cat.rulereasons\", \"OtherDepartment\");\t\r\n\tvar ccapprover = sa.getFieldValue(\"CostCenterApprover\");\r\n\tvar approver = ccapprover.getUser();\r\n\treturn ApprovalRequest.create(r, approver, true, \"cat.rulereasons\", \"Designated Approver Must Approve\");\r\n}\t\t\r\notherDept_action; ";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "function CommodityApprover_condition (r)\r\n{\r\n\tLog.javascript.debug(\"CommodityApprover : condition : ****START****\");\t\t\r\n\t\r\n\t//var commodityITAppReq = r.getDottedFieldValue(\"CompanyCode.\");\r\n\t//Log.javascript.debug(\"isITApprReq_1stLevel : commodityPMRequired :\" + commodityPMRequired);\r\n\t\r\n\t/*if(commodityPMRequired!=\"Y\")\r\n\t{\r\n\t\treturn false;\r\n\t}*/\r\n\t\r\n\tvar companyCode = r.getDottedFieldValue(\"CompanyCode.UniqueName\");\r\n\t\r\n\tLog.javascript.debug(\"CommodityApprover : condition : companyCode :\" + companyCode);\r\n\t\r\n        // See how this can be parameterised\r\n        var IT_PARENT_COMM_CODE = \"43\"; // Computer Equipment and Accessories \r\n\t\r\n\tLog.javascript.debug(\"CommodityApprover : condition : IT_PARENT_COMM_CODE :\" + IT_PARENT_COMM_CODE);\r\n\t\t\r\n\tif(isApprReqByCommCode(r,IT_PARENT_COMM_CODE)){\r\n\t\r\n\t\tLog.javascript.debug(\"CommodityApprover : condition : IT Approver Required \");\t\t\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tLog.javascript.debug(\"CommodityApprover : condition : ****END****\");\t\r\n\t\r\n\treturn false;\r\n}\r\nCommodityApprover_condition;\r\n";
            Enabled = false;
            Name = "CommodityApprover (CAT)";
            Permission = RuleEditor;
            Result = "function CommodityApprover_action (r)\r\n{\r\n\tLog.javascript.debug(\"CommodityApprover_action  ****START****\");\t\t\r\n\t\r\n\tvar companyCode = r.getDottedFieldValue(\"CompanyCode.UniqueName\");\r\n\t\r\n\tLog.javascript.debug(\"CommodityApprover_action : companyCode :\" + companyCode);\r\n\t\r\n        // See how this can be parameterised\r\n        var IT_PARENT_COMM_CODE = \"43\"; // Computer Equipment , Accessories and Software\r\n\t\r\n\tLog.javascript.debug(\"CommodityApprover_action : IT_PARENT_COMM_CODE :\" + IT_PARENT_COMM_CODE);\r\n\t\r\n\tvar searchString = IT_PARENT_COMM_CODE + \"|\" + companyCode;\r\n\t\r\n\tLog.javascript.debug(\"CommodityApprover_action : searchString :\" + searchString);\t\r\n\t\r\n\tvar COMMODITY_APPROVERS=\"config/variants/SAP/data/CATCommodityApprovers.csv\";\r\n\t\r\n\tvar list = CatUtil.makeValueListFromFile(searchString,COMMODITY_APPROVERS);\r\n\t\r\n\tLog.javascript.debug(\"CommodityApprover_action : list :\" + list);\t\t\t\r\n\t//var firstLevelApprover = list.get(2);\t\r\n\t//Log.javascript.debug(\"CommodityApprover_action : firstLevelApprover :\" + firstLevelApprover);\t\t\r\n\t\r\n\tvar approver = Base.getSession().objectFromName(\"sskoo\",\"ariba.user.core.User\",Base.getService().getPartition(\"None\"));\r\n\t\r\n\tLog.javascript.debug(\"CommodityApprover_action : approver :\" + approver);\t\t\r\n\t\t\t\r\n\tLog.javascript.debug(\"CommodityApprover_action ****END****\");\t\r\n\t\r\n\treturn ApprovalRequest.create(r, approver , true, \"cat.rulereasons\", \"ITApprover\");\r\n}\t\t\r\nCommodityApprover_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSplitterRule";
            Condition = "function categoryManager_condition (r, LineItems) \r\n{\r\n//PO Conversion condition\r\nif(r.getFieldValue(\"POComment\") != null)\r\n{\r\n    return false;\r\n}\r\n                 var Plant = null; \r\nLog.javascript.debug(\"CategoryManager : condition : ****START****\");\r\n\t\r\n\tif(!isCompanyApprovalRule(r, \"CategoryManager\"))\r\n\t{\r\n\t\treturn false;\t\t\r\n\t}\r\n\t\r\nvar CompanyCode = r.getDottedFieldValue(\"CompanyCode.UniqueName\");\r\nLog.javascript.debug(\"CategoryManager : condition : companyCode :\" + CompanyCode);\r\nvar BuyerAssgn = r.getDottedFieldValue(\"CompanyCode.BuyerAssignment\");\r\n\tLog.javascript.debug(\"CategoryManager : condition : BuyerAssignment :\" + BuyerAssgn);\r\n        var Shipto = r.getFieldValue(\"CustomShipTo\");\r\n\tLog.javascript.debug(\"CategoryManager : condition : ShipTo :\" + Shipto);\r\n     if (Shipto != null)\r\n      {\r\n\t       var Plant = Shipto.substring(0,4);\r\n\t       Log.javascript.debug(\"CategoryManager : condition : Plant :\" + Plant);\r\n      }\r\n\tvar CommodityCode = LineItems.getDottedFieldValue(\"Description.CommonCommodityCode.UniqueName\");\r\n\tLog.javascript.debug(\"CategoryManager : condition : CommodityCode :\" + CommodityCode);\r\n\tif (CommodityCode == null){\r\n\t\treturn false;\r\n\t}\r\n\tvar CCToSearch = CommodityCode.substring(0,2);\r\n\tLog.javascript.debug(\"CategoryManager : condition : CCToSearch :\" + CCToSearch);\r\n\tvar CCAmtToCompare = getAggrigatedCategoryAmt(r,CCToSearch)\r\n\tLog.javascript.debug(\"CategoryManager : condition : CCAmtToCompare :\" + CCAmtToCompare);\r\n\tif(CatUtil.isCategoryManagerRequired(CCToSearch,CompanyCode,CCAmtToCompare,Plant,BuyerAssgn)){\r\n\t\r\n\t\tLog.javascript.debug(\"CategoryManager : condition : Category Manager Required \");\t\t\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tLog.javascript.debug(\"CategoryManager : condition : ****END****\");\t\r\n\t\r\n\treturn false;\r\n}\r\ncategoryManager_condition;\r\n\r\nfunction getAggrigatedCategoryAmt(requistion, CCToSearch){\r\n\r\n\tLog.javascript.debug(\"getAggrigatedCategoryAmt ****START****\");\t\r\n\t\r\n\tvar lic = requistion.getLineItems();\r\n\tLog.javascript.debug(\"getAggrigatedCategoryAmt : lic :\" + lic);\r\n\t\r\n\tvar noOfLineItems = lic.size();\r\n\tLog.javascript.debug(\"getAggrigatedCategoryAmt : noOfLineItems :\" + noOfLineItems);\t\r\n\tvar Money = ariba.basic.core.Money;\r\n\tvar Currency = ariba.basic.core.Currency;\r\n\tvar aggAmt = new Money(new BigDecimal(\"0\"), Currency.getBaseCurrency());\r\n\t\r\n\tfor(var i=0;i<noOfLineItems;i++)\r\n\t{\r\n\t\t    var line = lic.get(i);\t\r\n\t\t    \r\n\t\t    var CommCode = line.getDottedFieldValue(\"Description.CommonCommodityCode.UniqueName\");\r\n\t\t    Log.javascript.debug(\"getAggrigatedCategoryAmt : CommCode :\" + CommCode);\r\n\t\t    \r\n\t\t    if((CommCode != null) && (CommCode.startsWith(CCToSearch))){\r\n\t\t\tvar lineAmt = line.getAmount();\r\n\t\t\taggAmt = aggAmt.add(lineAmt);\r\n\t\t    }\r\n\t}\r\n\t\r\n\tLog.javascript.debug(\"isApprReqByCommCode ****END****\");\t\r\n\t\r\n\treturn aggAmt;\r\n}";
            Enabled = true;
            FieldPath = LineItems;
            Name = "CategoryManager (CAT)";
            Permission = RuleEditor;
            Result = "function categoryManager_action (r, LineItems) \r\n{\r\n\tvar approver = Role_DataMaintainer;\r\n\tvar reason = \"DataMaintainer_CategoryManager\";\r\n\tvar required = true;\r\n\t\r\n\tvar CompanyCode = r.getDottedFieldValue(\"CompanyCode.UniqueName\");\r\n\tLog.javascript.debug(\"CategoryManager : condition : companyCode :\" + CompanyCode);\r\n\tvar BuyerAssgn = r.getDottedFieldValue(\"CompanyCode.BuyerAssignment\");\r\n\tLog.javascript.debug(\"CategoryManager : condition : BuyerAssignment :\" + BuyerAssgn);\r\n\tvar Shipto = r.getFieldValue(\"CustomShipTo\");\r\n\tLog.javascript.debug(\"CategoryManager : condition : ShipTo :\" + Shipto);\r\n       if (Shipto != null)\r\n      {\r\n\t     var Plant = Shipto.substring(0,4);\r\n\t     Log.javascript.debug(\"CategoryManager : condition : Plant :\" + Plant);\r\n      }\r\n\tvar CommodityCode = LineItems.getDottedFieldValue(\"Description.CommonCommodityCode.UniqueName\");\r\n\tLog.javascript.debug(\"CategoryManager : condition : CommodityCode :\" + CommodityCode);\r\n\tif (CommodityCode == null){\r\n\t\treturn false;\r\n\t}\r\n\tvar CCToSearch = CommodityCode.substring(0,2);\r\n\tLog.javascript.debug(\"CategoryManager : condition : CCToSearch :\" + CCToSearch);\r\n\tvar CCAmtToCompare = getAggrigatedCategoryAmt(r,CCToSearch)\r\n\tLog.javascript.debug(\"CategoryManager : condition : CCAmtToCompare :\" + CCAmtToCompare);\r\n\t\r\n\tvar approverVal = CatUtil.getCategoryManager(CCToSearch,CompanyCode,CCAmtToCompare,Plant,BuyerAssgn);\r\n\tvar isWatcher = CatUtil.getCategoryManagerisWatcher(CCToSearch,CompanyCode,CCAmtToCompare);\r\n\tif(isWatcher != null && isWatcher.equals(\"Y\"))\r\n\t{\r\n\t\treason = \"CategoryManager must notified\";\r\n\t\trequired = false;\r\n\t}\r\n\tif(approverVal != null)\r\n\t{\r\n\t\treason = \"Requisition for IT items requires approval by the IT Approver\";\r\n\t\tvar approverrole = Role.getRole(approverVal);\r\n\t\tLog.javascript.debug(\"categoryManager : action : Approver is: \" + approver);\r\n\t\tif(approverrole != null)\r\n\t\t{\r\n\t\t\tvar approverListNameCM = getApprovalList(approverrole);\r\n\t\t\tif(approverListNameCM!=null)\r\n\t\t\t\t{\r\n\t\t\t\tLog.javascript.debug(\"approverListName (FINAL) =\" + approverListNameCM);\r\n\t\t\t\tvar approverList = config.java.common.CatCommonUtil2.getHazmatApproverList(approverListNameCM, r.getPartition());\r\n\t\t\t\t\t\r\n\t\t\t\treturn ApprovalRequest.create(r, approverList, required, \"cat.sap\", reason);\r\n\t\t\t\tLog.javascript.debug(\"categoryManager **** role is active\");\r\n\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tapprover = User.getUser(approverVal,\"PasswordAdapter1\");\r\n\t\t\tLog.javascript.debug(\"CategoryManager : Action : Approver is a user, not Role: \" + approver);\r\n\t\t}\t\t\t\t\r\n\t}\r\n\treturn ApprovalRequest.create(r, approver, required, \"cat.rulereasons\", reason);\r\n}\r\ncategoryManager_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSplitterRule";
            Condition = "function blockadmin_condition (r, LineItems)\r\n{\r\n//PO Conversion condition\r\nif(r.getFieldValue(\"POComment\") != null)\r\n{\r\n    return false;\r\n}\r\n\tvar blockndicator= LineItems.getDottedFieldValue(\"SupplierLocation.BlockIndicator\");\r\n\tLog.javascript.debug(\"blockadmin **** blockndicator\" + blockndicator);\r\nvar block =false;\r\nif (blockndicator!=null && blockndicator ==\"X\")\r\n  \t\t{\r\nLog.javascript.debug(\"blockadmin **** blockndicator inside X\" );\r\n\r\n        block= true; \r\nLog.javascript.debug(\"blockadmin **** blockndicator =>\" + block);\r\n}\r\n\r\nvar appRuleval = isCompanyApprovalRule(r, \"BlockAdmin\") ;\r\nLog.javascript.debug(\"appRuleval => \" + appRuleval);\r\nLog.javascript.debug(\"appRuleval and Block => \" + isCompanyApprovalRule(r, \"BlockAdmin\") && (block) );\r\nreturn (isCompanyApprovalRule(r, \"BlockAdmin\") && (block));\r\n\r\n}\r\nblockadmin_condition;";
            Enabled = true;
            FieldPath = LineItems;
            Name = "BlockAdmin (CAT)";
            Permission = RuleEditor;
            Result = "function blockadmin_action (r, LineItems)\r\n{\r\nLog.javascript.debug(\"blockadmin **** blockndicator inside  action\" );\r\n\r\nvar datarole= Role_DataMaintainer;\r\nvar reason =\"DataMaintainer_BlockAdmin\";\r\nvar role = CatUtil.getRoleforSplitterRule(r,\"BA\",LineItems);\r\nLog.javascript.debug(\"blockadmin**** role : \" + role );\r\nvar required = isWatcher(r, \"BlockAdmin\") ;\r\nLog.javascript.debug(\"blockadmin**** required : \" + required);\r\nif (role!= null)\r\n{\r\nreason =\"Supplier selected for the requisition is blocked for payment in CBS.  Supplier Admin is notified of the requisition\";\r\nreturn ApprovalRequest.create(r, role, required, \"cat.sap\", reason);\r\nLog.javascript.debug(\"blockadmin**** role is active\");\r\n\r\n}\r\nelse\r\n{\r\nreturn ApprovalRequest.create(r, datarole, required, \"cat.sap\", reason);\r\n}\r\n}\t\t\r\nblockadmin_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "function capital_condition(r)\r\n{\r\n//PO Conversion condition\r\nif(r.getFieldValue(\"POComment\") != null)\r\n{\r\n    return false;\r\n}\r\n            var sapsource = r.getDottedFieldValue(\"CompanyCode.SAPSource\");\r\n    Log.javascript.debug(\"capital condition : CompanyCode : \"+ sapsource );\r\n    var acccat = r.getDottedFieldValue(\"CompanyCode.CAPAccCatgry\");\r\n        Log.javascript.debug(\"capital condition : acccat : \"+ acccat );\r\n    var flag = false;\r\nvar lic = r.getLineItems();\r\n\tLog.javascript.debug(\"getAggrigatedCategoryAmt : lic :\" + lic);\r\n\tvar noOfLineItems = lic.size();\r\n\r\n    for(var i=0;i<noOfLineItems;i++)\r\n\t{\r\n\t\t    var line = lic.get(i);\r\nvar accCat = line .getDottedFieldValue(\"AccountCategory.UniqueName\");\r\n    Log.javascript.debug(\"capital condition : accCat : \" + accCat);\r\n\r\nif ((accCat != null) && ((accCat.equalsIgnoreCase(acccat) && sapsource.equals(\"CBS\"))))\r\n        {\r\n\r\n            Log.javascript.debug(\"capital condition : isCapitalItemCond : 2. returned true\");\r\n            flag = true;\r\n        }\r\n}\r\n  Log.javascript.debug(\"capital condition : flag: \" + flag );\r\n        return isCompanyApprovalRule(r, \"Capital\") && (flag);\r\n}\r\ncapital_condition;";
            Enabled = true;
            Name = "CapitalRule (CAT)";
            Permission = RuleEditor;
            Result = "function sumofAccCapitalAmt(requistion){\r\n\r\n\tLog.javascript.debug(\"entered to capital rule action****START****\");\t\r\n\t\r\n\tvar lic = requistion.getLineItems();\r\n\tLog.javascript.debug(\"getAggrigatedCategoryAmt : lic :\" + lic);\r\n\t\r\n\tvar noOfLineItems = lic.size();\r\n\tLog.javascript.debug(\"getAggrigatedCategoryAmt : noOfLineItems :\" + noOfLineItems);\t\r\n\tvar Money = ariba.basic.core.Money;\r\n\tvar Currency = ariba.basic.core.Currency;\r\n\tvar aggAmt = new Money(new BigDecimal(\"0\"), Currency.getBaseCurrency());\r\n\t var acccat = requistion.getDottedFieldValue(\"CompanyCode.CAPAccCatgry\");\r\n\t Log.javascript.debug(\"getAggrigatedAccCategoryAmt : acccat :\" + acccat);\r\n\t var sapsource = requistion.getDottedFieldValue(\"CompanyCode.SAPSource\");\r\n\tLog.javascript.debug(\"getAggrigatedAccCategoryAmt : sapsource :\" + sapsource);\r\n\r\n\r\n\t\r\n\tfor(var i=0;i<noOfLineItems;i++)\r\n\t{\r\n\t\t    var line = lic.get(i);\t\r\n\t\t    \r\n\t\t    var accategory = line.getDottedFieldValue(\"AccountCategory.UniqueName\");\r\n\t\t    Log.javascript.debug(\"getAggrigatedAccCategoryAmt : accategory :\" + accategory);\r\n\t\t    \r\n\t\t    if ((accategory != null) && ((accategory.equalsIgnoreCase(acccat) && sapsource.equals(\"CBS\")))){\r\n\t\t\tvar lineAmt = line.getAmount();\r\n\t\t\taggAmt = aggAmt.add(lineAmt);\r\n\t\t    }\r\n\t}\r\n\t\r\n\tLog.javascript.debug(\"getAggrigatedAccCategoryAmt ****END****\");\r\n Log.javascript.debug(\"getAggrigatedAccCategoryAmt : CommCode :\" + aggAmt);\r\n\t\r\n\t\r\n\treturn aggAmt;\r\n}\r\n\r\nfunction capital_action(r)\r\n{\r\n    var Array = java.lang.reflect.Array;\r\n    var ListUtil = ariba.util.core.ListUtil;\r\n    var role = null;\r\n    var isRequired = null\r\n    Log.javascript.debug(\"capital condition : isCapitalItemCond : 2. returned true\");\r\n    var approvalRules = r.getDottedFieldValue(\"CompanyCode.ApprovalRules\");\r\n    \r\n        for (var i=0; i < approvalRules.size(); i++)\r\n        {\r\n            var rule = approvalRules.get(i);\r\n            var ruleTypeString = rule.getFieldValue(\"RuleType\");\r\n            Log.javascript.debug(\"capital action : ruleTypeString : \" + ruleTypeString);\r\n            if (ruleTypeString.equals(\"Capital\")) {\r\n                var amt = sumofAccCapitalAmt(r);\r\n                var amtCurrencyID = amt.getCurrency().getUniqueName();\r\n                var defaultCurrency = r.getRequester().getDefaultCurrency();\r\n                var amtInBase = amt.convertToCurrency(defaultCurrency);\r\n                var amtBaseCurrencyID = amtInBase.getCurrency().getUniqueName();\r\n                var lastAmt = amtInBase.negate();\r\n                Log.javascript.debug(\"**Capital : lastAmt :\" + lastAmt);\r\n    \r\n                //sort the levels by amount\r\n                var al = rule.getFieldValue(\"Levels\");\r\n                Log.javascript.debug(\"capital action : Levels : \" + al);\r\n                var alArray = al.toArray();\r\n                Log.javascript.debug(\"capital action : alArray : \" + alArray);\r\n                var s = Array.getLength(alArray);\r\n                Log.javascript.debug(\"capital action : s : \" + s);\r\n//Log.javascript.debug(\"stopped before levels \");\r\n\r\n                for (var l=0; l<s-1; l++)\r\n                {\r\n                    for (var l2=0; l2<s-l-1; l2++)\r\n                    {\r\n                    Log.javascript.debug(\"capital action : inside loop: \" );\r\n                        var lvl = alArray[l2];\r\n                        var lvlAmt = lvl.getFieldValue(\"Limit\");\r\n                        var lvlAmtInBase = lvlAmt.convertToCurrency(defaultCurrency);\r\n                        var lvl2 = alArray[l2+1];\r\n                        var lvl2Amt = lvl2.getFieldValue(\"Limit\");\r\n                        var lvl2AmtInBase = lvl2Amt.convertToCurrency(defaultCurrency);\r\n                        if (lvlAmtInBase.compareTo(lvl2AmtInBase) > 0)\r\n                        {\r\n                            var temp = alArray[l2];\r\n                            alArray[l2] = alArray[l2+1];\r\n                            alArray[l2+1] = temp;\r\n                        }\r\n                    }\r\n                }\r\n                var approvalLevels = ListUtil.arrayToList(alArray,true);\r\n                Log.javascript.debug(\"capital action : approvalLevels: \" +approvalLevels );\r\n                Log.javascript.debug(\"capital action : approvalLevels : \" + approvalLevels);\r\n                for (var x=0; x < approvalLevels.size(); x++)\r\n                {\r\n                    var levelAmt = approvalLevels.get(x).getFieldValue(\"Limit\");\r\n                    var levelAmtInBase = levelAmt.convertToCurrency(defaultCurrency);\r\n                    var levelAmtBaseCurrencyID = levelAmtInBase.getCurrency().getUniqueName();\r\n                    Log.javascript.debug(\"**Capital : levelAmtInBase :\" + levelAmtInBase);\r\n                    if (levelAmtInBase.compareTo(lastAmt) >= 0)\r\n                    {\r\n                        lastAmt = levelAmtInBase;\r\n                        var approvalStatus = approvalLevels.get(x).getFieldValue(\"ApprovalStatus\");\r\n                        var levelRole = approvalLevels.get(x).getFieldValue(\"ApprovalRole\");\r\n                        if (amtInBase.compareTo(levelAmtInBase) >= 0 && approvalStatus != 0 && levelRole != null)\r\n                        {\r\n                            role = levelRole;\r\n                            if  (approvalStatus == 2)\r\n                                isRequired = true;\r\n                            else\r\n                                isRequired = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Log.javascript.debug(\"capital action : role : \" + role + \" isRequired : \" + isRequired);\r\n        if (role != null && isRequired != null)\r\n        {\r\n         var reason1 = \"Requisition for capitalized item requires approval by a Capital Approver\";\r\n        return ApprovalRequest.create(r, role, isRequired, \"CAT_RuleReasons\", reason1);\r\n        }\r\n        else\r\n        {\r\n           var approver = Role.getRole(\"Data Maintainer - CBS\");\r\n           var reason =\"For This PR CapitalAmount Role doesnot exist\";\r\n           var required = true;\r\n          return ApprovalRequest.create(r, approver, required, \"cat.rulereasons\", reason);\r\n\r\n        }\r\n           \r\n        \r\n}\r\ncapital_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSplitterRule";
            Condition = "function purchasemanager_condition (r, LineItems)\r\n{\r\n//PO Conversion condition\r\nif(r.getFieldValue(\"POComment\") != null)\r\n{\r\n    return false;\r\n}\r\n\tvar isadhoc= LineItems.getFieldValue(\"IsAdHoc\");\r\n\tLog.javascript.debug(\"blockadmin **** isadhoc\" + isadhoc);\r\n\r\nreturn (isCompanyApprovalRule(r, \"PurchaseManager\") && (isadhoc));\r\n\r\n}\r\npurchasemanager_condition;";
            Enabled = true;
            FieldPath = LineItems;
            Name = "PurchaseManager (CAT)";
            Permission = RuleEditor;
            Result = "function purchasemanager_action (r, LineItems)\r\n{\r\nLog.javascript.debug(\"purchasemanager inside  action\" );\r\n\r\nvar datarole= Role_DataMaintainer;\r\nvar reason =\"DataMaintainer_PM\";\r\nvar role = CatUtil.getRoleforSplitterRule(r,\"PM\",LineItems);\r\nLog.javascript.debug(\"blockadmin**** role : \" + role );\r\nvar required = true;\r\nif (role!= null)\r\n{\r\nreason =\"Purchase Manager Must Approve\";\r\nreturn ApprovalRequest.create(r, role, required, \"cat.sap\", reason);\r\nLog.javascript.debug(\"purchasemanager**** role is active\");\r\n\r\n}\r\nelse\r\n{\r\nreturn ApprovalRequest.create(r, datarole, required, \"cat.sap\", reason);\r\n}\r\n}\t\t\r\npurchasemanager_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSplitterRule";
            Condition = "function cascadecapital_condition(r,capitalapprover) \r\n{\r\n//PO Conversion condition\r\nif(r.getFieldValue(\"POComment\") != null)\r\n{\r\n    return false;\r\n}\r\n\tLog.script.debug(\"Entered into Capital Condition\");\t\r\n\tLog.customer.debug(\"Entered into Capital Condition\");\t\r\n\t//var cascade = r.getDottedFieldValue(\"CompanyCode.AllowCascadeCapital\");\r\n\tvar cascObj = r.getDottedFieldValue(\"CompanyCode.AllowCascadeCapital\");\r\n\tvar cascade = false;\r\n\tif(cascObj != null) {\r\n\t\tcascade = cascObj.booleanValue();\r\n\t}\r\n\tif (cascade)\r\n\t{\r\n\t\treturn true;\r\n\t}\r\n\treturn false;\r\n}\r\ncascadecapital_condition;";
            Enabled = true;
            FieldPath = CascadeCapitalRoles;
            Name = "CascadeCapital(CAT)";
            Permission = RuleEditor;
            Result = "function cascadecapital_action (r,capitalapprover) \r\n {\t\t\t\r\n  \t\tLog.script.debug(\"Entered into the Capital ACTION\");\r\n\t\tvar cascadeCapApprover = \tcapitalapprover.getIfAny();\r\n\t\tvar capitalRole =cascadeCapApprover.getFieldValue(\"Approver\");\r\n\t\tLog.script.debug(\"The value of getUser is \" + capitalRole);\r\n\t\tvar approvalStatus = cascadeCapApprover.getFieldValue(\"ApprovalStatus\");\r\n\t\tvar isRequired = false; \r\n\t\tif(approvalStatus == 2)\r\n\t\t\tisRequired = true;\r\n\t\tLog.script.debug(\"Before Returning the Approval Request\");\r\n\t\treturn ApprovalRequest.create(r,\r\n                               capitalRole,\r\n                               isRequired,\r\n                               \"cat_RuleReasons\",\r\n                               \"catCascadeCapitalRule\");\t\r\n\r\n}\t\r\ncascadecapital_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSplitterRule";
            Condition = "function capitalIT_condition(r, LineItems)\r\n{\r\n//PO Conversion condition\r\nif(r.getFieldValue(\"POComment\") != null)\r\n{\r\n    return false;\r\n}\r\n\tLog.javascript.debug(\"capitalIT condition : Condition *** STARTED ***\" );\r\n\tvar compCode = r.getDottedFieldValue(\"CompanyCode\");\r\n\tif(compCode == null)\r\n\t\treturn false;\r\n\t\r\n\tLog.javascript.debug(\"capitalIT condition : CompanyCode => \"+ r.getDottedFieldValue(\"CompanyCode.UniqueName\") );\r\n\tvar flag = false;\r\n\tvar isCapitalIT = LineItems.getDottedFieldValue(\"IsCapitalIT\");\r\n\tLog.javascript.debug(\"capitalIT condition : isCapitalIT =>\" + isCapitalIT);\r\n\r\n\tif ((isCapitalIT != null) && ((isCapitalIT.equalsIgnoreCase(\"Y\"))))\r\n\t{\r\n\tLog.javascript.debug(\"capitalIT condition : isCapitalIT Found\");\r\n\tflag = true;\r\n\t}\r\n\t\r\n\tLog.javascript.debug(\"capitalIT condition : flag =>\" + flag );\r\n\treturn isCompanyApprovalRule(r, \"CapitalIT\") && (flag);\r\n}\r\ncapitalIT_condition;";
            Enabled = true;
            FieldPath = LineItems;
            Name = "CapitalIT (CAT)";
            Permission = RuleEditor;
            Result = "function capitalIT_action (r, LineItems)\r\n{\r\n    var datarole= Role_DataMaintainer;    \r\n    //var datarole= Role.getRole(\"Data Maintainer\");\r\n    var reason =\"CapitalIT\";\r\n    var capitalIT = \"CapitalIT\"\r\n    var required = true;\r\n    var priority = 9;\r\n    Log.javascript.debug(\"capitalIT action : Action  *** STARTED ***\" );\r\n    var approvalRules = r.getDottedFieldValue(\"CompanyCode.ApprovalRules\");\r\n    for (var i=0; i < approvalRules.size(); i++)\r\n\t{\r\n\tvar rule = approvalRules.get(i);\r\n\tvar ruleTypeString = rule.getFieldValue(\"RuleType\");\r\n\tLog.javascript.debug(\"capitalIT action : ruleTypeString : \" + ruleTypeString);\r\n\tif (ruleTypeString.equals(capitalIT)) \r\n\t\t{\r\n\t\tLog.javascript.debug(\"capitalIT action : RuleType Found => \"+ruleTypeString);\r\n    \t\tvar role = CatUtil.getRoleforSplitterRule(r,\"CI\",LineItems);\r\n    \t\tLog.javascript.debug(\"capitalIT **** role : \" + role );    \t\t\r\n    \t\tif (role!= null)\r\n   \t\t\t{\r\n   \t\t\tLog.javascript.debug(\"capitalIT action : Found Role=> \" +role);\r\n   \t\t\trequiredParam = rule.getFieldValue(\"IsWatcher\");\r\n   \t\t\tLog.javascript.debug(\"capitalIT action : IsWatcher => \" + requiredParam);\r\n   \t\t\t\r\n   \t\t\tif(requiredParam.equalsIgnoreCase(\"Y\"))\r\n   \t\t\t\trequired = false;\r\n\t\t\t\r\n\t\t\tLog.javascript.debug(\"capitalIT action : required => \"+required);\r\n\t\t\t\r\n\t\t\tvar  appre= ApprovalRequest.create(r, role, true, \"cat.rulereasons\", reason);\r\n    \t\t\t}\r\n    \t\telse\r\n        \t\tvar  appre= ApprovalRequest.create(r, datarole, true, \"cat.rulereasons\", reason);\r\n\r\n\t\t\tvar pr = getPriority(r, capitalIT);\r\n\t\t\tappre.setDottedFieldValue(\"Priority\",pr);\r\n\t\t\t\r\n\t\t\treturn appre;\r\n    \r\n\t\t}\r\n\t}\r\n}\r\ncapitalIT_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "function ERFQPurchasingFinal_condition (r) \r\n{\r\n\tvar isReqERFQ = isERFQ(r);\r\n\tLog.javascript.debug(\r\n\t\t\"ERFQPurchasingFinal (CAT) Condition isReqERFQ: \" + isReqERFQ);\r\n\treturn isReqERFQ;\r\n}\r\nERFQPurchasingFinal_condition;";
            Enabled = false;
            Name = "ERFQPurchasingFinal (CAT) 1";
            Permission = RuleEditor;
            Result = "function ERFQPurchasingFinal_action (r) \r\n{\r\n\tvar isReqERFQ= isERFQ(r);\r\n\tLog.javascript.debug(\r\n\t\t\"ERFQPurchasingFinal (CAT) Action - isReqERFQ: \" + isReqERFQ);\r\n\tvar approver = Role_DataMaintainer;\r\n\tvar reason = \"DataMaintainer_General\"; \r\n\tvar required = true;\r\n\tvar LineItems = r.getLineItems();\r\n\tvar role = CatUtil.getRoleforSplitterRule(r,\"IP\",LineItems);\r\n\tLog.javascript.debug(\r\n\t\t\t\"ERFQPurchasingFinal (CAT) Action - role: \" + role);\r\n\r\n\tif (role != null) {\r\n\t\tapprover = role;\r\n\t\tif (isReqERFQ) {\r\n\t\t\treason = \"ERFQPurchasingFinal\";\r\n\t\t}\r\n\t}\r\n\tLog.javascript.debug(\r\n\t\t\"ERFQPurchasingFinal (CAT) Action - reason: \" + reason);\r\n\r\n\treturn ApprovalRequest.create(\r\n\t\tr, \r\n\t\tapprover, \r\n\t\trequired, \r\n\t\t\"cat.rulereasons.vcsv3\", \r\n\t\treason\r\n\t);\r\n}\r\nERFQPurchasingFinal_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "function eRFQNonPurchPreparer_condition (r) \r\n{\r\n//PO Conversion condition\r\nif(r.getFieldValue(\"POComment\") != null)\r\n{\r\n    return false;\r\n}\r\n    var user = r.getPreparer();\r\n    var isPURCHASING = user.hasPermission(\"CatPurchasing\");\r\n    var wasReqERFQ = wasERFQ(r);\r\n\r\n    return (wasReqERFQ && !isPURCHASING);\r\n}\r\neRFQNonPurchPreparer_condition;";
            Enabled = true;
            Name = "eRFQNonPurchPreparer (CAT)";
            Permission = RuleEditor;
            Result = "function eRFQNonPurchPreparer_action (r) \r\n{\r\n\treturn ApprovalRequest.create(\r\n\t\tr,\r\n\t\tr.getPreparer(),\r\n\t\ttrue,\r\n\t\t\"cat.rulereasons.vcsv3\",\r\n\t\t\"eRFQNonPurchPreparer\"\r\n\t);\r\n}\r\neRFQNonPurchPreparer_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSplitterRule";
            Condition = "function ERFQPurchasingFinal_condition (r,LineItems) \r\n{\r\n//PO Conversion condition\r\nif(r.getFieldValue(\"POComment\") != null)\r\n{\r\n    return false;\r\n}\r\n\tvar isReqERFQ = isERFQ(r);\r\n\tLog.javascript.debug(\r\n\t\t\"ERFQPurchasingFinal (CAT) Condition isReqERFQ: \" + isReqERFQ);\r\n\treturn isReqERFQ;\r\n}\r\nERFQPurchasingFinal_condition;";
            Enabled = true;
            FieldPath = LineItems;
            Name = "ERFQPurchasingFinal (CAT)";
            Permission = RuleEditor;
            Result = "function ERFQPurchasingFinal_action (r,LineItems) \r\n{\r\n\tvar isReqERFQ= isERFQ(r);\r\n\tLog.javascript.debug(\r\n\t\t\"ERFQPurchasingFinal (CAT) Action - isReqERFQ: \" + isReqERFQ);\r\n\tvar approver = Role_DataMaintainer;\r\n\tvar reason = \"DataMaintainer_General\"; \r\n\tvar required = true;\r\n\t// Santanu : As per new change need to add buyer of the first line, not Indirect Purchasing Role\r\n\t//var role = CatUtil.getRoleforSplitterRule(r,\"IP\",LineItems);\r\n\tvar role = getFirstLineBuyer(r);\r\n\tLog.javascript.debug(\r\n\t\t\t\"ERFQPurchasingFinal (CAT) Action - role: \" + role);\r\n\r\n\tif (role != null) {\r\n\t\tapprover = role;\r\n\t\tif (isReqERFQ) {\r\n\t\t\treason = \"ERFQPurchasingFinal\";\r\n\t\t}\r\n\t}\r\n\tLog.javascript.debug(\r\n\t\t\"ERFQPurchasingFinal (CAT) Action - reason: \" + reason);\r\n\r\n\treturn ApprovalRequest.create(\r\n\t\tr, \r\n\t\tapprover, \r\n\t\trequired, \r\n\t\t\"cat.rulereasons.vcsv3\", \r\n\t\treason\r\n\t);\r\n}\r\nERFQPurchasingFinal_action;\r\n\r\nfunction getFirstLineBuyer(r)\r\n{\r\n\tif(r.getLineItems()!=null && r.getLineItems().size()>0)\r\n\t{\r\n\t\tvar li = r.getLineItems().get(0);\r\n\t\tvar buyer = li.getDottedFieldValue(\"BuyerCode.UserID\");\r\n\t\treturn buyer;\r\n\t}\r\n\treturn null;\r\n}";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "function expenseManager_condition(r, LineItems)\r\n{\r\n//PO Conversion condition\r\nif(r.getFieldValue(\"POComment\") != null)\r\n{\r\n    return false;\r\n}\r\n\tLog.javascript.debug(\"ExpenseManager : condition : ****START****\");\r\n                // if(!isCompanyApprovalRule(r, \"Expense Approver\"))\r\n\t//{\r\n\t//\treturn false;\t\t\r\n\t//}\r\n\tvar lic = r.getLineItems();\r\n\tLog.javascript.debug(\"LineItems: lic :\" + lic);\r\n\tvar noOfLineItems = lic.size();\r\n\tLog.javascript.debug(\"ExpenseManager : noOfLineItems :\" + noOfLineItems);\r\n\tvar CompanyCode = r.getDottedFieldValue(\"CompanyCode.UniqueName\");\r\n\tLog.javascript.debug(\"ExpenseManager : condition : companyCode :\" + CompanyCode);\r\n\tfor(var i=0;i<noOfLineItems;i++)\r\n\t{\r\n\t\tLog.javascript.debug(\"ExpenseManager : Inside loop\");\r\n\t\tvar line = lic.get(i);\r\n\t\tvar SpliAcc = line.getDottedFieldValue(\"Accountings.SplitAccountings\");\r\n\t\tLog.javascript.debug(\"ExpenseManager : SplitAccounting\" + SpliAcc);\r\n                var SplitLine=SpliAcc.get(0);\r\n                Log.javascript.debug(\"ExpenseManager : First SplitAccounting\" + SplitLine);\r\n                var GeneralLedger=SplitLine.getFieldValue(\"GeneralLedgerText\")\r\n\t\tLog.javascript.debug(\"ExpenseManager : condition : GL :\" + GeneralLedger);\r\n\t\tif(CatUtil.isExpenseManagerRequired(CompanyCode,GeneralLedger))\r\n\t\t{\r\n\t\r\n\t\tLog.javascript.debug(\"ExpenseManager : condition : Expense Manager Required \");\t\t\r\n\t\treturn true;\r\n\t\t}\r\n\t}\r\n\t\r\n\tLog.javascript.debug(\"ExpenseManager : condition : ****END****\");\t\r\n\t\r\n\treturn false;\t\r\n}\r\nexpenseManager_condition;";
            Enabled = true;
            Name = "Expense Approver";
            Permission = RuleEditor;
            Result = "function expenseManager_action(r, LineItems)\r\n{\r\n\tLog.javascript.debug(\"ExpenseManager : action : ****START****\");\r\n        var CompanyCode = r.getDottedFieldValue(\"CompanyCode.UniqueName\");\r\n        var rolename=\"E_CBS_MX_\"+CompanyCode;\r\n        var role=Role.getRole(rolename); //Role_Data_Maintainer;\r\n        return ApprovalRequest.create(r, role, true, \"ExpenseManager has to be approved\", \"Expense Manager\");\r\n\t\r\n}\r\nexpenseManager_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSplitterRule";
            Condition = "function categoryManager_condition (r, LineItems) \r\n{\r\n\tLog.javascript.debug(\"CategoryManager : condition : ****START****\");\r\n\t\r\n\tif(!isCompanyApprovalRule(r, \"CategoryManager\"))\r\n\t{\r\n\t\treturn false;\t\t\r\n\t}\r\n\t\r\n\tvar CompanyCode = r.getDottedFieldValue(\"CompanyCode.UniqueName\");\r\n\tLog.javascript.debug(\"CategoryManager : condition : companyCode :\" + CompanyCode);\r\n\tvar CommodityCode = LineItems.getDottedFieldValue(\"Description.CommonCommodityCode.UniqueName\");\r\n\tLog.javascript.debug(\"CategoryManager : condition : CommodityCode :\" + CommodityCode);\r\n\tif (CommodityCode == null){\r\n\t\treturn false;\r\n\t}\r\n\tvar CCToSearch = CommodityCode.substring(0,2);\r\n\tLog.javascript.debug(\"CategoryManager : condition : CCToSearch :\" + CCToSearch);\r\n\tvar CCAmtToCompare = getAggrigatedCategoryAmt(r,CCToSearch)\r\n\tLog.javascript.debug(\"CategoryManager : condition : CCAmtToCompare :\" + CCAmtToCompare);\r\n\tif(CatUtil.isCategoryManagerRequired(CCToSearch,CompanyCode,CCAmtToCompare)){\r\n\t\r\n\t\tLog.javascript.debug(\"CategoryManager : condition : Category Manager Required \");\t\t\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tLog.javascript.debug(\"CategoryManager : condition : ****END****\");\t\r\n\t\r\n\treturn false;\r\n}\r\ncategoryManager_condition;\r\n\r\nfunction getAggrigatedCategoryAmt(requistion, CCToSearch){\r\n\r\n\tLog.javascript.debug(\"getAggrigatedCategoryAmt ****START****\");\t\r\n\t\r\n\tvar lic = requistion.getLineItems();\r\n\tLog.javascript.debug(\"getAggrigatedCategoryAmt : lic :\" + lic);\r\n\t\r\n\tvar noOfLineItems = lic.size();\r\n\tLog.javascript.debug(\"getAggrigatedCategoryAmt : noOfLineItems :\" + noOfLineItems);\t\r\n\tvar Money = ariba.basic.core.Money;\r\n\tvar Currency = ariba.basic.core.Currency;\r\n\tvar aggAmt = new Money(new BigDecimal(\"0\"), Currency.getBaseCurrency());\r\n\t\r\n\tfor(var i=0;i<noOfLineItems;i++)\r\n\t{\r\n\t\t    var line = lic.get(i);\t\r\n\t\t    \r\n\t\t    var CommCode = line.getDottedFieldValue(\"Description.CommonCommodityCode.UniqueName\");\r\n\t\t    Log.javascript.debug(\"getAggrigatedCategoryAmt : CommCode :\" + CommCode);\r\n\t\t    \r\n\t\t    if((CommCode != null) && (CommCode.startsWith(CCToSearch))){\r\n\t\t\tvar lineAmt = line.getAmount();\r\n\t\t\taggAmt = aggAmt.add(lineAmt);\r\n\t\t    }\r\n\t}\r\n\t\r\n\tLog.javascript.debug(\"isApprReqByCommCode ****END****\");\t\r\n\t\r\n\treturn aggAmt;\r\n}\r\n\r\n";
            Enabled = false;
            FieldPath = LineItems;
            Name = "Copy of CategoryManager (CAT)";
            Permission = RuleEditor;
            Result = "function categoryManager_action (r, LineItems) \r\n{\r\n\tvar approver = Role_DataMaintainer;\r\n\tvar reason = \"DataMaintainer_CategoryManager\";\r\n\tvar required = true;\r\n\t\r\n\tvar CompanyCode = r.getDottedFieldValue(\"CompanyCode.UniqueName\");\r\n\tLog.javascript.debug(\"CategoryManager : condition : companyCode :\" + CompanyCode);\r\n\tvar CommodityCode = LineItems.getDottedFieldValue(\"Description.CommonCommodityCode.UniqueName\");\r\n\tLog.javascript.debug(\"CategoryManager : condition : CommodityCode :\" + CommodityCode);\r\n\tif (CommodityCode == null){\r\n\t\treturn false;\r\n\t}\r\n\tvar CCToSearch = CommodityCode.substring(0,2);\r\n\tLog.javascript.debug(\"CategoryManager : condition : CCToSearch :\" + CCToSearch);\r\n\tvar CCAmtToCompare = getAggrigatedCategoryAmt(r,CCToSearch)\r\n\tLog.javascript.debug(\"CategoryManager : condition : CCAmtToCompare :\" + CCAmtToCompare);\r\n\t\r\n\tvar approverVal = CatUtil.getCategoryManager(CCToSearch,CompanyCode,CCAmtToCompare);\r\n\tvar isWatcher = CatUtil.getCategoryManagerisWatcher(CCToSearch,CompanyCode,CCAmtToCompare);\r\n\tif(isWatcher != null && isWatcher.equals(\"Y\"))\r\n\t{\r\n\t\treason = \"CategoryManager must notified\";\r\n\t\trequired = false;\r\n\t}\r\n\tif(approverVal != null)\r\n\t{\r\n\t\treason = \"Requisition for IT items requires approval by the IT Approver\";\r\n\t\tvar approverrole = Role.getRole(approverVal);\r\n\t\tLog.javascript.debug(\"categoryManager : action : Approver is: \" + approver);\r\n\t\tif(approverrole != null)\r\n\t\t{\r\n\t\t\tvar approverListNameCM = getApprovalList(approverrole);\r\n\t\t\tif(approverListNameCM!=null)\r\n\t\t\t\t{\r\n\t\t\t\tLog.javascript.debug(\"approverListName (FINAL) =\" + approverListNameCM);\r\n\t\t\t\tvar approverList = config.java.common.CatCommonUtil2.getHazmatApproverList(approverListNameCM, r.getPartition());\r\n\t\t\t\t\t\r\n\t\t\t\treturn ApprovalRequest.create(r, approverList, required, \"cat.sap\", reason);\r\n\t\t\t\tLog.javascript.debug(\"categoryManager **** role is active\");\r\n\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tapprover = User.getUser(approverVal,\"PasswordAdapter1\");\r\n\t\t\tLog.javascript.debug(\"CategoryManager : Action : Approver is a user, not Role: \" + approver);\r\n\t\t}\t\t\t\t\r\n\t}\r\n\treturn ApprovalRequest.create(r, approver, required, \"cat.rulereasons\", reason);\r\n}\r\ncategoryManager_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "function MACH1Cutoverapprover_condition(r) \r\n{    \r\n      var cc = r.getDottedFieldValue(\"CompanyCode.UniqueName\");\r\n      if(cc!=null)\r\n      {\r\n\tvar nbd = r.getNeedBy();\r\n\tLog.javascript.debug(\"plantcodeapprover**** CompanyCode UniqueName from Requisition \" + cc);\r\n\tLog.javascript.debug(\"plantcodeapprover**** needbydate \" + nbd);\r\n       if(nbd!=null)\r\n       {\r\n\tvar day = nbd.getDate();\r\n\tvar sl = '/';\r\n\tLog.javascript.debug(\"plantcodeapprover**** date \" + day);\r\n\tvar month = (nbd.getMonth()) + 1;\r\n\tLog.javascript.debug(\"plantcodeapprover**** month \" + month);\r\n\tvar year = nbd.getYear();\r\n\tif(year < 2000) \r\n\tyear += 1900;\r\n\tLog.javascript.debug(\"plantcodeapprover**** year \" + year);\r\n\tvar nbdf = day + sl + month + sl + year;\r\n\tvar cc1 = '1100';\r\n\tvar cc2 = '1200';\r\n\tvar cc3 = '1400';\r\n\tvar cc4 = '1000';\r\n\tLog.javascript.debug(\"plantcodeapprover**** needbydate \" + nbdf);\r\n\tvar dat1p1 = '31/12/3009';\r\n\tvar dat2p1 = '30/12/3009';\r\n\tvar dat3p1 = '1/1/3010';\r\n\tvar dat1p2 = '31/12/3019';\r\n\tvar dat2p2 = '30/12/3019';\r\n\tvar dat3p2 = '1/1/3020';\r\n\tvar dat1p3 = '31/12/3039';\r\n\tvar dat2p3 = '30/12/3039';\r\n\tvar dat3p3 = '1/1/3040';\r\n\tvar dat1p4 = '31/12/3029';\r\n\tvar dat2p4 = '30/12/3029';\r\n\tvar dat3p4 = '1/1/3030';\r\n\tif(((cc == cc1)&&((nbdf == dat1p1)||(nbdf == dat2p1)||(nbdf == dat3p1)))||((cc == cc2)&&((nbdf == dat1p2)||(nbdf == dat2p2)||(nbdf == dat3p2)))||((cc == cc3)&&((nbdf == dat1p3)||(nbdf == dat2p3)||(nbdf == dat3p3)))||((cc == cc4)&&((nbdf == dat1p4)||(nbdf == dat2p4)||(nbdf == dat3p4))))\r\n\t{\r\n\tLog.javascript.debug(\"plantcodeapprover****expected date and needbydate are same: \" + nbd);\r\n\treturn true;\r\n\t}\r\n        else\r\n        {\r\n        Log.javascript.debug(\"plantcodeapprover****expected date and needbydate are different: \" + nbd);\r\n        return false;\r\n        }     \r\n       } \r\n      }  \r\n      return false;\r\n}\r\nMACH1Cutoverapprover_condition;";
            Enabled = true;
            Name = MACH1Cutoverapprover;
            Permission = RuleEditor;
            Result = "function MACH1Cutoverapprover_action (r) \r\n{\r\n   Log.javascript.debug(\"plantcodeapproverinside  action\" );\r\n   var approver =  Role.getRole(\"NonMACH1_Cutover_Approver\");\r\n   var required = true;\r\n   if(approver!=null)\r\n   {\r\n   Log.javascript.debug(\"plantcodeapprover****approver is \" + approver);\r\n   return ApprovalRequest.create(r, approver, required, \"ruleReasons\", \"Approval Required for Conversion from US to Non-Mach1\"); \r\n   }\r\n}\r\nMACH1Cutoverapprover_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "function importPRRequester_condition (r) \r\n{\r\n if( r.getFieldValue(\"POComment\") != null)\r\n{\r\n    return true;\r\n}\r\nreturn false;\r\n}\r\nimportPRRequester_condition;";
            Enabled = true;
            Name = "Requester Rule for Import PR";
            Permission = RuleEditor;
            Result = "function importPRRequseter_action (r) \r\n{\r\n\treturn ApprovalRequest.create(r, r.getRequester(), false, \"rulereason\", \"Requester is added as watcher for imported PR's\");\r\n}\r\nimportPRRequseter_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSplitterRule";
            Condition = "function CSCL_Customs_Team_condition(r, LineItems)\r\n{\r\n\tLog.javascript.debug(\"Enters: CSCL_Customs_Team_condition\" );\r\n\tvar companyCode = r.getDottedFieldValue(\"CompanyCode\");\r\n\tvar flag = false;\r\n\tif(companyCode != null){\r\n\t\tvar companyUniqueName =  companyCode.getUniqueName();\r\n\t\tvar isNonCatalog = LineItems.getDottedFieldValue(\"IsAdHoc\");\r\n\t\tLog.javascript.debug(\"CSCL_Customs_Team_condition: companyUniqueName:\" + companyUniqueName);\r\n\t\tLog.javascript.debug(\"CSCL_Customs_Team_condition: isNonCatalog:\" + isNonCatalog);\r\n\t\tif(companyUniqueName.equals(\"FT00\") && isNonCatalog ){\r\n\t\t\tflag = true;\t\t\r\n\t\t}\r\n\t}\r\n\t\t\r\n\treturn flag;\r\n}\r\nCSCL_Customs_Team_condition;";
            Enabled = false;
            FieldPath = LineItems;
            Name = "Copy of CSCL Customs Team";
            Permission = RuleEditor;
            Result = "function CSCL_Customs_Team_action (r, LineItems)\r\n{\r\n    sapSource = r.getDottedFieldValue(\"CompanyCode.SAPSource\");\r\n    companyCode = r.getDottedFieldValue(\"CompanyCode.UniqueName\");\r\n    Log.javascript.debug(\"CSCL_Customs_Team_action: CompanyCode\" + companyCode);\r\n    var str = \"FS_\"+sapSource+\"_\"+companyCode;\r\n    Log.javascript.debug(\"CSCL_Customs_Team_action\" + str);\r\n    var approver = Role.getRole(\"CSCL_CBS_FT00\");\r\n    Log.javascript.debug(\"CSCL_Customs_Team_action\" + approver);\r\n    if(approver!=null){\r\n        Log.javascript.debug(\"CSCL_Customs_Team_action\" + approver.getUniqueName());\r\n        var required =true;\r\n        var reason_inv = \"CSCL_Customs_Team_action require special approval\";\r\n        return ApprovalRequest.create(r, approver, required, \"reason_inv\",reason_inv);\r\n    }   \r\n}\r\nCSCL_Customs_Team_action;";
        }
    );
    Type = ariba.purchasing.core.Requisition;
}
