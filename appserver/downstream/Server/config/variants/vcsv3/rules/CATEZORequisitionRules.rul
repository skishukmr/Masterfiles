/*
    Copyright (c) 1996-2010 Ariba, Inc.
    All rights reserved. Patents pending.

    Rules file.

    Generated on Tue Nov 30 23:34:34 PST 2010

    Do not edit this file!
*/
{
    Chains = (
        {
            Classname = "ariba.approvable.rules.JavaScriptChainRule";
            Condition = "function supervisorChain_condition (r, ar)\r\n{\r\n  var result = false;\r\n  var type = ar.getType();\r\n  var approver = ar.getApprover();\r\n  var puser = null;\r\n  Log.javascript.debug(\r\n    \"SupervisorChain (CAT) Condition - type: \" + type);\r\n  if (isType(type,\"Supervisor\") && (approver instanceof User)) {\r\n    var required = ar.getReasonKey().indexOf(\"Watcher\")==-1;\r\n    Log.javascript.debug(\r\n      \"SupervisorChain (CAT) Condition - required: \" + required);\r\n    if (required) { // only continue if Supervisor was not watcher\r\n      puser = \r\n        CommonUser.getPartitionedUser(approver, r.getPartition());\r\n      Log.javascript.debug(\r\n        \"SupervisorChain (CAT) Condition - part user||approver: \" +\r\n        puser);\r\n      if (puser == null) {\r\n        Log.javascript.debug(\r\n          \"SupervisorChain (CAT) Condition - \" + \r\n          \"PUSER is NULL, return TRUE\");\r\n        return true;\r\n      }\r\n      var code = puser.getFieldValue(\"ExpenseApprovalCode\");\r\n      Log.javascript.debug(\r\n      \"SupervisorChain (CAT) Condition - approval code: \" + code);\r\n      if (code != null) {\r\n        var limit = getUserExpenseLimit(code);\r\n        if (limit != null) {\r\n          var total = r.getTotalCost();\r\n          Log.javascript.debug(\r\n            \"SupervisorChain (CAT) Condition - limit/total: \" + \r\n            limit + \" / \" + total);\r\n          // must add total of any Not-to-Exceed line items\r\n          total = \r\n            ariba.basic.core.Money.add(\r\n              total, \r\n              CatUtil.getNotToExceedTotal(r.getLineItems())\r\n            );\r\n          Log.javascript.debug(\r\n            \"SupervisorChain (CAT) Condition - NEW total (w/NTE Prices): \"\r\n            + total);  \r\n          if (limit.compareTo(total) < 0) {\r\n            var supervisor = User2Supervisor(ar.getApprover());\r\n            var supcode = \r\n              supervisor.getFieldValue(\"ExpenseApprovalCode\");\r\n            Log.javascript.debug(\r\n              \"SupervisorChain (CAT) Condition - Supervisor Exp Code: \" +\r\n              supcode);\r\n            var icode = supcode.substring(1);\r\n            if (java.lang.Integer.parseInt(icode) < 12) \r\n            {\r\n              var cupid = supervisor.getFieldValue(\"UniqueName\");\r\n              Log.javascript.debug(\r\n                \"SupervisorChain (CAT) Condition - Supervisor's CUPID: \" +\r\n                cupid);\r\n              result = true;\r\n            }            \r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return result;\r\n}        \r\nsupervisorChain_condition;";
            Enabled = true;
            Name = "SupervisorChain (CAT)";
            Permission = RuleEditor;
            Result = "function supervisorChain_action (r, ar)\r\n{\r\n\tvar approver = Role_DataMaintainer;\r\n\tvar reason = \"DataMaintainer_Supervisor\";\r\n\tvar required = true;\r\n\tvar partuser = \r\n\t\tCommonUser.getPartitionedUser(\r\n\t\t\tar.getApprover(), r.getPartition()\r\n\t\t);\r\n\tLog.javascript.debug(\r\n\t\t\"SupervisorChain (CAT) Action - partuser = null? \" +\r\n\t\t(partuser == null));\r\n\tif (partuser != null) {\r\n\t\tvar supervisor = User2Supervisor(ar.getApprover());\r\n\t\tif (supervisor instanceof User) {\r\n\t\t\tLog.javascript.debug(\r\n\t\t\t\"SupervisorChain (CAT) Action - \" + \r\n\t\t\t\"supervisor: \" + supervisor);\r\n\t\t\tapprover = supervisor;\r\n\t\t\treason = \"Chain_Supervisor\";\r\n\t\t}\r\n\t}\r\n\treturn ApprovalRequest.create(\r\n\t\tr, \r\n\t\tapprover, \r\n\t\trequired, \r\n\t\t\"cat.rulereasons.vcsv3\", \r\n\t\treason);\r\n}\r\nsupervisorChain_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptChainRule";
            Condition = "function buyerCodeChain_condition (r, ar)\r\n{\r\n  var result = false;\r\n  var type = ar.getType();\r\n  var reasonKey = ar.getReasonKey();\r\n  Log.javascript.debug(\r\n    \"BuyerCodeChain (CAT) - type/reasonKey: \" + type + reasonKey);\r\n  if (isType(type,\"BuyerCode\") && reasonKey.indexOf(\"EUR\") < 0) \r\n  {\r\n    var adhocTotal = getAdHocTotal(r.getLineItems());\r\n    var key = null;\r\n    if (isType(type,\"BuyerCodeChain\"))\r\n    {\r\n      key = \"PurchMgrEUR\";\r\n    } \r\n    else\r\n    {\r\n      key = \"PurchMgrG\";\r\n    }\r\n    var bdThreshold = getBuyerCodeThreshold(key);\r\n    if (bdThreshold != null)\r\n    {\r\n      Log.javascript.debug(\r\n        \"BuyerCodeChain (CAT) - bdThreshold \" + bdThreshold);\r\n      result = adhocTotal.compareTo(bdThreshold) > 0;    \r\n    }\r\n  }\r\n  return result;\r\n}        \r\nbuyerCodeChain_condition;";
            Enabled = true;
            Name = "BuyerCodeChain (CAT)";
            Permission = RuleEditor;
            Result = "function buyerCodeChain_action (r, ar)\r\n{\r\n  var approver = Role_DataMaintainer;\r\n  var reason = \"DataMaintainer_BuyerCode\";\r\n  var required = true;\r\n  var key = null;\r\n  var type = ar.getType();\r\n  if (isType(type,\"BuyerCodeChain\"))\r\n  {\r\n    key = \"PurchMgrEUR\";\r\n  }\r\n  else\r\n  {\r\n    key = \"PurchMgrG\";\r\n  }\r\n  var row = Rules_BuyerCodeApproversTable(key);\r\n  if (!StringUtil.nullOrEmptyOrBlankString(row.get(0)))\r\n  {\r\n    var principal = UniqueName2Principal(row.get(1),r.getPartition());\r\n    if (principal != null)\r\n    {\r\n      approver = principal;\r\n      reason = \"Chain_BuyerCode_\" + key;\r\n    }\r\n  }\r\n  return ApprovalRequest.create(\r\n    r, \r\n    approver, \r\n    required, \r\n    \"cat.rulereasons.vcsv3\", \r\n    reason);\r\n}\r\nbuyerCodeChain_action;";
        }
    );
    Classname = ariba.approvable.rules.RuleSet;
    Constraints = (
        {
            Classname = "ariba.approvable.rules.JavaScriptConstraint";
            Condition = "function master_constraint (left, right)\r\n{\r\n\tvar lt = left.getType();\r\n\tvar rt = right.getType();\r\n\r\n\tif (isType(lt, \"Supervisor\") && isType(rt, \"SupervisorChain\")) {\r\n\t\treturn true;\r\n\t}\r\n\tif (isType(lt,\"SupervisorChain\") && isType(rt,\"SupervisorChain\")) {\r\n\t\treturn (User2Supervisor(left.getApprover()) == right.getApprover());\r\n\t}\r\n\treturn false;\r\n}\r\nmaster_constraint;";
            Enabled = true;
            Name = "AllConstraints (CAT)";
            Permission = RuleEditor;
        },
        {
            ApprovalRequestType = "MalagaReviewer (CAT)";
            Classname = ariba.approvable.rules.FirstConstraint;
            Enabled = true;
            Name = "MalagaReviewer (CAT) FIRST";
            Permission = RuleEditor;
        },
        {
            ApprovalRequestType = "BuyerCodeChain (CAT)";
            Classname = ariba.approvable.rules.LastConstraint;
            Enabled = true;
            Name = "BuyerCodeChain (CAT) LAST";
            Permission = RuleEditor;
        },
        {
            After = "CustomShipTo (CAT)";
            Before = "OnBehalfOf (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "OnBehalfOf (CAT) BEFORE CustomShipTo (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "NonCatalog (CAT)";
            Before = "OnBehalfOf (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "OnBehalfOf (CAT) BEFORE NonCatalog (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "CapitalApprover (CAT)";
            Before = "OnBehalfOf (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "OnBehalfOf (CAT) BEFORE CapitalApprover (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "DesignatedApprover (CAT)";
            Before = "OnBehalfOf (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "OnBehalfOf (CAT) BEFORE DesignatedApprover (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "Supervisor (CAT)";
            Before = "OnBehalfOf (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "OnBehalfOf (CAT) BEFORE Supervisor (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "SupervisorChain (CAT)";
            Before = "OnBehalfOf (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "OnBehalfOf (CAT) BEFORE SupervisorChain (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "BuyerCode (CAT)";
            Before = "OnBehalfOf (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "OnBehalfOf (CAT) BEFORE BuyerCode (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "NonCatalog (CAT)";
            Before = "CustomShipTo (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "CustomShipTo (CAT) BEFORE NonCatalog (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "CapitalApprover (CAT)";
            Before = "CustomShipTo (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "CustomShipTo (CAT) BEFORE CapitalApprover (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "DesignatedApprover (CAT)";
            Before = "CustomShipTo (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "CustomShipTo (CAT) BEFORE DesignatedApprover (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "Supervisor (CAT)";
            Before = "CustomShipTo (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "CustomShipTo (CAT) BEFORE Supervisor (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "SupervisorChain (CAT)";
            Before = "CustomShipTo (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "CustomShipTo (CAT) BEFORE SupervisorChain (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "BuyerCode (CAT)";
            Before = "CustomShipTo (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "CustomShipTo (CAT) BEFORE BuyerCode (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "CapitalApprover (CAT)";
            Before = "NonCatalog (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "NonCatalog (CAT) BEFORE CapitalApprover (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "DesignatedApprover (CAT)";
            Before = "NonCatalog (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "NonCatalog (CAT) BEFORE DesignatedApprover (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "Supervisor (CAT)";
            Before = "NonCatalog (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "NonCatalog (CAT) BEFORE Supervisor (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "SupervisorChain (CAT)";
            Before = "NonCatalog (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "NonCatalog (CAT) BEFORE SupervisorChain (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "BuyerCode (CAT)";
            Before = "NonCatalog (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "NonCatalog (CAT) BEFORE BuyerCode (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "DesignatedApprover (CAT)";
            Before = "CapitalApprover (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "CapitalApprover (CAT) BEFORE DesignatedApprover (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "Supervisor (CAT)";
            Before = "CapitalApprover (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "CapitalApprover (CAT) BEFORE Supervisor (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "SupervisorChain (CAT)";
            Before = "CapitalApprover (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "CapitalApprover (CAT) BEFORE SupervisorChain (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "BuyerCode (CAT)";
            Before = "CapitalApprover (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "CapitalApprover (CAT) BEFORE BuyerCode (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "SupervisorChain (CAT)";
            Before = "DesignatedApprover (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "DesignatedApprover (CAT) BEFORE SupervisorChain (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "BuyerCode (CAT)";
            Before = "DesignatedApprover (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "DesignatedApprover (CAT) BEFORE BuyerCode (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "SupervisorChain (CAT)";
            Before = "Supervisor (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "Supervisor (CAT) BEFORE SupervisorChain (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "BuyerCode (CAT)";
            Before = "Supervisor (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "Supervisor (CAT) BEFORE BuyerCode (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "BuyerCodeChain (CAT)";
            Before = "BuyerCode (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "BuyerCode (CAT) BEFORE BuyerCodeChain (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "OnBehalfOf (CAT)";
            Before = "MalagaReviewer (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "MalagaReviewer (CAT) BEFORE OnBehalfOf (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "CustomShipTo (CAT)";
            Before = "MalagaReviewer (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "MalagaReviewer (CAT) BEFORE CustomShipTo (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "NonCatalog (CAT)";
            Before = "MalagaReviewer (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "MalagaReviewer (CAT) BEFORE NonCatalog (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "CapitalApprover (CAT)";
            Before = "MalagaReviewer (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "MalagaReviewer (CAT) BEFORE CapitalApprover (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "DesignatedApprover (CAT)";
            Before = "MalagaReviewer (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "MalagaReviewer (CAT) BEFORE DesignatedApprover (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "Supervisor (CAT)";
            Before = "MalagaReviewer (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "MalagaReviewer (CAT) BEFORE Supervisor (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "SupervisorChain (CAT)";
            Before = "MalagaReviewer (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "MalagaReviewer (CAT) BEFORE SupervisorChain (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "BuyerCode (CAT)";
            Before = "MalagaReviewer (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "MalagaReviewer (CAT) BEFORE BuyerCode (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "BuyerCode (CAT)";
            Before = "CategoryApprover (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "CategoryApprover (CAT) BEFORE BuyerCode (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "BuyerCodeChain (CAT)";
            Before = "CategoryApprover (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "CategoryApprover (CAT) BEFORE BuyerCodeChain (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "CategoryApprover (CAT)";
            Before = "SupervisorChain (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "SupervisorChain (CAT) BEFORE CategoryApprover (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "BuyerCode (CAT)";
            Before = "SupervisorChain (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "SupervisorChain (CAT) BEFORE BuyerCode (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "CategoryApprover (CAT)";
            Before = "DesignatedApprover (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "DesignatedApprover (CAT) BEFORE CategoryApprover (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "CategoryApprover (CAT)";
            Before = "CapitalApprover (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "CapitalApprover (CAT) BEFORE CategoryApprover (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "CategoryApprover (CAT)";
            Before = "NonCatalog (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "NonCatalog (CAT) BEFORE CategoryApprover (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "CategoryApprover (CAT)";
            Before = "CustomShipTo (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "CustomShipTo (CAT) BEFORE CategoryApprover (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "CategoryApprover (CAT)";
            Before = "OnBehalfOf (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "OnBehalfOf (CAT) BEFORE CategoryApprover (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "CategoryApprover (CAT)";
            Before = "Supervisor (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "Supervisor (CAT) BEFORE CategoryApprover (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "CategoryApprover (CAT)";
            Before = "MalagaReviewer (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "MalagaReviewer (CAT) BEFORE CategoryApprover (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "ERFQPurchasingFinal (CAT)";
            Before = "NonCatalog (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "NonCatalog (CAT) BEFORE ERFQPurchasingFinal (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "SupplierCustomApprover (CAT)";
            Before = "NonCatalog (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "NonCatalog (CAT) BEFORE SupplierCustomApprover (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "ERFQPurchasingFinal (CAT)";
            Before = "SupplierCustomApprover (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "SupplierCustomApprover (CAT) BEFORE ERFQPurchasingFinal (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "CustomShipTo (CAT)";
            Before = "eRFQNonPurchPreparer (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "eRFQNonPurchPreparer (CAT) BEFORE CustomShipTo (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "NonCatalog (CAT)";
            Before = "eRFQNonPurchPreparer (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "eRFQNonPurchPreparer (CAT) BEFORE NonCatalog (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "CapitalApprover (CAT)";
            Before = "eRFQNonPurchPreparer (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "eRFQNonPurchPreparer (CAT) BEFORE CapitalApprover (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "DesignatedApprover (CAT)";
            Before = "eRFQNonPurchPreparer (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "eRFQNonPurchPreparer (CAT) BEFORE DesignatedApprover (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "Supervisor (CAT)";
            Before = "eRFQNonPurchPreparer (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "eRFQNonPurchPreparer (CAT) BEFORE Supervisor (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "SupervisorChain (CAT)";
            Before = "eRFQNonPurchPreparer (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "eRFQNonPurchPreparer (CAT) BEFORE SupervisorChain (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "BuyerCode (CAT)";
            Before = "eRFQNonPurchPreparer (CAT))";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "eRFQNonPurchPreparer (CAT) BEFORE BuyerCode (CAT)";
            Permission = RuleEditor;
        },
        {
            After = "OnBehalfOf (CAT)";
            Before = "eRFQNonPurchPreparer (CAT)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "eRFQNonPurchPreparer (CAT) BEFORE OnBehalfOf (CAT)";
            Permission = RuleEditor;
        }
    );
    Current = true;
    EditRule = "function edit_rule (user, a, fields, changes)\r\n{\r\n\tvar TRANSCTR = user.hasPermission(\"CatTransactionCtr\");\r\n\tvar PURCHASING = user.hasPermission(\"CatPurchasing\");\r\n\tvar OWNER = (user.equals(a.getPreparer()) || user.equals(a.getRequester()));\r\n\tvar RESUBMIT = Approvable.EditRequiresResubmit;\r\n\tvar ALLOW = Approvable.EditAllowedWithoutEffects;\t\r\n\tvar REJECT = Approvable.EditNotAllowed;\r\n\tvar isRQFB = a.getDottedFieldValue(\"ISeRFQ\");\r\n\tvar wasRFQB = a.getDottedFieldValue(\"ISeRFQRequisition\");\r\n\r\n  Log.customer.debug(\"EDIT Rule (CAT) - user: \" +\r\n    user.getUniqueName());\r\n  Log.customer.debug(\"EDIT Rule (CAT) - preparer: \" +\r\n    a.getPreparer().getUniqueName());\r\n  Log.customer.debug(\"EDIT Rule (CAT) - requester: \" +\r\n    a.getRequester().getUniqueName());\r\n  Log.customer.debug(\"EDIT Rule (CAT) - TRANSCTR: \" +\r\n    TRANSCTR);\r\n  Log.customer.debug(\"EDIT Rule (CAT) - PURCHASING: \"\r\n    + PURCHASING);\r\n  Log.customer.debug(\"EDIT Rule (CAT) - OWNER: \" +\r\n    OWNER);\r\n\r\n\tif (fields.isEmpty() && changes.isEmpty()) {\r\n\t\tLog.customer.debug(\"EDIT Rule (CAT) - No change so Edit allowed!\");\r\n\t\treturn ALLOW; \r\n\t}\r\n\t\r\n\tif (!fields.isEmpty()) {\r\n\t\tLog.customer.debug(\"EDIT Rule (CAT) - Fields.size(): \" + fields.size());\r\n\t\tif (!TRANSCTR && !PURCHASING && isRQFB!=null && isRQFB.booleanValue()) {\r\n\t\t\tLog.customer.debug(\"EDIT Rule (CAT) - \" + \r\n\t\t\t\t\"General End User cannot edit eRFQ\");\r\n\t\t\treturn REJECT;\r\n\t\t}\r\n\t\tif (!TRANSCTR && !PURCHASING && wasRQFB!=null && wasRQFB.booleanValue()) {\r\n\t\t\tLog.customer.debug(\"EDIT Rule (CAT) - \" + \r\n\t\t\t\t\"General End User cannot edit eRFQ Requisition\");\r\n\t\t\treturn REJECT;\r\n\t\t}\r\n\t\tvar costChange = false;\r\n\t\tfor (var i = 0, s = fields.size(); i < s; i++) {\r\n\t\t\tvar field = fields.get(i);\r\n\t\t\tLog.customer.debug(\"EDIT Rule (CAT) - Field: \" + field);\r\n\t\t\tif (field.equals(\"ISeRFQ\")) {\r\n\t\t\t\tLog.customer.debug(\"EDIT Rule (CAT) - ISeRFQ changed\");\r\n\t\t\t\treturn RESUBMIT;\r\n\t\t\t}\r\n\t\t\tif (TRANSCTR || PURCHASING) {\r\n\t\t\t\tLog.customer.debug(\"EDIT Rule (CAT) - TRANSCTR or PURCHASING\");\r\n\t\t\t\tif (field.equals(\"EmergencyBuy\")) {\r\n\t\t\t\t\treturn RESUBMIT;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (OWNER) {\r\n\t\t\t\tLog.customer.debug(\"EDIT Rule (CAT) - OWNER\");\r\n\t\t\t\tif (field.equals(\"CommonCommodityCode\") || \r\n\t\t\t\t\t\tfield.equals(\"Supplier\")) {\r\n\t\t\t\t\treturn RESUBMIT;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (true) {  // must do before & after cost comparison (including Not-To-Exceed amounts)\r\n\t\t\tvar costDelta = getTotalCostChange(changes);\r\n\t\t\tLog.customer.debug(\"EDIT Rule (CAT) - costDelta: \" + costDelta);\r\n\t\t\tvar nteDelta = getNTECostChange(changes);\r\n\t\t\tLog.customer.debug(\"EDIT Rule (CAT) - nteDelta: \" + nteDelta);\r\n\t\t\tcostDelta = costDelta.add(nteDelta);\r\n\t\t\tLog.customer.debug(\"EDIT Rule (CAT) - Final costDelta: \" + costDelta);\r\n\t\t\tif (costDelta.getAmount().compareTo(new java.math.BigDecimal(0)) > 0) {  // means net cost increase\r\n\t\t\t\tLog.customer.debug(\"EDIT Rule (CAT) - NET COST INCREASE, MUST RESUBMIT!\");\r\n\t\t\t\treturn RESUBMIT;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (TRANSCTR || PURCHASING || OWNER) {\r\n\t\tLog.customer.debug(\"EDIT Rule (CAT) - POWER USER & NO KEY FIELDS --> ALLOW EDIT!\")\r\n\t\treturn ALLOW;\r\n\t}\r\n\tLog.customer.debug(\"EDIT Rule (CAT) - NO SPECIAL USER --> REJECT EDIT!\")\t\r\n\treturn REJECT;\r\n}\r\nedit_rule;\t\t\t\t    \r\n\r\nfunction getTotalCostChange (changeslist) \r\n{\r\n\tvar origCost = makeMoneyBase(0);\r\n\tvar finalCost = makeMoneyBase (0);\r\n\r\n\tfor (i = 0, numOfElements = changeslist.size(); i < numOfElements; i++) {\r\n\t\tLog.customer.debug(\"EDIT Rule (CAT) - changeList var - \" + changeslist.get(i));\t\t\r\n\t}\r\n\r\n\tfor (i = 0, numOfElements = changeslist.size(); i < numOfElements; i++) {\r\n\t\tvar element = changeslist.get(i);\r\n\t\tif (element.fieldName.equals(\"TotalCost\")) {\r\n\t\t\torigCost = element.old;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\tfor (i = 1, numOfElements = changeslist.size(); i <= numOfElements; i++) {\r\n\t\tvar element = changeslist.get(numOfElements - i);\r\n\t\tif (element.fieldName == \"TotalCost\") {\r\n\t\t\tfinalCost = element.element;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\tLog.customer.debug(\"EDIT Rule (CAT) - Original Cost: \" + origCost); \r\n\tLog.customer.debug(\"EDIT Rule (CAT) - Final Cost: \" + finalCost);\r\n\treturn ariba.basic.core.Money.subtract(finalCost,origCost);\r\n}\t\r\n\r\nfunction getNTECostChange (changeslist) \r\n{\r\n\tvar origNTE = makeMoneyBase(0);\r\n\tvar finalNTE = makeMoneyBase(0);\r\n\r\n\tfor (i = 0, numOfElements = changeslist.size(); i < numOfElements; i++) {\r\n\t\tLog.customer.debug(\"EDIT Rule (CAT) - changeList var - \" + changeslist.get(i));\t\t\r\n\t}\r\n\r\n\tfor (i = 0, numOfElements = changeslist.size(); i < numOfElements; i++) {\r\n\t\tvar element = changeslist.get(i);\r\n\t\tLog.customer.debug(\"EDIT Rule (CAT) - Element: \" + element); \t\t\t\r\n\t\tif (element.fieldName.equals(\"NTEAmount\")) {\r\n\t\t\tif (element.old != null) {\r\n\t\t\t\torigNTE = origNTE.add(element.old);\r\n\t\t\t\tLog.customer.debug(\"EDIT Rule (CAT) - Updated Original NTE: \" + origNTE);\r\n\t\t\t}\r\n\t\t}\t\r\n\t}\r\n\tfor (i = 1, numOfElements = changeslist.size(); i <= numOfElements; i++) {\r\n\t\tvar element = changeslist.get(numOfElements - i);\r\n\t\tLog.customer.debug(\"EDIT Rule (CAT) - Element: \" + element); \t\r\n\t\tif (element.fieldName == \"NTEAmount\") {\r\n\t\t\tfinalNTE = finalNTE.add(element.element);\r\n\t\t\tLog.customer.debug(\"EDIT Rule (CAT) - Updated Final NTE: \" + finalNTE); \r\n\t\t}\r\n\t}\t\t\r\n\tLog.customer.debug(\"EDIT Rule (CAT) - TOTAL Original NTE: \" + origNTE); \r\n\tLog.customer.debug(\"EDIT Rule (CAT) - TOTAL Final NTE: \" + finalNTE);\r\n\treturn ariba.basic.core.Money.subtract(finalNTE,origNTE);\r\n}";
    EditRulePermission = RuleEditor;
    EditRuleType = JavaScript;
    Edits = ( );
    Filters = (
        {
            Classname = "ariba.approvable.rules.JavaScriptFilterRule";
            Enabled = false;
            Filter = "function turnOffApprovals (r, ar, filtered)\r\n{\r\n\tvar type = ar.getType();\r\n\t/*\r\n\tif (!isType(type,\"Hazmat\")) {\r\n\t\tLog.javascript.debug(\"TurnOffApprovals (CAT) Filter - WORKING\");\r\n\t\treturn ar; \r\n\t}\r\n\t*/\r\n\treturn null; \r\n}\r\nturnOffApprovals;";
            Name = "TurnOffApprovals (CAT)";
            Permission = RuleEditor;
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptFilterRule";
            Enabled = false;
            Filter = "function handleEmergency (r, ar, filtered)\r\n{  \r\n  var currString = (String)\r\n    (r.getTotalCost().getCurrency().getDottedFieldValue(\"UniqueName\"))\r\n  if (!isERFQ(r)) {\r\n  if (currString.equalsIgnoreCase(\"USD\"))\r\n  {\r\n    Log.javascript.debug(\"Handle Emergency Filter ::: Total In USD: \" + \r\n      r.getTotalCost());\r\n    Log.javascript.debug(\"Handle Emergency Filter ::: \" +\r\n      \"UL In GBP: $25,000\");\r\n\r\n    if (isEmergency(r) && !isType(ar.getType(),\"NonCatalog\")) \r\n    {\r\n      if (r.getTotalCost().compareTo(25000) <= 0) \r\n      {\r\n        Log.javascript.debug(\r\n          \"Handle Emergency Filter ::: IsEmergency: \" + isEmergency(r));\r\n        Log.javascript.debug(\r\n          \"Handle Emergency Filter ::: Turn off for type: \" + ar.getType());\r\n        ar.setApprovalRequired(false);\r\n        Log.javascript.debug(\"Handle Emergency Filter ::: \" + \r\n          \"Total is less than USD UL\");\r\n        ar.setApprovalRequired(false);\r\n      }\r\n      Log.javascript.debug(\"Handle Emergency Filter ::: \" + \r\n        \"Total is more than USD UL\");\r\n    }\r\n    Log.javascript.debug(\r\n      \"Handle Emergency Filter ::: IsEmergency: \" + isEmergency(r));\r\n    Log.javascript.debug(\r\n      \"Handle Emergency Filter ::: Leave on for type: \" + ar.getType());\r\n  }\r\n  else\r\n  {\r\n    Log.javascript.debug(\"Handle Emergency Filter ::: \" +\r\n      \"Non-USD Requisition: \");\r\n    var limitBD = new BigDecimal(25000.00);\r\n    var currency = Currency.getCurrencyFromUniqueName(\"USD\");\r\n    var limit = new ariba.basic.core.Money(limitBD, currency);    \r\n    if (limit != null) \r\n    {\r\n      var total = r.getTotalCost().getApproxAmountInBaseCurrency();\r\n      Log.javascript.debug(\"Handle Emergency Filter ::: \" +\r\n        \"Total In BaseCurrency: \" + total);\r\n      result = limit.getApproxAmountInBaseCurrency();\r\n      Log.javascript.debug(\"Handle Emergency Filter ::: \" +\r\n        \"UL In BaseCurrency: \" + result);\r\n      if (isEmergency(r) && !isType(ar.getType(),\"NonCatalog\")) \r\n      {\r\n        if (total.compareTo(result) <= 0) \r\n        {\r\n          Log.javascript.debug(\r\n            \"Handle Emergency Filter ::: IsEmergency: \" + \r\n            isEmergency(r));\r\n          Log.javascript.debug(\r\n            \"Handle Emergency Filter ::: Turn off for type: \" + \r\n            ar.getType());\r\n          ar.setApprovalRequired(false);\r\n          Log.javascript.debug(\"Handle Emergency Filter ::: \" + \r\n            \"Total is less than USD UL\");\r\n          ar.setApprovalRequired(false);\r\n        }\r\n        Log.javascript.debug(\"Handle Emergency Filter ::: \" + \r\n          \"Total is more than USD UL\");\r\n      }\r\n      Log.javascript.debug(\r\n        \"Handle Emergency Filter ::: IsEmergency: \" + isEmergency(r));\r\n      Log.javascript.debug(\r\n        \"Handle Emergency Filter ::: Leave on for type: \" + ar.getType());\r\n    }\r\n  }\r\n  }\r\n  return null;\r\n}\r\nhandleEmergency;";
            Name = "HandleEmergency (CAT)";
            Permission = RuleEditor;
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptFilterRule";
            Enabled = true;
            Filter = "function handleCapitalOrders (r, ar, filtered)\r\n{\r\n\tvar type = ar.getType();\r\n\tLog.javascript.debug(\r\n\t\t\"HandleCapitalOrders (CAT) Filter - \" + \r\n\t\t\"areAllLineItemsCapital?\" + \r\n\t\tareAllLineItemsCapital(r));\r\n\tif (!isERFQ(r)) {\r\n\tif (areAllLineItemsCapital(r) && !isType(type,\"NonCatalog\")\r\n\t\t&& !isType(type, \"CapitalApprover\")) {\r\n\t\tar.setApprovalRequired(false);\r\n\t}\r\n\t}\r\n\treturn null;\r\n}\r\nhandleCapitalOrders;";
            Name = "HandleCapitalOrders (CAT)";
            Permission = RuleEditor;
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptFilterRule";
            Enabled = true;
            Filter = "function handleRevision (r, ar, filtered)\r\n{\r\n    var v1 = r.getPreviousVersion();\r\n    Log.javascript.debug(\"HandleRevisions (CAT) Filter - V1: \" + v1);\r\n    if  (v1 != null) {\r\n        var type = ar.getType();\r\n        var reason = ar.getReasonKey();\r\n        Log.javascript.debug(\"HandleRevisions (CAT) Filter - ar type: \" + \r\n            type);\r\n        Log.javascript.debug(\r\n            \"HandleRevisions (CAT) Filter - ar reasonKey: \" + reason);\r\n        if (isType(type,\"Supervisor\")) {\r\n            var total = r.getTotalCost();\r\n            var nte_total = \r\n                CatUtil.getNotToExceedTotal(r.getLineItems());\r\n            Log.javascript.debug(\r\n                \"HandleRevisions (CAT) Filter - total / nte_total: \" + \r\n                total + nte_total);\r\n            total = ariba.basic.core.Money.add(total, nte_total);\r\n            Log.javascript.debug(\r\n                \"HandleRevisions (CAT) Filter - total (w/nte): \" + total);\r\n            var totalV1 = v1.getTotalCost();\r\n            Log.javascript.debug(\r\n                \"HandleRevisions (CAT) Filter - V1 total: \" + totalV1);\r\n            nte_total = CatUtil.getNotToExceedTotal(v1.getLineItems());\r\n            Log.javascript.debug(\r\n                \"HandleRevisions (CAT) Filter - V1 nte_total: \" + nte_total);\r\n            totalV1 = ariba.basic.core.Money.add(totalV1, nte_total);\r\n            Log.javascript.debug(\r\n                \"HandleRevisions (CAT) Filter - V1 total (w/nte): \" + totalV1);\r\n            // cost increased so must be reapproved\r\n            if (total.compareTo(totalV1) == 1) {\r\n                Log.javascript.debug(\"HandleRevisions (CAT) Filter - \" + \r\n                    \"Cost Increase, Supervisor/Chain remains!\");\r\n                return null;\r\n            }\r\n        }\r\n        else {\r\n            if (isType(type,\"NonCatalog\")) {\r\n                Log.javascript.debug(\"HandleRevisions (CAT) Filter - \" + \r\n                    \"Transaction Team is required approver on change\");\r\n                return null;\r\n            }\r\n            if (isType(type,\"DesignatedApprover\")) {\r\n                Log.javascript.debug(\"HandleRevisions (CAT) Filter - \" + \r\n                    \"Department approver is required on change\");\r\n                return null;\r\n            }\r\n            if (ar.getFieldValue(\"Creator\") != null) {\r\n                Log.javascript.debug(\"HandleRevisions (CAT) Filter - \" + \r\n                    \"User-added approver so remains!\");    \r\n                return null;\r\n            }\r\n        }\r\n        return ar;\r\n    }\r\n    return null;\r\n}\r\nhandleRevision;";
            Name = "HandleRevisions (CAT)";
            Permission = RuleEditor;
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptFilterRule";
            Enabled = true;
            Filter = "function handleERFQ (r, ar, filtered)\r\n{\r\n  var preparer = r.getPreparer();\r\n  var isPurchasing = false;\r\n  Log.javascript.debug(\r\n    \"Handle ERFQ Filter ::: Current User: \" + preparer );\r\n  isPurchasing = preparer .hasPermission(\"CatPurchasing\");\r\n  Log.javascript.debug(\r\n    \"Handle ERFQ Filter ::: isPurchasing: \" + isPurchasing);\r\n\r\n  if (isERFQ(r))\r\n  {\r\n    if (!isType(ar.getType(),\"NonCatalog\") && \r\n        !isType(ar.getType(),\"ERFQPurchasingFinal\") &&\r\n        !isType(ar.getType(),\"SupplierCustomApprover\"))\r\n    {\r\n      Log.javascript.debug(\r\n        \"Handle ERFQ Filter ::: isERFQ: \" + isERFQ(r));\r\n      Log.javascript.debug(\r\n        \"Handle ERFQ Filter ::: Turn off for type: \" + ar.getType());\r\n      ar.setApprovalRequired(false);\r\n      return ar;\r\n    }\r\n    if (isType(ar.getType(),\"NonCatalog\") && isPurchasing)\r\n    {\r\n    \t// Removing as the ERFQ is created by Purchasing\r\n    \treturn ar;\r\n    }\r\n  }\r\n  Log.javascript.debug(\r\n    \"Handle ERFQ Filter ::: IsERFQ: \" + isERFQ(r));\r\n  Log.javascript.debug(\r\n    \"Handle ERFQ Filter ::: Leave on for type: \" + ar.getType());\r\n  return null;\r\n}\r\nhandleERFQ;";
            Name = "HandleERFQ (CAT)";
            Permission = RuleEditor;
        }
    );
    LoadDB = true;
    Name = "CAT EZO Requisition Rules";
    Simples = (
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "function baseobject_condition (r)\r\n{ \r\nreturn false;\r\n}\r\nbaseobject_condition;";
            Enabled = false;
            Name = "BaseObject (CAT)";
            Permission = RuleEditor;
            Result = "function baseobject_action (r)\r\n{\r\nreturn null;\r\n}\r\nbaseobject_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "function onBehalfOf_condition (r) \r\n{\r\n    return r.getRequester() != r.getPreparer();\r\n}\r\nonBehalfOf_condition;\r\n";
            Enabled = true;
            Name = "OnBehalfOf (CAT)";
            Permission = RuleEditor;
            Result = "function onBehalfOf_action (r) \r\n{\r\n\treturn ApprovalRequest.create(\r\n\t\tr,\r\n\t\tr.getRequester(),\r\n\t\tfalse,\r\n\t\t\"cat.rulereasons.vcsv3\",\r\n\t\t\"OnBehalfOf\"\r\n\t);\r\n}\r\nonBehalfOf_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "var isAdhoc;\r\n\r\nfunction noncatalog_condition (r) \r\n{\r\n\tisAdhoc = false;\r\n\tvar isMissing = false;\r\n\tvar lines = r.getLineItems();\r\n\tvar size = lines.size();\r\n\twhile (size > 0) {\r\n\t\tvar rli = lines.get(size-1);\r\n\t\tif (rli.getIsAdHoc() && !(rli.getIsFromCatalog())) {\r\n\t\t\tisAdhoc = true;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tsize--;\r\n\t}\r\n\tLog.javascript.debug(\r\n\t\t\"NonCatalog (CAT) Condition isAdhoc: \" + isAdhoc);\r\n\treturn (isAdhoc || isMissing);\r\n}\r\nnoncatalog_condition;";
            Enabled = true;
            Name = "NonCatalog (CAT)";
            Permission = RuleEditor;
            Result = "function noncatalog_action (r) \r\n{\r\n\tLog.javascript.debug(\r\n\t\t\"NonCatalog (CAT) Action - isAdhoc: \" + isAdhoc);\r\n\tvar approver = Role_DataMaintainer;\r\n\tvar reason = \"DataMaintainer_General\"; \r\n\tvar required = true;\r\n\t\r\n\tif (Role_TransCenterEU != null) {\r\n\t\tapprover = Role_TransCenterEU;\r\n\t\tif (isAdhoc) {\r\n\t\t\treason = \"NonCatalog\";\r\n\t\t}\r\n\t\tif (isERFQ(r)) {\r\n\t\t\treason = \"ERFQPurchasingInitial\";\r\n\t\t}\r\n\t}\r\n\tLog.javascript.debug(\r\n\t\t\"NonCatalog (CAT) Action - reason: \" + reason);\r\n\r\n\treturn ApprovalRequest.create(\r\n\t\tr, \r\n\t\tapprover, \r\n\t\trequired, \r\n\t\t\"cat.rulereasons.vcsv3\", \r\n\t\treason\r\n\t);\r\n}\r\nnoncatalog_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSplitterRule";
            Condition = "function otherDept_condition (r, SplitAccountings)\r\n{\r\n\tvar sa = SplitAccountings;\r\n\tvar deptapprover = sa.getFieldValue(\"DepartmentApprover\");\r\n\tLog.javascript.debug(\r\n\t\t\"OtherDepartment (CAT) Condition - \" + \r\n\t\t\"dept approver: \" + deptapprover);\r\n\tLog.javascript.debug(\r\n\t\t\"OtherDepartment (CAT) Condition - \" +\r\n\t\t\"Is Capital: \" + isCapital(sa));\r\n\r\n\treturn (deptapprover != null && !isCapital(sa))\r\n}\r\notherDept_condition;";
            Enabled = true;
            FieldPath = LineItems.Accountings.SplitAccountings;
            Name = "DesignatedApprover (CAT)";
            Permission = RuleEditor;
            Result = "function otherDept_action (r, SplitAccountings)\r\n{\r\n\tvar approver = Role_DataMaintainer;\r\n\tvar reason = \"DataMaintainer_DesignatedApprover\"; \r\n\tvar sa = SplitAccountings;\r\n\tvar combo = \"\";\r\n\r\n\tif (sa.getFieldValue(\"DepartmentApprover\") != null){\r\n\t\tapprover = sa.getFieldValue(\"DepartmentApprover\");\r\n\t\treason = Fmt.Sil(\"cat.rulereasons.vcsv3\", \r\n\t\t\t\"OtherDepartment\");\r\n\t\tvar dept = sa.getFieldValue(\"Department\");\r\n\t\tvar div = sa.getFieldValue(\"Division\");\r\n\t\tvar sect = sa.getFieldValue(\"Section\");\r\n\t\tif (dept != null && div != null && sect != null) {\r\n\t\t\tcombo = dept + \"-\" + div + \"-\" + sect;\r\n\t\t}\r\n\t}\r\n\r\n\treturn ApprovalRequest.create(\r\n\t\tr, \r\n\t\tapprover, \r\n\t\ttrue, \r\n\t\t\"cat.rulereasons.vcsv3\", \r\n\t\tFmt.S(reason, combo)\r\n\t);\r\n}\r\notherDept_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "function supervisor_condition (r)\r\n{\r\n\treturn true;\r\n}\r\nsupervisor_condition;\r\n";
            Enabled = true;
            Name = "Supervisor (CAT)";
            Permission = RuleEditor;
            Result = "function supervisor_action (r)\r\n{\r\n  var approver = Role_DataMaintainer;\r\n  var reason = \"DataMaintainer_Supervisor\";\r\n  var required = true;\r\n  var supervisor = User2Supervisor(r.getRequester());  \r\n  if (supervisor != null) {\r\n    var puser = CommonUser.getPartitionedUser(\r\n                        r.getRequester(), \r\n                        r.getPartition()\r\n                      );\r\n    Log.javascript.debug(\"Supervisor (CAT) Action - part user: \" +\r\n      puser);    \r\n    if (puser != null) {\r\n      var code = puser.getFieldValue(\"ExpenseApprovalCode\");\r\n      Log.javascript.debug(\"Supervisor (CAT) Action - approval code: \" +\r\n        code);\r\n      if (code != null) {\r\n        var limit = getUserExpenseLimit(code);\r\n        Log.javascript.debug(\"Supervisor (CAT) Action - limit: \" + limit);\r\n        if (limit != null) {\r\n          approver = supervisor;\r\n          var total = r.getTotalCost();\r\n          Log.javascript.debug(\"Supervisor (CAT) Action - total: \" + total);\r\n          total = ariba.basic.core.Money.add(\r\n            total, \r\n            CatUtil.getNotToExceedTotal(r.getLineItems())\r\n          );\r\n          Log.javascript.debug(\"Supervisor (CAT) Action - \" +\r\n            \"NEW total (w/NTE Prices): \" + total);\r\n          Log.javascript.debug(\"Supervisor (CAT) Action - \" + \r\n            \"limit compareTo total: \" + limit.compareTo(total));  \r\n          if (limit.compareTo(total) > -1) {\r\n            required = false;\r\n            reason = \"Supervisor_Watcher\";\r\n          }\r\n          else {\r\n            reason = \"Supervisor_Approver\";\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return ApprovalRequest.create(\r\n    r, \r\n    approver, \r\n    required, \r\n    \"cat.rulereasons.vcsv3\", \r\n    reason\r\n  );\r\n}    \r\nsupervisor_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSplitterRule";
            Condition = "function customShipTo_condition (r, AdapterSource)\r\n{\r\n\tLog.javascript.debug(\r\n\t\t\"CustomShipTo (CAT) Condition - adaptersoure: \" +\r\n\t\tAdapterSource);\r\n\tLog.javascript.debug(\r\n\t\"CustomShipTo (CAT) Condition - null/blank test: \"\r\n\t+ StringUtil.nullOrEmptyOrBlankString(AdapterSource));\r\n\t\r\n\treturn StringUtil.nullOrEmptyOrBlankString(AdapterSource);\r\n}\r\ncustomShipTo_condition;";
            Enabled = true;
            FieldPath = LineItems.ShipTo.AdapterSource;
            Name = "CustomShipTo (CAT)";
            Permission = RuleEditor;
            Result = "function customShipTo_action (r, AdapterSource) \r\n{\r\n\tvar approver = Role_DataMaintainer;\r\n\tvar reason = \"DataMaintainer_CustomShipTo\";\r\n\tvar required = false;\r\n\tvar supervisor = User2Supervisor(r.getRequester());\r\n\r\n\tif (supervisor != null) {\r\n\t\tapprover = supervisor;\r\n\t\treason = \"CustomShipTo\";\r\n\t}\r\n\r\n\treturn ApprovalRequest.create(\r\n\t\tr, \r\n\t\tapprover, \r\n\t\trequired, \r\n\t\t\"cat.rulereasons.vcsv3\", \r\n\t\treason\r\n\t);\r\n}\r\ncustomShipTo_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "function capitalApprover_condition (r)\r\n{\r\n\t\r\n\tLog.javascript.debug(\r\n\t\t\"CapitalApprover (CAT) Condition - \" + \r\n\t\t\"Carrying out Capital test\");\r\n\treturn CatCaptialCondition.containsCapitalLine(r);\r\n}\r\ncapitalApprover_condition;";
            Enabled = true;
            Name = "CapitalApprover (CAT)";
            Permission = RuleEditor;
            Result = "function capitalApprover_action (r)\r\n{\r\n\tvar approver = Role_DataMaintainer;\r\n\tvar reason = \"DataMaintainer_Capital\";\r\n\tvar required = true;\r\n\tvar afac = \r\n\t\tr.getRequester().getFieldValue(\"AccountingFacility\");\r\n\tvar partName = r.getPartition().getName();\r\n\tLog.javascript.debug(\r\n\t\t\"CapitalApprover (CAT) Action - afac: \" + afac);\r\n\tLog.javascript.debug(\r\n\t\t\"CapitalApprover (CAT) Action - partname: \" +\r\n\t\tpartName);\r\n\tvar role = getCapitalRole(\"Capital Approver\", afac, partName);\r\n\tLog.javascript.debug(\r\n\t\t\"CapitalApprover (CAT) Action - role: \" + role);\r\n\tif (role != null) {\r\n\t\tapprover = role;\r\n\t\treason = \"Capital_Approver\";\r\n\t}\r\n\treturn ApprovalRequest.create(\r\n\t\tr, \r\n\t\tapprover, \r\n\t\trequired, \r\n\t\t\"cat.rulereasons.vcsv3\", \r\n\t\treason\r\n\t);\r\n}\r\ncapitalApprover_action; ";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "function buyerCode_condition (r) \r\n{\r\n\tvar result = false;\r\n\tif (anyLineItems(r, IsAdHoc)) {\r\n\t\tvar adhocTotal = getAdHocTotal(r.getLineItems());\r\n\t\tLog.javascript.debug(\r\n\t\t\t\"BuyerCode (CAT) - adhocTotal: \" +\r\n\t\t\tadhocTotal);\r\n\t\tvar bdThreshold = getBuyerCodeThreshold(\"Buyer\");\r\n\t\tif (bdThreshold != null) {\r\n\t\t\tLog.javascript.debug(\r\n\t\t\t\"BuyerCode (CAT) - bdThreshold: \" +\r\n\t\t\tbdThreshold);\r\n\t\t\tresult = \r\n\t\t\tadhocTotal.compareTo(bdThreshold) > 0;\r\n\t\t}\r\n\t}\r\n\treturn result;\r\n}\r\nbuyerCode_condition;";
            Enabled = true;
            Name = "BuyerCode (CAT)";
            Permission = RuleEditor;
            Result = "function buyerCode_action (r) \r\n{\r\n\tvar approver = Role_DataMaintainer;\r\n\tvar reason = \"DataMaintainer_BuyerCode\"; \r\n\tvar required = false;\r\n\tvar lines = r.getLineItems();\r\n\tvar linecount = r.getLineItemsCount();\r\n\tvar buyer = null;\r\n\tvar approverListName = \"\";\r\n\r\n\tfor (i=0;i<linecount && buyer==null;i++) {\r\n\t\tvar line = lines.get(i);\r\n\t\tbuyer = line.getFieldValue(\"BuyerCode\");\r\n\t}\r\n\tLog.javascript.debug(\"BuyerCode (CAT) - bcarray: \" + buyer);\r\n\tvar bcPrefix = buyer.getUniqueName().substring(0,2);\r\n\tLog.javascript.debug(\r\n\t\t\"BuyerCode (CAT) - bcPrefix: \" + bcPrefix);\r\n\tLog.javascript.debug(\r\n\t\t\"BuyerCode (CAT) - Call \" +\r\n\t\t\"getApproversFromFileUsingKey (BEFORE)\");\r\n\tvar returnlist = \r\n\t\tgetApproversFromFileUsingKey(bcPrefix, bcAppFile);\r\n\tLog.javascript.debug(\"BuyerCode (CAT) - Call \" +\r\n\t\t\"getApproversFromFileUsingKey (AFTER)\");\r\n\r\n\tif (!returnlist.isEmpty()) {\r\n\t\tLog.javascript.debug(\r\n\t\t\t\"BuyerCode (CAT) - returnlist.size(): \" +\r\n\t\t\treturnlist.size());\r\n\t\tfor (i=0;i<returnlist.size();i++) {\r\n\t\tvar userid = returnlist.get(i);\r\n\t\tif (!StringUtil.nullOrEmptyOrBlankString(userid)) {\r\n\t\t\tvar principal = \r\n\t\t\tUniqueName2Principal(userid,\r\n\t\t\tr.getPartition());\r\n\t\t\tif (principal != null) {\r\n\t\t\tif (StringUtil.nullOrEmptyOrBlankString(\r\n\t\t\t\tapproverListName\r\n\t\t\t\t))\r\n\t\t\t{\r\n\t\t\t\tapproverListName +=\r\n\t\t\t\tprincipal.getUniqueName();\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tapproverListName += \"/\" +\r\n\t\t\t\tprincipal.getUniqueName();\r\n\t\t\t}\r\n\t\t\treason = \"BuyerCode\";\r\n\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tvar approverList = \r\n\t\tCatUtil2.getHazmatApproverList(\r\n\t\t\tapproverListName, \r\n\t\t\tr.getPartition());\r\n\treturn ApprovalRequest.create(\r\n\t\tr, \r\n\t\tapproverList, \r\n\t\trequired, \r\n\t\t\"cat.rulereasons.vcsv3\", \r\n\t\treason\r\n\t);\r\n}\r\nbuyerCode_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSplitterRule";
            Condition = "function malReview_condition (r, SplitAccountings)\r\n{\r\n\tvar sa = SplitAccountings;\r\n\tvar facilityCode = sa.getFieldValue(\"AccountingFacility\");\r\n\tLog.javascript.debug(\r\n\t\t\"MalagaReviewer (CAT) Condition - \" + \r\n\t\t\"Accounting Fac: \" + facilityCode);\r\n\r\n\treturn (\"NF\".equals(facilityCode) || \"NG\".equals(facilityCode))\r\n}\r\nmalReview_condition;";
            Enabled = true;
            FieldPath = LineItems.Accountings.SplitAccountings;
            Name = "MalagaReviewer (CAT)";
            Permission = RuleEditor;
            Result = "function malReview_action (r, SplitAccountings)\r\n{\r\n\tvar approver = Role_DataMaintainer;\r\n\tvar reason = \"DataMaintainer_MalagaReviewer\";\r\n\r\n\tif (Role_MalagaReviewer != null) {\r\n\t\tapprover = Role_MalagaReviewer;\r\n\t\treason = \"MalagaReviewer\";\r\n\t}\r\n\tLog.javascript.debug(\r\n\t\t\"MalagaReviewer (CAT) Action - reason: \" +\r\n\t\treason);\r\n\tLog.javascript.debug(\r\n\t\t\"MalagaReviewer (CAT) Action - approver: \" +\r\n\t\tapprover);\r\n\r\n\treturn ApprovalRequest.create(\r\n\t\tr, \r\n\t\tapprover, \r\n\t\ttrue, \r\n\t\t\"cat.rulereasons.vcsv3\",\r\n\t\treason\r\n\t);\r\n}\r\nmalReview_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSplitterRule";
            Condition = "function categoryApprover_condition (r, LineItems)\r\n{\r\n\tvar ceme = LineItems.getCommodityExportMapEntry();\r\n\tLog.javascript.debug(\"I AM HERE 1\");\r\n\tLog.javascript.debug(\"CategoryApprover (CAT) - ceme: \" + \r\n\t\tceme);\r\n\tif (ceme != null) {\r\n\t\tvar cc = ceme.getCommodityCode();\r\n\t\tvar caROLE = \r\n\t\tceme.getDottedFieldValue(\"CategoryApprover\");\r\n\t\tLog.javascript.debug(\r\n\t\t\"CategoryApprover (CAT) - cc: \" + cc);\r\n\t\tLog.javascript.debug(\r\n\t\t\"CategoryApprover (CAT) - caROLE: \" + caROLE);\r\n\t\tif (!StringUtil.nullOrEmptyOrBlankString(caROLE)) \r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n \t}\r\n \treturn false;\r\n}\r\ncategoryApprover_condition;";
            Enabled = true;
            FieldPath = LineItems;
            Name = "CategoryApprover (CAT)";
            Permission = RuleEditor;
            Result = "function categoryApprover_action (r, LineItems) \r\n{\r\n\tvar approver = Role_DataMaintainer;\r\n\tvar reason = \"DataMaintainer_CategoryApprover\";\r\n\tvar required = true;\r\n\tvar ceme = LineItems.getCommodityExportMapEntry();\r\n\tLog.javascript.debug(\"CategoryApprover (CAT) - ceme: \" + \r\n\t\tceme);\r\n\tif (ceme != null) {\r\n\t\tvar caROLE = \r\n\t\tceme.getDottedFieldValue(\"CategoryApprover\");\r\n\t\tLog.javascript.debug(\r\n\t\t\"CategoryApprover (CAT) - caROLE: \" + caROLE);\r\n\t\tif (!StringUtil.nullOrEmptyOrBlankString(caROLE)) \r\n\t\t{\r\n\t\t\tvar role = Role.getRole(caROLE); \r\n\t\t\tLog.javascript.debug(\r\n\t\t\t\"CategoryApprover (CAT) - role: \" + \r\n\t\t\trole);\r\n\t\t\tif (role != null) {\r\n\t\t\t\tapprover = role;\r\n\t\t\t\treason=\r\n\t\t\t\t\"CategoryApprover\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn ApprovalRequest.create(\r\n\t\tr,\r\n\t\tapprover,\r\n\t\trequired,\r\n\t\t\"cat.rulereasons.vcsv3\",\r\n\t\treason\r\n\t);\r\n}\r\ncategoryApprover_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "function ERFQPurchasingFinal_condition (r) \r\n{\r\n\tvar isReqERFQ = isERFQ(r);\r\n\tLog.javascript.debug(\r\n\t\t\"ERFQPurchasingFinal (CAT) Condition isReqERFQ: \" + isReqERFQ);\r\n\treturn isReqERFQ;\r\n}\r\nERFQPurchasingFinal_condition;";
            Enabled = true;
            Name = "ERFQPurchasingFinal (CAT)";
            Permission = RuleEditor;
            Result = "function ERFQPurchasingFinal_action (r) \r\n{\r\n\tvar isReqERFQ= isERFQ(r);\r\n\tLog.javascript.debug(\r\n\t\t\"ERFQPurchasingFinal (CAT) Action - isReqERFQ: \" + isReqERFQ);\r\n\tvar approver = Role_DataMaintainer;\r\n\tvar reason = \"DataMaintainer_General\"; \r\n\tvar required = true;\r\n\t\r\n\tif (Role_TransCenterEU != null) {\r\n\t\tapprover = Role_TransCenterEU;\r\n\t\tif (isReqERFQ) {\r\n\t\t\treason = \"ERFQPurchasingFinal\";\r\n\t\t}\r\n\t}\r\n\tLog.javascript.debug(\r\n\t\t\"ERFQPurchasingFinal (CAT) Action - reason: \" + reason);\r\n\r\n\treturn ApprovalRequest.create(\r\n\t\tr, \r\n\t\tapprover, \r\n\t\trequired, \r\n\t\t\"cat.rulereasons.vcsv3\", \r\n\t\treason\r\n\t);\r\n}\r\nERFQPurchasingFinal_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "function SupplierCustomApprover_condition(r)\r\n{\r\nreturn isERFQ(r);\r\n}\r\nSupplierCustomApprover_condition;";
            Enabled = true;
            Name = "SupplierCustomApprover (CAT)";
            Permission = RuleEditor;
            Result = "function SupplierCustomApprover_action (r)\r\n{\r\n  var name = \"Send Supplier eRFQ\";\r\n  var reason = \"SendSupplierERFQ\";\r\n  var ca = CustomApprover.get(r.getPartition(), name);\r\n  Log.javascript.debug(\"SupplierCustomApprover (CAT) \" + \r\n    \"Custom Approver: \" + ca);\r\n  if (ca == null) {\r\n    // couldn't find existing so create new\r\n    ca = new CustomApprover(\r\n            r.getPartition(), \r\n            name,\r\n            \"config.java.customapprover.vcsv3.CatEZOSendERFQRequests\"             );\r\n    var nameML = \r\n        new ariba.base.core.MultiLingualString(r.getPartition());\r\n    nameML.setPrimaryString(name);\r\n    Log.javascript.debug(\"SupplierCustomApprover (CAT) \" +\r\n      \"nameML: \" + nameML);\r\n    ca.setName(nameML);\r\n    Log.javascript.debug(\"SupplierCustomApprover (CAT) \" +\r\n      \"Custom Approver (new): \" + ca);\r\n  }\r\n  return ApprovalRequest.create(\r\n    r,\r\n    ca,\r\n    false,\r\n    \"cat.ruleReasons.vcsv3\",\r\n    reason);\r\n}\r\nSupplierCustomApprover_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "function eRFQNonPurchPreparer_condition (r) \r\n{\r\n    var user = r.getPreparer();\r\n    var isPURCHASING = user.hasPermission(\"CatPurchasing\");\r\n    var wasReqERFQ = wasERFQ(r);\r\n\r\n    return (wasReqERFQ && !isPURCHASING);\r\n}\r\neRFQNonPurchPreparer_condition;";
            Enabled = true;
            Name = "eRFQNonPurchPreparer (CAT)";
            Permission = RuleEditor;
            Result = "function eRFQNonPurchPreparer_action (r) \r\n{\r\n      Log.javascript.debug(\"Entered in to  eRFQNonPurchPreparer_action\");\r\n      var DATAMAINTAINER = Role_DataMaintainer;\r\n      var prepare = r.getPreparer()\r\n    \r\n      Log.javascript.debug(\"The approvallist returns \" + prepare);\r\n   \r\n   if (prepare.getActive())\r\n   {\r\n      Log.javascript.debug(\"Approver is getting added in eRFQNonPurchPreparer_action \");\r\n        return ApprovalRequest.create(\r\n         r,\r\n         prepare,\r\n         true,\r\n         \"cat.rulereasons.vcsv3\",\r\n         \"eRFQNonPurchPreparer\"\r\n    );\r\n    }\r\n    else\r\n    {\r\n             Log.javascript.debug(\"Data maintainer is getting added in eRFQNonPurchPreparer_action \");\r\n       return ApprovalRequest.create(\r\n                r,\r\n                DATAMAINTAINER,\r\n                true,\r\n                \"cat.rulereasons.vcsv3\",\r\n                \"eRFQNonPurchPreparer\"\r\n    );\r\n    \r\n    }\r\n}\r\neRFQNonPurchPreparer_action;";
        }
    );
    Type = ariba.purchasing.core.Requisition;
}
