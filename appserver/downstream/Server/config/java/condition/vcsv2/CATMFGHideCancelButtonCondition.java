package config.java.condition.vcsv2;import java.util.List;import ariba.approvable.core.LineItemCollection;import ariba.approvable.core.condition.LineItemsEditable;import ariba.base.core.Base;import ariba.base.core.BaseId;import ariba.purchasing.core.Requisition;import ariba.user.core.Permission;import ariba.user.core.User;import ariba.util.core.PropertyTable;import ariba.util.log.Log;public class CATMFGHideCancelButtonCondition extends LineItemsEditable{    public CATMFGHideCancelButtonCondition ()    {    }    public boolean evaluate(int operation, User user, PropertyTable params)    {        Log.customer.debug("IN CATMFGHideCancelButtonCondition ");        Log.customer.debug("CATMFGHideCancelButtonCondition : Change is: "+Change);        Log.customer.debug("CATMFGHideCancelButtonCondition : Cancel is: "+Cancel);        Log.customer.debug("CATMFGHideCancelButtonCondition : operation is: "+operation);        ariba.approvable.core.LineItemCollection lic = lineItemCollection(params);		Log.customer.debug("CatHideChangeButton2 lic: " + lic);		if(lic == null) return false;        if(operation == 5){            Log.customer.debug("CatHideChangeButton5 operation 5");            if(!(lic instanceof Requisition))            {                Log.customer.debug("CatHideChangeButton5 LineItemCollection not a Requisition return true: " + lic);                return true;            } else            {                Requisition req = (Requisition)lic;                Log.customer.debug("CatHideChangeButton5 req: " + req);
                String strstatus = (String)req.getDottedFieldValue("StatusString");                Log.customer.debug("CatHideChangeButton5 Requisition Status IS: %s" + strstatus);                if(strstatus.startsWith("Receiv")){					return false;				}				else return true;            }		}        /*if(operation == 6){            Log.customer.debug("CatHideChangeButton2 operation 6");            if(!(lic instanceof Requisition))            {				Log.customer.debug("CatHideCancelButton LineItemCollection not a Requisition return true: " + lic);                return true;            }else            {				Requisition req = (Requisition)lic;				Log.customer.debug("CatHideCancelButton req: " + req);				boolean isReqEditable = isReqEditable(req);				Log.customer.debug("CatHideCancelButton Editable returning: " + isReqEditable);                if(isReqEditable){					return true;				}				else return false;			}		}*/        else            return super.evaluate(operation, user, params);    }	protected LineItemCollection lineItemCollection(PropertyTable params)    {        Object lic = propertyForKey(params, "LineItemCollection");        if(lic instanceof LineItemCollection)            return (LineItemCollection)lic;        else            return null;    }    public boolean isReqEditable(Requisition req)    {        User effectiveUser = (User)Base.getSession().getEffectiveUser();        Log.customer.debug("CatHideChangeButton2:  Effective User is: "+effectiveUser.getFieldValue("Name"));        Permission changeOrderPermission = Permission.getPermission("CatPurchasing");        Log.customer.debug("CatHideChangeButton2:  Effective User changeOrderPermission: "+changeOrderPermission);        BaseId coPermBaseId = (BaseId)changeOrderPermission.getBaseId();        Log.customer.debug("CatHideChangeButton2:  Effective User coPermBaseId: "+coPermBaseId);        if(effectiveUser != null)        {            List permissions = effectiveUser.getAllPermissions();            if(permissions.contains(coPermBaseId))            {                Log.customer.debug("CatHideChangeButton2:  Effective User has permission");                return true;            } else            {                Log.customer.debug("CatHideChangeButton2:  Effective User has no permission");                return false;            }        } else        {            Log.customer.debug("CatHideChangeButton2:  Effective User is null", req);            return false;        }    }}